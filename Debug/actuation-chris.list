
actuation-chris.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007184  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000049c  08007358  08007358  00017358  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080077f4  080077f4  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  080077f4  080077f4  000177f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080077fc  080077fc  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080077fc  080077fc  000177fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007800  08007800  00017800  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08007804  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000194  200001dc  080079e0  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000370  080079e0  00020370  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020852  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003daf  00000000  00000000  00040a5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f10  00000000  00000000  00044810  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00003658  00000000  00000000  00045720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000243ad  00000000  00000000  00048d78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00024c6e  00000000  00000000  0006d125  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d6b67  00000000  00000000  00091d93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001688fa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000046d8  00000000  00000000  0016894c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    0001ae43  00000000  00000000  0016d024  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800733c 	.word	0x0800733c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e0 	.word	0x200001e0
 800020c:	0800733c 	.word	0x0800733c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f8c:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f8e:	2400      	movs	r4, #0
{
 8000f90:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f92:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8000f96:	e9cd 4406 	strd	r4, r4, [sp, #24]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f9a:	4b32      	ldr	r3, [pc, #200]	; (8001064 <MX_GPIO_Init+0xd8>)
 8000f9c:	9400      	str	r4, [sp, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f9e:	9408      	str	r4, [sp, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fa0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000fa2:	4e31      	ldr	r6, [pc, #196]	; (8001068 <MX_GPIO_Init+0xdc>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_6, GPIO_PIN_RESET);
 8000fa4:	4d31      	ldr	r5, [pc, #196]	; (800106c <MX_GPIO_Init+0xe0>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fa6:	f042 0204 	orr.w	r2, r2, #4
 8000faa:	631a      	str	r2, [r3, #48]	; 0x30
 8000fac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fae:	f002 0204 	and.w	r2, r2, #4
 8000fb2:	9200      	str	r2, [sp, #0]
 8000fb4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fb6:	9401      	str	r4, [sp, #4]
 8000fb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000fbe:	631a      	str	r2, [r3, #48]	; 0x30
 8000fc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fc2:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8000fc6:	9201      	str	r2, [sp, #4]
 8000fc8:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fca:	9402      	str	r4, [sp, #8]
 8000fcc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fce:	f042 0201 	orr.w	r2, r2, #1
 8000fd2:	631a      	str	r2, [r3, #48]	; 0x30
 8000fd4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fd6:	f002 0201 	and.w	r2, r2, #1
 8000fda:	9202      	str	r2, [sp, #8]
 8000fdc:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fde:	9403      	str	r4, [sp, #12]
 8000fe0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fe2:	f042 0202 	orr.w	r2, r2, #2
 8000fe6:	631a      	str	r2, [r3, #48]	; 0x30
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fea:	f003 0302 	and.w	r3, r3, #2
 8000fee:	9303      	str	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000ff0:	4622      	mov	r2, r4
 8000ff2:	4630      	mov	r0, r6
 8000ff4:	f44f 7180 	mov.w	r1, #256	; 0x100
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ff8:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000ffa:	f001 f8b7 	bl	800216c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_6, GPIO_PIN_RESET);
 8000ffe:	4622      	mov	r2, r4
 8001000:	4628      	mov	r0, r5
 8001002:	2150      	movs	r1, #80	; 0x50
 8001004:	f001 f8b2 	bl	800216c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001008:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = B1_Pin;
 800100a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800100e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001012:	4817      	ldr	r0, [pc, #92]	; (8001070 <MX_GPIO_Init+0xe4>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001014:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = B1_Pin;
 8001016:	e9cd 2304 	strd	r2, r3, [sp, #16]

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800101a:	2700      	movs	r7, #0
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800101c:	f000 ff8e 	bl	8001f3c <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001020:	4630      	mov	r0, r6
 8001022:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001024:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001028:	2301      	movs	r3, #1
 800102a:	2600      	movs	r6, #0
 800102c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001030:	e9cd 6706 	strd	r6, r7, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001034:	f000 ff82 	bl	8001f3c <HAL_GPIO_Init>
  /*Configure GPIO pins : PB4 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001038:	a904      	add	r1, sp, #16
 800103a:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 800103c:	2250      	movs	r2, #80	; 0x50
 800103e:	2301      	movs	r3, #1
 8001040:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001044:	e9cd 6706 	strd	r6, r7, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001048:	f000 ff78 	bl	8001f3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800104c:	2220      	movs	r2, #32
 800104e:	2300      	movs	r3, #0
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001050:	a904      	add	r1, sp, #16
 8001052:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001054:	e9cd 2304 	strd	r2, r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001058:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800105a:	f000 ff6f 	bl	8001f3c <HAL_GPIO_Init>

}
 800105e:	b00b      	add	sp, #44	; 0x2c
 8001060:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001062:	bf00      	nop
 8001064:	40023800 	.word	0x40023800
 8001068:	40020000 	.word	0x40020000
 800106c:	40020400 	.word	0x40020400
 8001070:	40020800 	.word	0x40020800

08001074 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001074:	b510      	push	{r4, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001076:	480b      	ldr	r0, [pc, #44]	; (80010a4 <MX_I2C1_Init+0x30>)
 8001078:	4c0b      	ldr	r4, [pc, #44]	; (80010a8 <MX_I2C1_Init+0x34>)
  hi2c1.Init.ClockSpeed = 100000;
 800107a:	490c      	ldr	r1, [pc, #48]	; (80010ac <MX_I2C1_Init+0x38>)
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800107c:	2300      	movs	r3, #0
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800107e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hi2c1.Init.ClockSpeed = 100000;
 8001082:	e9c0 4100 	strd	r4, r1, [r0]
  hi2c1.Init.OwnAddress1 = 0;
 8001086:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800108a:	e9c0 2304 	strd	r2, r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800108e:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001092:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001094:	f001 fab8 	bl	8002608 <HAL_I2C_Init>
 8001098:	b900      	cbnz	r0, 800109c <MX_I2C1_Init+0x28>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800109a:	bd10      	pop	{r4, pc}
 800109c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 80010a0:	f000 bbce 	b.w	8001840 <Error_Handler>
 80010a4:	200001f8 	.word	0x200001f8
 80010a8:	40005400 	.word	0x40005400
 80010ac:	000186a0 	.word	0x000186a0

080010b0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80010b0:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(i2cHandle->Instance==I2C1)
 80010b2:	4b18      	ldr	r3, [pc, #96]	; (8001114 <HAL_I2C_MspInit+0x64>)
 80010b4:	6802      	ldr	r2, [r0, #0]
{
 80010b6:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b8:	2400      	movs	r4, #0
  if(i2cHandle->Instance==I2C1)
 80010ba:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010bc:	e9cd 4402 	strd	r4, r4, [sp, #8]
 80010c0:	e9cd 4404 	strd	r4, r4, [sp, #16]
 80010c4:	9406      	str	r4, [sp, #24]
  if(i2cHandle->Instance==I2C1)
 80010c6:	d001      	beq.n	80010cc <HAL_I2C_MspInit+0x1c>
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80010c8:	b009      	add	sp, #36	; 0x24
 80010ca:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010cc:	4d12      	ldr	r5, [pc, #72]	; (8001118 <HAL_I2C_MspInit+0x68>)
 80010ce:	9400      	str	r4, [sp, #0]
 80010d0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010d2:	4812      	ldr	r0, [pc, #72]	; (800111c <HAL_I2C_MspInit+0x6c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010d4:	f043 0302 	orr.w	r3, r3, #2
 80010d8:	632b      	str	r3, [r5, #48]	; 0x30
 80010da:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80010dc:	f003 0302 	and.w	r3, r3, #2
 80010e0:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80010e2:	f44f 7240 	mov.w	r2, #768	; 0x300
 80010e6:	2312      	movs	r3, #18
 80010e8:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ec:	2303      	movs	r3, #3
 80010ee:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010f0:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010f2:	2304      	movs	r3, #4
 80010f4:	9306      	str	r3, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010f6:	9a00      	ldr	r2, [sp, #0]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010f8:	f000 ff20 	bl	8001f3c <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010fc:	9401      	str	r4, [sp, #4]
 80010fe:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8001100:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001104:	642b      	str	r3, [r5, #64]	; 0x40
 8001106:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8001108:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800110c:	9301      	str	r3, [sp, #4]
 800110e:	9b01      	ldr	r3, [sp, #4]
}
 8001110:	b009      	add	sp, #36	; 0x24
 8001112:	bd30      	pop	{r4, r5, pc}
 8001114:	40005400 	.word	0x40005400
 8001118:	40023800 	.word	0x40023800
 800111c:	40020400 	.word	0x40020400

08001120 <_write>:
float data_out[3] = {0}; //send to raspberry pi: (psi1, psi2, temp1)
uint8_t act_channels[11] = {0}; //first element is unused so 1-10 correspond to labeled channels

uint8_t ok_to_go;

int _write(int fd, char* ptr, int len) {
 8001120:	b510      	push	{r4, lr}
  HAL_UART_Transmit(&huart2, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8001122:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
int _write(int fd, char* ptr, int len) {
 8001126:	4614      	mov	r4, r2
  HAL_UART_Transmit(&huart2, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8001128:	4802      	ldr	r0, [pc, #8]	; (8001134 <_write+0x14>)
 800112a:	b292      	uxth	r2, r2
 800112c:	f002 ff94 	bl	8004058 <HAL_UART_Transmit>
   return len;
}
 8001130:	4620      	mov	r0, r4
 8001132:	bd10      	pop	{r4, pc}
 8001134:	20000318 	.word	0x20000318

08001138 <write_single_reg>:
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 1); // CS high

  return (rx[0] << 8) | rx[1];
}

void write_single_reg(uint8_t address, uint16_t value) {
 8001138:	b510      	push	{r4, lr}
  uint16_t opcodes[] = { 0x6000 | (address << 7), value };
 800113a:	01c0      	lsls	r0, r0, #7
void write_single_reg(uint8_t address, uint16_t value) {
 800113c:	b082      	sub	sp, #8
 800113e:	460b      	mov	r3, r1
    spi_bytes[i * 3 + 0] = opcodes[i] >> 8;
 8001140:	f440 41c0 	orr.w	r1, r0, #24576	; 0x6000

  uint8_t tx[6] = {0};
 8001144:	2200      	movs	r2, #0
  opcodes_to_spi(opcodes, 2, tx);

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 0); // CS low
 8001146:	4c10      	ldr	r4, [pc, #64]	; (8001188 <write_single_reg+0x50>)
  uint8_t tx[6] = {0};
 8001148:	9200      	str	r2, [sp, #0]
    spi_bytes[i * 3 + 0] = opcodes[i] >> 8;
 800114a:	0a09      	lsrs	r1, r1, #8
 800114c:	f88d 1000 	strb.w	r1, [sp]
 8001150:	0a19      	lsrs	r1, r3, #8
    spi_bytes[i * 3 + 1] = opcodes[i];
 8001152:	f88d 0001 	strb.w	r0, [sp, #1]
    spi_bytes[i * 3 + 0] = opcodes[i] >> 8;
 8001156:	f88d 1003 	strb.w	r1, [sp, #3]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 0); // CS low
 800115a:	4620      	mov	r0, r4
 800115c:	2140      	movs	r1, #64	; 0x40
  uint8_t tx[6] = {0};
 800115e:	f8ad 2004 	strh.w	r2, [sp, #4]
    spi_bytes[i * 3 + 1] = opcodes[i];
 8001162:	f88d 3004 	strb.w	r3, [sp, #4]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 0); // CS low
 8001166:	f001 f801 	bl	800216c <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, tx, 6, HAL_MAX_DELAY); // send command
 800116a:	4669      	mov	r1, sp
 800116c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001170:	2206      	movs	r2, #6
 8001172:	4806      	ldr	r0, [pc, #24]	; (800118c <write_single_reg+0x54>)
 8001174:	f002 f9ca 	bl	800350c <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 1); // CS high
 8001178:	2201      	movs	r2, #1
 800117a:	2140      	movs	r1, #64	; 0x40
 800117c:	4620      	mov	r0, r4
 800117e:	f000 fff5 	bl	800216c <HAL_GPIO_WritePin>
}
 8001182:	b002      	add	sp, #8
 8001184:	bd10      	pop	{r4, pc}
 8001186:	bf00      	nop
 8001188:	40020400 	.word	0x40020400
 800118c:	20000274 	.word	0x20000274

08001190 <abort_valves>:
	}else{
		pca9534_set_channel(&hi2c1, PCA9534_OUTPUT_2, channel-9, !off);
	}
}

void abort_valves(){
 8001190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001192:	4e10      	ldr	r6, [pc, #64]	; (80011d4 <abort_valves+0x44>)
		pca9534_set_channel(&hi2c1, PCA9534_OUTPUT_1, channel-1, !off);
 8001194:	4f10      	ldr	r7, [pc, #64]	; (80011d8 <abort_valves+0x48>)
void abort_valves(){
 8001196:	2400      	movs	r4, #0
		pca9534_set_channel(&hi2c1, PCA9534_OUTPUT_1, channel-1, !off);
 8001198:	2301      	movs	r3, #1
 800119a:	b2e2      	uxtb	r2, r4
 800119c:	2120      	movs	r1, #32
	for(uint8_t i=1; i<=8; i++){
 800119e:	441c      	add	r4, r3
		pca9534_set_channel(&hi2c1, PCA9534_OUTPUT_1, channel-1, !off);
 80011a0:	4638      	mov	r0, r7
 80011a2:	f000 fb65 	bl	8001870 <pca9534_set_channel>
		actuate(i, 0);
		act_channels[i] = 0;
 80011a6:	2500      	movs	r5, #0
	for(uint8_t i=1; i<=8; i++){
 80011a8:	2c08      	cmp	r4, #8
		act_channels[i] = 0;
 80011aa:	f806 5b01 	strb.w	r5, [r6], #1
	for(uint8_t i=1; i<=8; i++){
 80011ae:	d1f3      	bne.n	8001198 <abort_valves+0x8>
	}
	actuate(9, 1);
	act_channels[9] = 1;
 80011b0:	2401      	movs	r4, #1
		pca9534_set_channel(&hi2c1, PCA9534_OUTPUT_2, channel-9, !off);
 80011b2:	4809      	ldr	r0, [pc, #36]	; (80011d8 <abort_valves+0x48>)
	act_channels[9] = 1;
 80011b4:	4e09      	ldr	r6, [pc, #36]	; (80011dc <abort_valves+0x4c>)
		pca9534_set_channel(&hi2c1, PCA9534_OUTPUT_2, channel-9, !off);
 80011b6:	462b      	mov	r3, r5
 80011b8:	462a      	mov	r2, r5
 80011ba:	2121      	movs	r1, #33	; 0x21
 80011bc:	f000 fb58 	bl	8001870 <pca9534_set_channel>
 80011c0:	4805      	ldr	r0, [pc, #20]	; (80011d8 <abort_valves+0x48>)
	act_channels[9] = 1;
 80011c2:	7274      	strb	r4, [r6, #9]
		pca9534_set_channel(&hi2c1, PCA9534_OUTPUT_2, channel-9, !off);
 80011c4:	462b      	mov	r3, r5
 80011c6:	4622      	mov	r2, r4
 80011c8:	2121      	movs	r1, #33	; 0x21
 80011ca:	f000 fb51 	bl	8001870 <pca9534_set_channel>
	actuate(10, 1);
	act_channels[10] = 1;
 80011ce:	72b4      	strb	r4, [r6, #10]
}
 80011d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80011d2:	bf00      	nop
 80011d4:	20000251 	.word	0x20000251
 80011d8:	200001f8 	.word	0x200001f8
 80011dc:	20000250 	.word	0x20000250

080011e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011e0:	b510      	push	{r4, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011e2:	2300      	movs	r3, #0
{
 80011e4:	b096      	sub	sp, #88	; 0x58
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011e6:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 80011ea:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011ee:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80011f2:	e9cd 3304 	strd	r3, r3, [sp, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011f6:	4928      	ldr	r1, [pc, #160]	; (8001298 <SystemClock_Config+0xb8>)
 80011f8:	9300      	str	r3, [sp, #0]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011fa:	9306      	str	r3, [sp, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011fc:	6c08      	ldr	r0, [r1, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011fe:	4a27      	ldr	r2, [pc, #156]	; (800129c <SystemClock_Config+0xbc>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001200:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 8001204:	6408      	str	r0, [r1, #64]	; 0x40
 8001206:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001208:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 800120c:	9100      	str	r1, [sp, #0]
 800120e:	9900      	ldr	r1, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001210:	9301      	str	r3, [sp, #4]
 8001212:	6811      	ldr	r1, [r2, #0]
 8001214:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 8001218:	6011      	str	r1, [r2, #0]
 800121a:	6812      	ldr	r2, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800121c:	ed9f 7b1a 	vldr	d7, [pc, #104]	; 8001288 <SystemClock_Config+0xa8>
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001220:	2302      	movs	r3, #2
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001222:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001226:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800122a:	9201      	str	r2, [sp, #4]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800122c:	e9cd 300e 	strd	r3, r0, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001230:	2108      	movs	r1, #8
  RCC_OscInitStruct.PLL.PLLN = 360;
 8001232:	f44f 72b4 	mov.w	r2, #360	; 0x168
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001236:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001238:	ed8d 7b08 	vstr	d7, [sp, #32]
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800123c:	e9cd 2311 	strd	r2, r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001240:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001244:	9c01      	ldr	r4, [sp, #4]
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001246:	9110      	str	r1, [sp, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001248:	f001 fe98 	bl	8002f7c <HAL_RCC_OscConfig>
 800124c:	b108      	cbz	r0, 8001252 <SystemClock_Config+0x72>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800124e:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001250:	e7fe      	b.n	8001250 <SystemClock_Config+0x70>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001252:	f001 fd43 	bl	8002cdc <HAL_PWREx_EnableOverDrive>
 8001256:	b108      	cbz	r0, 800125c <SystemClock_Config+0x7c>
 8001258:	b672      	cpsid	i
  while (1)
 800125a:	e7fe      	b.n	800125a <SystemClock_Config+0x7a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800125c:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8001290 <SystemClock_Config+0xb0>
 8001260:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001264:	2200      	movs	r2, #0
 8001266:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800126a:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800126c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001270:	2105      	movs	r1, #5
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001272:	ed8d 7b02 	vstr	d7, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001276:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001278:	f001 fd6c 	bl	8002d54 <HAL_RCC_ClockConfig>
 800127c:	b108      	cbz	r0, 8001282 <SystemClock_Config+0xa2>
 800127e:	b672      	cpsid	i
  while (1)
 8001280:	e7fe      	b.n	8001280 <SystemClock_Config+0xa0>
}
 8001282:	b016      	add	sp, #88	; 0x58
 8001284:	bd10      	pop	{r4, pc}
 8001286:	bf00      	nop
 8001288:	00000001 	.word	0x00000001
 800128c:	00010000 	.word	0x00010000
 8001290:	0000000f 	.word	0x0000000f
 8001294:	00000002 	.word	0x00000002
 8001298:	40023800 	.word	0x40023800
 800129c:	40007000 	.word	0x40007000

080012a0 <main>:
{
 80012a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80012a4:	ed2d 8b02 	vpush	{d8}
 80012a8:	b093      	sub	sp, #76	; 0x4c
  HAL_Init();
 80012aa:	f000 fd37 	bl	8001d1c <HAL_Init>
  SystemClock_Config();
 80012ae:	f7ff ff97 	bl	80011e0 <SystemClock_Config>
  MX_GPIO_Init();
 80012b2:	f7ff fe6b 	bl	8000f8c <MX_GPIO_Init>
  MX_I2C1_Init();
 80012b6:	f7ff fedd 	bl	8001074 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80012ba:	f000 fc87 	bl	8001bcc <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80012be:	f000 fb09 	bl	80018d4 <MX_SPI1_Init>
  MX_TIM1_Init();
 80012c2:	f000 fc0f 	bl	8001ae4 <MX_TIM1_Init>
  setvbuf(stdout, NULL, _IONBF, 0);
 80012c6:	4acc      	ldr	r2, [pc, #816]	; (80015f8 <main+0x358>)
		pca9534_set_channel(&hi2c1, PCA9534_OUTPUT_2, channel-9, !off);
 80012c8:	4ecc      	ldr	r6, [pc, #816]	; (80015fc <main+0x35c>)
  setvbuf(stdout, NULL, _IONBF, 0);
 80012ca:	6810      	ldr	r0, [r2, #0]
 80012cc:	2300      	movs	r3, #0
 80012ce:	4619      	mov	r1, r3
 80012d0:	2202      	movs	r2, #2
 80012d2:	6880      	ldr	r0, [r0, #8]
 80012d4:	f003 fec0 	bl	8005058 <setvbuf>
  HAL_TIM_Base_Start_IT(&htim1);
 80012d8:	48c9      	ldr	r0, [pc, #804]	; (8001600 <main+0x360>)
 80012da:	f002 fc41 	bl	8003b60 <HAL_TIM_Base_Start_IT>
  pca9534_init_output(&hi2c1, PCA9534_OUTPUT_1);
 80012de:	48c7      	ldr	r0, [pc, #796]	; (80015fc <main+0x35c>)
 80012e0:	2120      	movs	r1, #32
 80012e2:	f000 faaf 	bl	8001844 <pca9534_init_output>
  pca9534_init_output(&hi2c1, PCA9534_OUTPUT_2);
 80012e6:	48c5      	ldr	r0, [pc, #788]	; (80015fc <main+0x35c>)
 80012e8:	2121      	movs	r1, #33	; 0x21
 80012ea:	f000 faab 	bl	8001844 <pca9534_init_output>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 80012ee:	48c5      	ldr	r0, [pc, #788]	; (8001604 <main+0x364>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012f6:	f000 ff39 	bl	800216c <HAL_GPIO_WritePin>
 80012fa:	2402      	movs	r4, #2
 80012fc:	e004      	b.n	8001308 <main+0x68>
		pca9534_set_channel(&hi2c1, PCA9534_OUTPUT_1, channel-1, !off);
 80012fe:	b2fa      	uxtb	r2, r7
 8001300:	2120      	movs	r1, #32
 8001302:	f000 fab5 	bl	8001870 <pca9534_set_channel>
   for (uint32_t i = 1; i <= 16; i++){
 8001306:	3401      	adds	r4, #1
	if(channel <= 8){
 8001308:	1e65      	subs	r5, r4, #1
		pca9534_set_channel(&hi2c1, PCA9534_OUTPUT_2, channel-9, !off);
 800130a:	f1a4 020a 	sub.w	r2, r4, #10
	if(channel <= 8){
 800130e:	2d08      	cmp	r5, #8
		pca9534_set_channel(&hi2c1, PCA9534_OUTPUT_1, channel-1, !off);
 8001310:	f1a4 0702 	sub.w	r7, r4, #2
		pca9534_set_channel(&hi2c1, PCA9534_OUTPUT_2, channel-9, !off);
 8001314:	f04f 0301 	mov.w	r3, #1
 8001318:	b2d2      	uxtb	r2, r2
 800131a:	f04f 0121 	mov.w	r1, #33	; 0x21
 800131e:	4630      	mov	r0, r6
	if(channel <= 8){
 8001320:	d9ed      	bls.n	80012fe <main+0x5e>
		pca9534_set_channel(&hi2c1, PCA9534_OUTPUT_2, channel-9, !off);
 8001322:	f000 faa5 	bl	8001870 <pca9534_set_channel>
   for (uint32_t i = 1; i <= 16; i++){
 8001326:	2c11      	cmp	r4, #17
 8001328:	d1ed      	bne.n	8001306 <main+0x66>
   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);
 800132a:	2201      	movs	r2, #1
 800132c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001330:	48b4      	ldr	r0, [pc, #720]	; (8001604 <main+0x364>)
 8001332:	f8df 9324 	ldr.w	r9, [pc, #804]	; 8001658 <main+0x3b8>
 8001336:	f8df a324 	ldr.w	sl, [pc, #804]	; 800165c <main+0x3bc>
 800133a:	f000 ff17 	bl	800216c <HAL_GPIO_WritePin>
  HAL_Delay(50);
 800133e:	2032      	movs	r0, #50	; 0x32
 8001340:	f000 fd18 	bl	8001d74 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1); // deassert RESET
 8001344:	48b0      	ldr	r0, [pc, #704]	; (8001608 <main+0x368>)
 8001346:	2201      	movs	r2, #1
 8001348:	2110      	movs	r1, #16
 800134a:	f000 ff0f 	bl	800216c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 1); // deassert CS
 800134e:	48ae      	ldr	r0, [pc, #696]	; (8001608 <main+0x368>)
 8001350:	2201      	movs	r2, #1
 8001352:	2140      	movs	r1, #64	; 0x40
 8001354:	f000 ff0a 	bl	800216c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0); // strobe RESET
 8001358:	48ab      	ldr	r0, [pc, #684]	; (8001608 <main+0x368>)
 800135a:	2200      	movs	r2, #0
 800135c:	2110      	movs	r1, #16
 800135e:	f000 ff05 	bl	800216c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1); // strobe RESET
 8001362:	2201      	movs	r2, #1
 8001364:	2110      	movs	r1, #16
 8001366:	48a8      	ldr	r0, [pc, #672]	; (8001608 <main+0x368>)
 8001368:	f000 ff00 	bl	800216c <HAL_GPIO_WritePin>
  HAL_Delay(100);
 800136c:	2064      	movs	r0, #100	; 0x64
 800136e:	f000 fd01 	bl	8001d74 <HAL_Delay>
  write_single_reg(0x04, 0x0400);
 8001372:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001376:	2004      	movs	r0, #4
 8001378:	f7ff fede 	bl	8001138 <write_single_reg>
  HAL_UART_Receive_IT(&huart2, UART2_rxBuffer, 1);
 800137c:	49a3      	ldr	r1, [pc, #652]	; (800160c <main+0x36c>)
 800137e:	48a4      	ldr	r0, [pc, #656]	; (8001610 <main+0x370>)
 8001380:	2201      	movs	r2, #1
 8001382:	f002 ff17 	bl	80041b4 <HAL_UART_Receive_IT>
printf("-------------------------------------------------------------------- \r\n");
 8001386:	48a3      	ldr	r0, [pc, #652]	; (8001614 <main+0x374>)
 8001388:	f003 fe5e 	bl	8005048 <puts>
printf("  ms         psi1        psi2       TC1 mV    | 1 2 3 4 5 6 7 8 9 10 \r\n");
 800138c:	48a2      	ldr	r0, [pc, #648]	; (8001618 <main+0x378>)
 800138e:	f003 fe5b 	bl	8005048 <puts>
	ok_to_go = 1;
 8001392:	4ba2      	ldr	r3, [pc, #648]	; (800161c <main+0x37c>)
    uint8_t drdy = !HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5); // read DRDY
 8001394:	489c      	ldr	r0, [pc, #624]	; (8001608 <main+0x368>)
	ok_to_go = 1;
 8001396:	2201      	movs	r2, #1
 8001398:	701a      	strb	r2, [r3, #0]
 800139a:	4ba1      	ldr	r3, [pc, #644]	; (8001620 <main+0x380>)
 800139c:	f103 080c 	add.w	r8, r3, #12
 80013a0:	4ba0      	ldr	r3, [pc, #640]	; (8001624 <main+0x384>)
    uint8_t drdy = !HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5); // read DRDY
 80013a2:	2120      	movs	r1, #32
 80013a4:	f103 050a 	add.w	r5, r3, #10
 80013a8:	f000 feda 	bl	8002160 <HAL_GPIO_ReadPin>
	float volt = ((adc_count-1) / 8388608.0) * 1.2 / (float)(gain);
 80013ac:	2600      	movs	r6, #0
 80013ae:	f04f 577a 	mov.w	r7, #1048576000	; 0x3e800000
	if (drdy) {
 80013b2:	4604      	mov	r4, r0
 80013b4:	2800      	cmp	r0, #0
 80013b6:	d071      	beq.n	800149c <main+0x1fc>
	if(keypress){
 80013b8:	f899 3000 	ldrb.w	r3, [r9]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d043      	beq.n	8001448 <main+0x1a8>
		char key = UART2_rxBuffer[0];
 80013c0:	4b92      	ldr	r3, [pc, #584]	; (800160c <main+0x36c>)
 80013c2:	781b      	ldrb	r3, [r3, #0]
			 if(key == '1') {act_channels[1] = 1; actuate(1, 1);}
 80013c4:	2b31      	cmp	r3, #49	; 0x31
 80013c6:	f000 814f 	beq.w	8001668 <main+0x3c8>
		else if(key == '2') {act_channels[2] = 1; actuate(2, 1);}
 80013ca:	2b32      	cmp	r3, #50	; 0x32
 80013cc:	f000 8156 	beq.w	800167c <main+0x3dc>
		else if(key == '3') {act_channels[3] = 1; actuate(3, 1);}
 80013d0:	2b33      	cmp	r3, #51	; 0x33
 80013d2:	f000 815c 	beq.w	800168e <main+0x3ee>
		else if(key == '4') {act_channels[4] = 1; actuate(4, 1);}
 80013d6:	2b34      	cmp	r3, #52	; 0x34
 80013d8:	f000 8163 	beq.w	80016a2 <main+0x402>
		else if(key == '5') {act_channels[5] = 1; actuate(5, 1);}
 80013dc:	2b35      	cmp	r3, #53	; 0x35
 80013de:	f000 816a 	beq.w	80016b6 <main+0x416>
		else if(key == '6') {act_channels[6] = 1; actuate(6, 1);}
 80013e2:	2b36      	cmp	r3, #54	; 0x36
 80013e4:	f000 8171 	beq.w	80016ca <main+0x42a>
		else if(key == '7') {act_channels[7] = 1; actuate(7, 1);}
 80013e8:	2b37      	cmp	r3, #55	; 0x37
 80013ea:	f000 8178 	beq.w	80016de <main+0x43e>
		else if(key == '8') {act_channels[8] = 1; actuate(8, 1);}
 80013ee:	2b38      	cmp	r3, #56	; 0x38
 80013f0:	f000 817f 	beq.w	80016f2 <main+0x452>
		else if(key == '9') {act_channels[9] = 1; actuate(9, 1);}
 80013f4:	2b39      	cmp	r3, #57	; 0x39
 80013f6:	f000 8186 	beq.w	8001706 <main+0x466>
		else if(key == '0') {act_channels[10] = 1; actuate(10, 1);}
 80013fa:	2b30      	cmp	r3, #48	; 0x30
 80013fc:	f000 818d 	beq.w	800171a <main+0x47a>
		else if(key == 'q') {act_channels[1] = 0; actuate(1, 0);}
 8001400:	2b71      	cmp	r3, #113	; 0x71
 8001402:	f000 8193 	beq.w	800172c <main+0x48c>
		else if(key == 'w') {act_channels[2] = 0; actuate(2, 0);}
 8001406:	2b77      	cmp	r3, #119	; 0x77
 8001408:	f000 8199 	beq.w	800173e <main+0x49e>
		else if(key == 'e') {act_channels[3] = 0; actuate(3, 0);}
 800140c:	2b65      	cmp	r3, #101	; 0x65
 800140e:	f000 81a0 	beq.w	8001752 <main+0x4b2>
		else if(key == 'r') {act_channels[4] = 0; actuate(4, 0);}
 8001412:	2b72      	cmp	r3, #114	; 0x72
 8001414:	f000 81a7 	beq.w	8001766 <main+0x4c6>
		else if(key == 't') {act_channels[5] = 0; actuate(5, 0);}
 8001418:	2b74      	cmp	r3, #116	; 0x74
 800141a:	f000 81ae 	beq.w	800177a <main+0x4da>
		else if(key == 'y') {act_channels[6] = 0; actuate(6, 0);}
 800141e:	2b79      	cmp	r3, #121	; 0x79
 8001420:	f000 81b5 	beq.w	800178e <main+0x4ee>
		else if(key == 'u') {act_channels[7] = 0; actuate(7, 0);}
 8001424:	2b75      	cmp	r3, #117	; 0x75
 8001426:	f000 81c6 	beq.w	80017b6 <main+0x516>
		else if(key == 'i') {act_channels[8] = 0; actuate(8, 0);}
 800142a:	2b69      	cmp	r3, #105	; 0x69
 800142c:	f000 81b9 	beq.w	80017a2 <main+0x502>
		else if(key == 'o') {act_channels[9] = 0; actuate(9, 0);}
 8001430:	2b6f      	cmp	r3, #111	; 0x6f
 8001432:	f000 81cd 	beq.w	80017d0 <main+0x530>
		else if(key == 'p') {act_channels[10] = 0; actuate(10, 0);}
 8001436:	2b70      	cmp	r3, #112	; 0x70
 8001438:	f000 81d3 	beq.w	80017e2 <main+0x542>
		else if(key == 127) {abort_valves();}
 800143c:	2b7f      	cmp	r3, #127	; 0x7f
 800143e:	f000 81c4 	beq.w	80017ca <main+0x52a>
		keypress = 0;
 8001442:	2300      	movs	r3, #0
 8001444:	f889 3000 	strb.w	r3, [r9]
	printf("%ld,   ", millis);
 8001448:	f8da 1000 	ldr.w	r1, [sl]
 800144c:	4876      	ldr	r0, [pc, #472]	; (8001628 <main+0x388>)
 800144e:	4c74      	ldr	r4, [pc, #464]	; (8001620 <main+0x380>)
		printf("%f, ", data_out[i]);
 8001450:	f8df b20c 	ldr.w	fp, [pc, #524]	; 8001660 <main+0x3c0>
	printf("%ld,   ", millis);
 8001454:	f003 fd72 	bl	8004f3c <iprintf>
		printf("%f, ", data_out[i]);
 8001458:	f854 0b04 	ldr.w	r0, [r4], #4
 800145c:	f7ff f894 	bl	8000588 <__aeabi_f2d>
 8001460:	4602      	mov	r2, r0
 8001462:	460b      	mov	r3, r1
 8001464:	4658      	mov	r0, fp
 8001466:	f003 fd69 	bl	8004f3c <iprintf>
	for(uint8_t i = 0; i < 3; i++){
 800146a:	45a0      	cmp	r8, r4
 800146c:	d1f4      	bne.n	8001458 <main+0x1b8>
	printf("  ");
 800146e:	486f      	ldr	r0, [pc, #444]	; (800162c <main+0x38c>)
 8001470:	4c6c      	ldr	r4, [pc, #432]	; (8001624 <main+0x384>)
		printf("%d ", act_channels[i]);
 8001472:	f8df b1f0 	ldr.w	fp, [pc, #496]	; 8001664 <main+0x3c4>
	printf("  ");
 8001476:	f003 fd61 	bl	8004f3c <iprintf>
		printf("%d ", act_channels[i]);
 800147a:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 800147e:	4658      	mov	r0, fp
 8001480:	f003 fd5c 	bl	8004f3c <iprintf>
	for(uint8_t i = 1; i <= 10; i++){
 8001484:	42a5      	cmp	r5, r4
 8001486:	d1f8      	bne.n	800147a <main+0x1da>
	printf("\r\n");
 8001488:	4869      	ldr	r0, [pc, #420]	; (8001630 <main+0x390>)
 800148a:	f003 fddd 	bl	8005048 <puts>
    uint8_t drdy = !HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5); // read DRDY
 800148e:	485e      	ldr	r0, [pc, #376]	; (8001608 <main+0x368>)
 8001490:	2120      	movs	r1, #32
 8001492:	f000 fe65 	bl	8002160 <HAL_GPIO_ReadPin>
	if (drdy) {
 8001496:	4604      	mov	r4, r0
 8001498:	2800      	cmp	r0, #0
 800149a:	d18d      	bne.n	80013b8 <main+0x118>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 0);
 800149c:	4622      	mov	r2, r4
 800149e:	485a      	ldr	r0, [pc, #360]	; (8001608 <main+0x368>)
	float mA = adc_to_volt(adc_count, 1) * 1000 / 55.5;
 80014a0:	eddf 8a64 	vldr	s17, [pc, #400]	; 8001634 <main+0x394>
	float psi = 62.5 * mA + -250;
 80014a4:	ed9f 8a64 	vldr	s16, [pc, #400]	; 8001638 <main+0x398>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 0);
 80014a8:	2140      	movs	r1, #64	; 0x40
 80014aa:	f000 fe5f 	bl	800216c <HAL_GPIO_WritePin>
		HAL_SPI_TransmitReceive(&hspi1, tx_data, rx_data, 27, HAL_MAX_DELAY);
 80014ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80014b2:	9300      	str	r3, [sp, #0]
 80014b4:	aa0a      	add	r2, sp, #40	; 0x28
 80014b6:	231b      	movs	r3, #27
 80014b8:	a902      	add	r1, sp, #8
 80014ba:	4860      	ldr	r0, [pc, #384]	; (800163c <main+0x39c>)
		uint8_t tx_data[32] = {0};
 80014bc:	e9cd 4402 	strd	r4, r4, [sp, #8]
 80014c0:	e9cd 4404 	strd	r4, r4, [sp, #16]
 80014c4:	e9cd 4406 	strd	r4, r4, [sp, #24]
 80014c8:	e9cd 4408 	strd	r4, r4, [sp, #32]
		HAL_SPI_TransmitReceive(&hspi1, tx_data, rx_data, 27, HAL_MAX_DELAY);
 80014cc:	f002 f970 	bl	80037b0 <HAL_SPI_TransmitReceive>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 1);
 80014d0:	484d      	ldr	r0, [pc, #308]	; (8001608 <main+0x368>)
 80014d2:	2201      	movs	r2, #1
 80014d4:	2140      	movs	r1, #64	; 0x40
 80014d6:	f000 fe49 	bl	800216c <HAL_GPIO_WritePin>
		  channels[i] = (rx_data[i * 3 + 3] << 24) | (rx_data[i * 3 + 4] << 16) | (rx_data[i * 3 + 5] << 8);
 80014da:	f89d 002c 	ldrb.w	r0, [sp, #44]	; 0x2c
 80014de:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 80014e2:	f89d 102d 	ldrb.w	r1, [sp, #45]	; 0x2d
 80014e6:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
 80014ea:	f89d 4032 	ldrb.w	r4, [sp, #50]	; 0x32
 80014ee:	0400      	lsls	r0, r0, #16
 80014f0:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80014f4:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 80014f8:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 80014fc:	061b      	lsls	r3, r3, #24
 80014fe:	f89d 102f 	ldrb.w	r1, [sp, #47]	; 0x2f
 8001502:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8001506:	0612      	lsls	r2, r2, #24
 8001508:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800150c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001510:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
		  channels[i] >>= 8;
 8001514:	1200      	asrs	r0, r0, #8
		  channels[i] = (rx_data[i * 3 + 3] << 24) | (rx_data[i * 3 + 4] << 16) | (rx_data[i * 3 + 5] << 8);
 8001516:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
	float volt = ((adc_count-1) / 8388608.0) * 1.2 / (float)(gain);
 800151a:	3801      	subs	r0, #1
		  channels[i] >>= 8;
 800151c:	ea4f 2b22 	mov.w	fp, r2, asr #8
		  channels[i] = (rx_data[i * 3 + 3] << 24) | (rx_data[i * 3 + 4] << 16) | (rx_data[i * 3 + 5] << 8);
 8001520:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
	float volt = ((adc_count-1) / 8388608.0) * 1.2 / (float)(gain);
 8001524:	f7ff f81e 	bl	8000564 <__aeabi_i2d>
 8001528:	4632      	mov	r2, r6
 800152a:	463b      	mov	r3, r7
 800152c:	f7ff f884 	bl	8000638 <__aeabi_dmul>
 8001530:	4b43      	ldr	r3, [pc, #268]	; (8001640 <main+0x3a0>)
 8001532:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8001536:	f7ff f87f 	bl	8000638 <__aeabi_dmul>
 800153a:	f7ff fb55 	bl	8000be8 <__aeabi_d2f>
	float mA = adc_to_volt(adc_count, 1) * 1000 / 55.5;
 800153e:	ee07 0a90 	vmov	s15, r0
 8001542:	ee67 7aa8 	vmul.f32	s15, s15, s17
		  channels[i] >>= 8;
 8001546:	1224      	asrs	r4, r4, #8
	float psi = 62.5 * mA + -250;
 8001548:	eec7 7a88 	vdiv.f32	s15, s15, s16
 800154c:	ee17 0a90 	vmov	r0, s15
 8001550:	f7ff f81a 	bl	8000588 <__aeabi_f2d>
 8001554:	4b3b      	ldr	r3, [pc, #236]	; (8001644 <main+0x3a4>)
 8001556:	2200      	movs	r2, #0
 8001558:	f7ff f86e 	bl	8000638 <__aeabi_dmul>
 800155c:	2200      	movs	r2, #0
 800155e:	4b3a      	ldr	r3, [pc, #232]	; (8001648 <main+0x3a8>)
 8001560:	f7fe feb2 	bl	80002c8 <__aeabi_dsub>
 8001564:	f7ff fb40 	bl	8000be8 <__aeabi_d2f>
 8001568:	4b2d      	ldr	r3, [pc, #180]	; (8001620 <main+0x380>)
 800156a:	6018      	str	r0, [r3, #0]
	float volt = ((adc_count-1) / 8388608.0) * 1.2 / (float)(gain);
 800156c:	f10b 30ff 	add.w	r0, fp, #4294967295	; 0xffffffff
 8001570:	f7fe fff8 	bl	8000564 <__aeabi_i2d>
 8001574:	4632      	mov	r2, r6
 8001576:	463b      	mov	r3, r7
 8001578:	f7ff f85e 	bl	8000638 <__aeabi_dmul>
 800157c:	4b30      	ldr	r3, [pc, #192]	; (8001640 <main+0x3a0>)
 800157e:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8001582:	f7ff f859 	bl	8000638 <__aeabi_dmul>
 8001586:	f7ff fb2f 	bl	8000be8 <__aeabi_d2f>
	float mA = adc_to_volt(adc_count, 1) * 1000 / 55.5;
 800158a:	ee07 0a90 	vmov	s15, r0
 800158e:	ee67 7aa8 	vmul.f32	s15, s15, s17
	float psi = 62.5 * mA + -250;
 8001592:	eec7 7a88 	vdiv.f32	s15, s15, s16
 8001596:	ee17 0a90 	vmov	r0, s15
 800159a:	f7fe fff5 	bl	8000588 <__aeabi_f2d>
 800159e:	4b29      	ldr	r3, [pc, #164]	; (8001644 <main+0x3a4>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	f7ff f849 	bl	8000638 <__aeabi_dmul>
 80015a6:	2200      	movs	r2, #0
 80015a8:	4b27      	ldr	r3, [pc, #156]	; (8001648 <main+0x3a8>)
 80015aa:	f7fe fe8d 	bl	80002c8 <__aeabi_dsub>
 80015ae:	f7ff fb1b 	bl	8000be8 <__aeabi_d2f>
 80015b2:	4b1b      	ldr	r3, [pc, #108]	; (8001620 <main+0x380>)
 80015b4:	6058      	str	r0, [r3, #4]
	float volt = ((adc_count-1) / 8388608.0) * 1.2 / (float)(gain);
 80015b6:	1e60      	subs	r0, r4, #1
 80015b8:	f7fe ffd4 	bl	8000564 <__aeabi_i2d>
 80015bc:	4632      	mov	r2, r6
 80015be:	463b      	mov	r3, r7
 80015c0:	f7ff f83a 	bl	8000638 <__aeabi_dmul>
 80015c4:	4b1e      	ldr	r3, [pc, #120]	; (8001640 <main+0x3a0>)
 80015c6:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 80015ca:	f7ff f835 	bl	8000638 <__aeabi_dmul>
 80015ce:	4b1f      	ldr	r3, [pc, #124]	; (800164c <main+0x3ac>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	f7ff f831 	bl	8000638 <__aeabi_dmul>
 80015d6:	f7ff fb07 	bl	8000be8 <__aeabi_d2f>
		  data_out[2] = adc_to_volt(channels[2], 16) * 1000.0 - 0.5;
 80015da:	f7fe ffd5 	bl	8000588 <__aeabi_f2d>
 80015de:	4b1c      	ldr	r3, [pc, #112]	; (8001650 <main+0x3b0>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	f7ff f829 	bl	8000638 <__aeabi_dmul>
 80015e6:	4b1b      	ldr	r3, [pc, #108]	; (8001654 <main+0x3b4>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	f7fe fe6d 	bl	80002c8 <__aeabi_dsub>
 80015ee:	f7ff fafb 	bl	8000be8 <__aeabi_d2f>
 80015f2:	4b0b      	ldr	r3, [pc, #44]	; (8001620 <main+0x380>)
 80015f4:	6098      	str	r0, [r3, #8]
 80015f6:	e6df      	b.n	80013b8 <main+0x118>
 80015f8:	2000000c 	.word	0x2000000c
 80015fc:	200001f8 	.word	0x200001f8
 8001600:	200002d0 	.word	0x200002d0
 8001604:	40020000 	.word	0x40020000
 8001608:	40020400 	.word	0x40020400
 800160c:	2000024c 	.word	0x2000024c
 8001610:	20000318 	.word	0x20000318
 8001614:	08007358 	.word	0x08007358
 8001618:	080073a0 	.word	0x080073a0
 800161c:	20000270 	.word	0x20000270
 8001620:	2000025c 	.word	0x2000025c
 8001624:	20000250 	.word	0x20000250
 8001628:	080073e8 	.word	0x080073e8
 800162c:	080073f8 	.word	0x080073f8
 8001630:	08007400 	.word	0x08007400
 8001634:	447a0000 	.word	0x447a0000
 8001638:	425e0000 	.word	0x425e0000
 800163c:	20000274 	.word	0x20000274
 8001640:	3ff33333 	.word	0x3ff33333
 8001644:	404f4000 	.word	0x404f4000
 8001648:	406f4000 	.word	0x406f4000
 800164c:	3fb00000 	.word	0x3fb00000
 8001650:	408f4000 	.word	0x408f4000
 8001654:	3fe00000 	.word	0x3fe00000
 8001658:	20000268 	.word	0x20000268
 800165c:	2000026c 	.word	0x2000026c
 8001660:	080073f0 	.word	0x080073f0
 8001664:	080073fc 	.word	0x080073fc
			 if(key == '1') {act_channels[1] = 1; actuate(1, 1);}
 8001668:	4963      	ldr	r1, [pc, #396]	; (80017f8 <main+0x558>)
		pca9534_set_channel(&hi2c1, PCA9534_OUTPUT_1, channel-1, !off);
 800166a:	4864      	ldr	r0, [pc, #400]	; (80017fc <main+0x55c>)
 800166c:	2300      	movs	r3, #0
			 if(key == '1') {act_channels[1] = 1; actuate(1, 1);}
 800166e:	2201      	movs	r2, #1
 8001670:	704a      	strb	r2, [r1, #1]
		pca9534_set_channel(&hi2c1, PCA9534_OUTPUT_1, channel-1, !off);
 8001672:	461a      	mov	r2, r3
 8001674:	2120      	movs	r1, #32
 8001676:	f000 f8fb 	bl	8001870 <pca9534_set_channel>
 800167a:	e6e2      	b.n	8001442 <main+0x1a2>
		else if(key == '2') {act_channels[2] = 1; actuate(2, 1);}
 800167c:	4b5e      	ldr	r3, [pc, #376]	; (80017f8 <main+0x558>)
		pca9534_set_channel(&hi2c1, PCA9534_OUTPUT_1, channel-1, !off);
 800167e:	485f      	ldr	r0, [pc, #380]	; (80017fc <main+0x55c>)
		else if(key == '2') {act_channels[2] = 1; actuate(2, 1);}
 8001680:	2201      	movs	r2, #1
 8001682:	709a      	strb	r2, [r3, #2]
		pca9534_set_channel(&hi2c1, PCA9534_OUTPUT_1, channel-1, !off);
 8001684:	2120      	movs	r1, #32
 8001686:	2300      	movs	r3, #0
 8001688:	f000 f8f2 	bl	8001870 <pca9534_set_channel>
 800168c:	e6d9      	b.n	8001442 <main+0x1a2>
		else if(key == '3') {act_channels[3] = 1; actuate(3, 1);}
 800168e:	4a5a      	ldr	r2, [pc, #360]	; (80017f8 <main+0x558>)
		pca9534_set_channel(&hi2c1, PCA9534_OUTPUT_1, channel-1, !off);
 8001690:	485a      	ldr	r0, [pc, #360]	; (80017fc <main+0x55c>)
		else if(key == '3') {act_channels[3] = 1; actuate(3, 1);}
 8001692:	2301      	movs	r3, #1
 8001694:	70d3      	strb	r3, [r2, #3]
		pca9534_set_channel(&hi2c1, PCA9534_OUTPUT_1, channel-1, !off);
 8001696:	2120      	movs	r1, #32
 8001698:	2300      	movs	r3, #0
 800169a:	2202      	movs	r2, #2
 800169c:	f000 f8e8 	bl	8001870 <pca9534_set_channel>
 80016a0:	e6cf      	b.n	8001442 <main+0x1a2>
		else if(key == '4') {act_channels[4] = 1; actuate(4, 1);}
 80016a2:	4a55      	ldr	r2, [pc, #340]	; (80017f8 <main+0x558>)
		pca9534_set_channel(&hi2c1, PCA9534_OUTPUT_1, channel-1, !off);
 80016a4:	4855      	ldr	r0, [pc, #340]	; (80017fc <main+0x55c>)
		else if(key == '4') {act_channels[4] = 1; actuate(4, 1);}
 80016a6:	2301      	movs	r3, #1
 80016a8:	7113      	strb	r3, [r2, #4]
		pca9534_set_channel(&hi2c1, PCA9534_OUTPUT_1, channel-1, !off);
 80016aa:	2120      	movs	r1, #32
 80016ac:	2300      	movs	r3, #0
 80016ae:	2203      	movs	r2, #3
 80016b0:	f000 f8de 	bl	8001870 <pca9534_set_channel>
 80016b4:	e6c5      	b.n	8001442 <main+0x1a2>
		else if(key == '5') {act_channels[5] = 1; actuate(5, 1);}
 80016b6:	4a50      	ldr	r2, [pc, #320]	; (80017f8 <main+0x558>)
		pca9534_set_channel(&hi2c1, PCA9534_OUTPUT_1, channel-1, !off);
 80016b8:	4850      	ldr	r0, [pc, #320]	; (80017fc <main+0x55c>)
		else if(key == '5') {act_channels[5] = 1; actuate(5, 1);}
 80016ba:	2301      	movs	r3, #1
 80016bc:	7153      	strb	r3, [r2, #5]
		pca9534_set_channel(&hi2c1, PCA9534_OUTPUT_1, channel-1, !off);
 80016be:	2120      	movs	r1, #32
 80016c0:	2300      	movs	r3, #0
 80016c2:	2204      	movs	r2, #4
 80016c4:	f000 f8d4 	bl	8001870 <pca9534_set_channel>
 80016c8:	e6bb      	b.n	8001442 <main+0x1a2>
		else if(key == '6') {act_channels[6] = 1; actuate(6, 1);}
 80016ca:	4a4b      	ldr	r2, [pc, #300]	; (80017f8 <main+0x558>)
		pca9534_set_channel(&hi2c1, PCA9534_OUTPUT_1, channel-1, !off);
 80016cc:	484b      	ldr	r0, [pc, #300]	; (80017fc <main+0x55c>)
		else if(key == '6') {act_channels[6] = 1; actuate(6, 1);}
 80016ce:	2301      	movs	r3, #1
 80016d0:	7193      	strb	r3, [r2, #6]
		pca9534_set_channel(&hi2c1, PCA9534_OUTPUT_1, channel-1, !off);
 80016d2:	2120      	movs	r1, #32
 80016d4:	2300      	movs	r3, #0
 80016d6:	2205      	movs	r2, #5
 80016d8:	f000 f8ca 	bl	8001870 <pca9534_set_channel>
 80016dc:	e6b1      	b.n	8001442 <main+0x1a2>
		else if(key == '7') {act_channels[7] = 1; actuate(7, 1);}
 80016de:	4a46      	ldr	r2, [pc, #280]	; (80017f8 <main+0x558>)
		pca9534_set_channel(&hi2c1, PCA9534_OUTPUT_1, channel-1, !off);
 80016e0:	4846      	ldr	r0, [pc, #280]	; (80017fc <main+0x55c>)
		else if(key == '7') {act_channels[7] = 1; actuate(7, 1);}
 80016e2:	2301      	movs	r3, #1
 80016e4:	71d3      	strb	r3, [r2, #7]
		pca9534_set_channel(&hi2c1, PCA9534_OUTPUT_1, channel-1, !off);
 80016e6:	2120      	movs	r1, #32
 80016e8:	2300      	movs	r3, #0
 80016ea:	2206      	movs	r2, #6
 80016ec:	f000 f8c0 	bl	8001870 <pca9534_set_channel>
 80016f0:	e6a7      	b.n	8001442 <main+0x1a2>
		else if(key == '8') {act_channels[8] = 1; actuate(8, 1);}
 80016f2:	4a41      	ldr	r2, [pc, #260]	; (80017f8 <main+0x558>)
		pca9534_set_channel(&hi2c1, PCA9534_OUTPUT_1, channel-1, !off);
 80016f4:	4841      	ldr	r0, [pc, #260]	; (80017fc <main+0x55c>)
		else if(key == '8') {act_channels[8] = 1; actuate(8, 1);}
 80016f6:	2301      	movs	r3, #1
 80016f8:	7213      	strb	r3, [r2, #8]
		pca9534_set_channel(&hi2c1, PCA9534_OUTPUT_1, channel-1, !off);
 80016fa:	2120      	movs	r1, #32
 80016fc:	2300      	movs	r3, #0
 80016fe:	2207      	movs	r2, #7
 8001700:	f000 f8b6 	bl	8001870 <pca9534_set_channel>
 8001704:	e69d      	b.n	8001442 <main+0x1a2>
		else if(key == '9') {act_channels[9] = 1; actuate(9, 1);}
 8001706:	493c      	ldr	r1, [pc, #240]	; (80017f8 <main+0x558>)
		pca9534_set_channel(&hi2c1, PCA9534_OUTPUT_2, channel-9, !off);
 8001708:	483c      	ldr	r0, [pc, #240]	; (80017fc <main+0x55c>)
 800170a:	2300      	movs	r3, #0
		else if(key == '9') {act_channels[9] = 1; actuate(9, 1);}
 800170c:	2201      	movs	r2, #1
 800170e:	724a      	strb	r2, [r1, #9]
		pca9534_set_channel(&hi2c1, PCA9534_OUTPUT_2, channel-9, !off);
 8001710:	461a      	mov	r2, r3
 8001712:	2121      	movs	r1, #33	; 0x21
 8001714:	f000 f8ac 	bl	8001870 <pca9534_set_channel>
 8001718:	e693      	b.n	8001442 <main+0x1a2>
		else if(key == '0') {act_channels[10] = 1; actuate(10, 1);}
 800171a:	4b37      	ldr	r3, [pc, #220]	; (80017f8 <main+0x558>)
		pca9534_set_channel(&hi2c1, PCA9534_OUTPUT_2, channel-9, !off);
 800171c:	4837      	ldr	r0, [pc, #220]	; (80017fc <main+0x55c>)
		else if(key == '0') {act_channels[10] = 1; actuate(10, 1);}
 800171e:	2201      	movs	r2, #1
 8001720:	729a      	strb	r2, [r3, #10]
		pca9534_set_channel(&hi2c1, PCA9534_OUTPUT_2, channel-9, !off);
 8001722:	2121      	movs	r1, #33	; 0x21
 8001724:	2300      	movs	r3, #0
 8001726:	f000 f8a3 	bl	8001870 <pca9534_set_channel>
 800172a:	e68a      	b.n	8001442 <main+0x1a2>
		else if(key == 'q') {act_channels[1] = 0; actuate(1, 0);}
 800172c:	4b32      	ldr	r3, [pc, #200]	; (80017f8 <main+0x558>)
		pca9534_set_channel(&hi2c1, PCA9534_OUTPUT_1, channel-1, !off);
 800172e:	4833      	ldr	r0, [pc, #204]	; (80017fc <main+0x55c>)
		else if(key == 'q') {act_channels[1] = 0; actuate(1, 0);}
 8001730:	2200      	movs	r2, #0
 8001732:	705a      	strb	r2, [r3, #1]
		pca9534_set_channel(&hi2c1, PCA9534_OUTPUT_1, channel-1, !off);
 8001734:	2120      	movs	r1, #32
 8001736:	2301      	movs	r3, #1
 8001738:	f000 f89a 	bl	8001870 <pca9534_set_channel>
 800173c:	e681      	b.n	8001442 <main+0x1a2>
		else if(key == 'w') {act_channels[2] = 0; actuate(2, 0);}
 800173e:	492e      	ldr	r1, [pc, #184]	; (80017f8 <main+0x558>)
		pca9534_set_channel(&hi2c1, PCA9534_OUTPUT_1, channel-1, !off);
 8001740:	482e      	ldr	r0, [pc, #184]	; (80017fc <main+0x55c>)
 8001742:	2301      	movs	r3, #1
		else if(key == 'w') {act_channels[2] = 0; actuate(2, 0);}
 8001744:	2200      	movs	r2, #0
 8001746:	708a      	strb	r2, [r1, #2]
		pca9534_set_channel(&hi2c1, PCA9534_OUTPUT_1, channel-1, !off);
 8001748:	461a      	mov	r2, r3
 800174a:	2120      	movs	r1, #32
 800174c:	f000 f890 	bl	8001870 <pca9534_set_channel>
 8001750:	e677      	b.n	8001442 <main+0x1a2>
		else if(key == 'e') {act_channels[3] = 0; actuate(3, 0);}
 8001752:	4a29      	ldr	r2, [pc, #164]	; (80017f8 <main+0x558>)
		pca9534_set_channel(&hi2c1, PCA9534_OUTPUT_1, channel-1, !off);
 8001754:	4829      	ldr	r0, [pc, #164]	; (80017fc <main+0x55c>)
		else if(key == 'e') {act_channels[3] = 0; actuate(3, 0);}
 8001756:	2300      	movs	r3, #0
 8001758:	70d3      	strb	r3, [r2, #3]
		pca9534_set_channel(&hi2c1, PCA9534_OUTPUT_1, channel-1, !off);
 800175a:	2120      	movs	r1, #32
 800175c:	2301      	movs	r3, #1
 800175e:	2202      	movs	r2, #2
 8001760:	f000 f886 	bl	8001870 <pca9534_set_channel>
 8001764:	e66d      	b.n	8001442 <main+0x1a2>
		else if(key == 'r') {act_channels[4] = 0; actuate(4, 0);}
 8001766:	4a24      	ldr	r2, [pc, #144]	; (80017f8 <main+0x558>)
		pca9534_set_channel(&hi2c1, PCA9534_OUTPUT_1, channel-1, !off);
 8001768:	4824      	ldr	r0, [pc, #144]	; (80017fc <main+0x55c>)
		else if(key == 'r') {act_channels[4] = 0; actuate(4, 0);}
 800176a:	2300      	movs	r3, #0
 800176c:	7113      	strb	r3, [r2, #4]
		pca9534_set_channel(&hi2c1, PCA9534_OUTPUT_1, channel-1, !off);
 800176e:	2120      	movs	r1, #32
 8001770:	2301      	movs	r3, #1
 8001772:	2203      	movs	r2, #3
 8001774:	f000 f87c 	bl	8001870 <pca9534_set_channel>
 8001778:	e663      	b.n	8001442 <main+0x1a2>
		else if(key == 't') {act_channels[5] = 0; actuate(5, 0);}
 800177a:	4a1f      	ldr	r2, [pc, #124]	; (80017f8 <main+0x558>)
		pca9534_set_channel(&hi2c1, PCA9534_OUTPUT_1, channel-1, !off);
 800177c:	481f      	ldr	r0, [pc, #124]	; (80017fc <main+0x55c>)
		else if(key == 't') {act_channels[5] = 0; actuate(5, 0);}
 800177e:	2300      	movs	r3, #0
 8001780:	7153      	strb	r3, [r2, #5]
		pca9534_set_channel(&hi2c1, PCA9534_OUTPUT_1, channel-1, !off);
 8001782:	2120      	movs	r1, #32
 8001784:	2301      	movs	r3, #1
 8001786:	2204      	movs	r2, #4
 8001788:	f000 f872 	bl	8001870 <pca9534_set_channel>
 800178c:	e659      	b.n	8001442 <main+0x1a2>
		else if(key == 'y') {act_channels[6] = 0; actuate(6, 0);}
 800178e:	4a1a      	ldr	r2, [pc, #104]	; (80017f8 <main+0x558>)
		pca9534_set_channel(&hi2c1, PCA9534_OUTPUT_1, channel-1, !off);
 8001790:	481a      	ldr	r0, [pc, #104]	; (80017fc <main+0x55c>)
		else if(key == 'y') {act_channels[6] = 0; actuate(6, 0);}
 8001792:	2300      	movs	r3, #0
 8001794:	7193      	strb	r3, [r2, #6]
		pca9534_set_channel(&hi2c1, PCA9534_OUTPUT_1, channel-1, !off);
 8001796:	2120      	movs	r1, #32
 8001798:	2301      	movs	r3, #1
 800179a:	2205      	movs	r2, #5
 800179c:	f000 f868 	bl	8001870 <pca9534_set_channel>
 80017a0:	e64f      	b.n	8001442 <main+0x1a2>
		else if(key == 'i') {act_channels[8] = 0; actuate(8, 0);}
 80017a2:	4a15      	ldr	r2, [pc, #84]	; (80017f8 <main+0x558>)
		pca9534_set_channel(&hi2c1, PCA9534_OUTPUT_1, channel-1, !off);
 80017a4:	4815      	ldr	r0, [pc, #84]	; (80017fc <main+0x55c>)
		else if(key == 'i') {act_channels[8] = 0; actuate(8, 0);}
 80017a6:	2300      	movs	r3, #0
 80017a8:	7213      	strb	r3, [r2, #8]
		pca9534_set_channel(&hi2c1, PCA9534_OUTPUT_1, channel-1, !off);
 80017aa:	2120      	movs	r1, #32
 80017ac:	2301      	movs	r3, #1
 80017ae:	2207      	movs	r2, #7
 80017b0:	f000 f85e 	bl	8001870 <pca9534_set_channel>
 80017b4:	e645      	b.n	8001442 <main+0x1a2>
		else if(key == 'u') {act_channels[7] = 0; actuate(7, 0);}
 80017b6:	4a10      	ldr	r2, [pc, #64]	; (80017f8 <main+0x558>)
		pca9534_set_channel(&hi2c1, PCA9534_OUTPUT_1, channel-1, !off);
 80017b8:	4810      	ldr	r0, [pc, #64]	; (80017fc <main+0x55c>)
		else if(key == 'u') {act_channels[7] = 0; actuate(7, 0);}
 80017ba:	2300      	movs	r3, #0
 80017bc:	71d3      	strb	r3, [r2, #7]
		pca9534_set_channel(&hi2c1, PCA9534_OUTPUT_1, channel-1, !off);
 80017be:	2120      	movs	r1, #32
 80017c0:	2301      	movs	r3, #1
 80017c2:	2206      	movs	r2, #6
 80017c4:	f000 f854 	bl	8001870 <pca9534_set_channel>
 80017c8:	e63b      	b.n	8001442 <main+0x1a2>
		else if(key == 127) {abort_valves();}
 80017ca:	f7ff fce1 	bl	8001190 <abort_valves>
 80017ce:	e638      	b.n	8001442 <main+0x1a2>
		else if(key == 'o') {act_channels[9] = 0; actuate(9, 0);}
 80017d0:	4b09      	ldr	r3, [pc, #36]	; (80017f8 <main+0x558>)
		pca9534_set_channel(&hi2c1, PCA9534_OUTPUT_2, channel-9, !off);
 80017d2:	480a      	ldr	r0, [pc, #40]	; (80017fc <main+0x55c>)
		else if(key == 'o') {act_channels[9] = 0; actuate(9, 0);}
 80017d4:	2200      	movs	r2, #0
 80017d6:	725a      	strb	r2, [r3, #9]
		pca9534_set_channel(&hi2c1, PCA9534_OUTPUT_2, channel-9, !off);
 80017d8:	2121      	movs	r1, #33	; 0x21
 80017da:	2301      	movs	r3, #1
 80017dc:	f000 f848 	bl	8001870 <pca9534_set_channel>
 80017e0:	e62f      	b.n	8001442 <main+0x1a2>
		else if(key == 'p') {act_channels[10] = 0; actuate(10, 0);}
 80017e2:	4905      	ldr	r1, [pc, #20]	; (80017f8 <main+0x558>)
		pca9534_set_channel(&hi2c1, PCA9534_OUTPUT_2, channel-9, !off);
 80017e4:	4805      	ldr	r0, [pc, #20]	; (80017fc <main+0x55c>)
 80017e6:	2301      	movs	r3, #1
		else if(key == 'p') {act_channels[10] = 0; actuate(10, 0);}
 80017e8:	2200      	movs	r2, #0
 80017ea:	728a      	strb	r2, [r1, #10]
		pca9534_set_channel(&hi2c1, PCA9534_OUTPUT_2, channel-9, !off);
 80017ec:	461a      	mov	r2, r3
 80017ee:	2121      	movs	r1, #33	; 0x21
 80017f0:	f000 f83e 	bl	8001870 <pca9534_set_channel>
 80017f4:	e625      	b.n	8001442 <main+0x1a2>
 80017f6:	bf00      	nop
 80017f8:	20000250 	.word	0x20000250
 80017fc:	200001f8 	.word	0x200001f8

08001800 <HAL_TIM_PeriodElapsedCallback>:
    millis++;
 8001800:	4a02      	ldr	r2, [pc, #8]	; (800180c <HAL_TIM_PeriodElapsedCallback+0xc>)
 8001802:	6813      	ldr	r3, [r2, #0]
 8001804:	3301      	adds	r3, #1
 8001806:	6013      	str	r3, [r2, #0]
}
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	2000026c 	.word	0x2000026c

08001810 <HAL_UART_RxCpltCallback>:
	keypress = 1;
 8001810:	4b03      	ldr	r3, [pc, #12]	; (8001820 <HAL_UART_RxCpltCallback+0x10>)
    HAL_UART_Receive_IT(&huart2, UART2_rxBuffer, 1);
 8001812:	4904      	ldr	r1, [pc, #16]	; (8001824 <HAL_UART_RxCpltCallback+0x14>)
 8001814:	4804      	ldr	r0, [pc, #16]	; (8001828 <HAL_UART_RxCpltCallback+0x18>)
	keypress = 1;
 8001816:	2201      	movs	r2, #1
 8001818:	701a      	strb	r2, [r3, #0]
    HAL_UART_Receive_IT(&huart2, UART2_rxBuffer, 1);
 800181a:	f002 bccb 	b.w	80041b4 <HAL_UART_Receive_IT>
 800181e:	bf00      	nop
 8001820:	20000268 	.word	0x20000268
 8001824:	2000024c 	.word	0x2000024c
 8001828:	20000318 	.word	0x20000318

0800182c <HAL_UART_ErrorCallback>:
	HAL_UART_Receive_IT(&huart2, UART2_rxBuffer, 1);
 800182c:	4902      	ldr	r1, [pc, #8]	; (8001838 <HAL_UART_ErrorCallback+0xc>)
 800182e:	4803      	ldr	r0, [pc, #12]	; (800183c <HAL_UART_ErrorCallback+0x10>)
 8001830:	2201      	movs	r2, #1
 8001832:	f002 bcbf 	b.w	80041b4 <HAL_UART_Receive_IT>
 8001836:	bf00      	nop
 8001838:	2000024c 	.word	0x2000024c
 800183c:	20000318 	.word	0x20000318

08001840 <Error_Handler>:
 8001840:	b672      	cpsid	i
  while (1)
 8001842:	e7fe      	b.n	8001842 <Error_Handler+0x2>

08001844 <pca9534_init_output>:
    addr <<= 1;

    HAL_I2C_Mem_Write(hi2c, addr, reg, 1, &write_data, 1, 10);
}

void pca9534_init_output(I2C_HandleTypeDef *hi2c, uint8_t addr) {
 8001844:	b510      	push	{r4, lr}
    HAL_I2C_Mem_Write(hi2c, addr, reg, 1, &write_data, 1, 10);
 8001846:	2301      	movs	r3, #1
void pca9534_init_output(I2C_HandleTypeDef *hi2c, uint8_t addr) {
 8001848:	b086      	sub	sp, #24
    addr <<= 1;
 800184a:	4099      	lsls	r1, r3
    HAL_I2C_Mem_Write(hi2c, addr, reg, 1, &write_data, 1, 10);
 800184c:	f10d 0217 	add.w	r2, sp, #23
 8001850:	240a      	movs	r4, #10
 8001852:	e9cd 2300 	strd	r2, r3, [sp]
 8001856:	f04f 0c00 	mov.w	ip, #0
 800185a:	9402      	str	r4, [sp, #8]
 800185c:	2203      	movs	r2, #3
 800185e:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
 8001862:	f88d c017 	strb.w	ip, [sp, #23]
 8001866:	f000 ff97 	bl	8002798 <HAL_I2C_Mem_Write>
    // configure all ports to be outputs
    pca9534_write_reg(hi2c, addr, PCA9534_REG_CONFIG, 0x00);
}
 800186a:	b006      	add	sp, #24
 800186c:	bd10      	pop	{r4, pc}
 800186e:	bf00      	nop

08001870 <pca9534_set_channel>:
void pca9534_init_input(I2C_HandleTypeDef *hi2c, uint8_t addr) {
    // configure all ports to be inputs
    pca9534_write_reg(hi2c, addr, PCA9534_REG_CONFIG, 0xFF);
}

void pca9534_set_channel(I2C_HandleTypeDef *hi2c, uint8_t addr, uint8_t channel, uint8_t set) {
 8001870:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_I2C_Mem_Read(hi2c, addr, reg, 1, &read_data, 1, 10);
 8001874:	2401      	movs	r4, #1
void pca9534_set_channel(I2C_HandleTypeDef *hi2c, uint8_t addr, uint8_t channel, uint8_t set) {
 8001876:	b088      	sub	sp, #32
 8001878:	4698      	mov	r8, r3
    HAL_I2C_Mem_Read(hi2c, addr, reg, 1, &read_data, 1, 10);
 800187a:	230a      	movs	r3, #10
 800187c:	e9cd 4301 	strd	r4, r3, [sp, #4]
    addr <<= 1;
 8001880:	0049      	lsls	r1, r1, #1
    uint8_t read_data = 0;
 8001882:	2300      	movs	r3, #0
    HAL_I2C_Mem_Read(hi2c, addr, reg, 1, &read_data, 1, 10);
 8001884:	f10d 051f 	add.w	r5, sp, #31
 8001888:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
void pca9534_set_channel(I2C_HandleTypeDef *hi2c, uint8_t addr, uint8_t channel, uint8_t set) {
 800188c:	4617      	mov	r7, r2
    uint8_t read_data = 0;
 800188e:	f88d 301f 	strb.w	r3, [sp, #31]
    HAL_I2C_Mem_Read(hi2c, addr, reg, 1, &read_data, 1, 10);
 8001892:	4622      	mov	r2, r4
 8001894:	4623      	mov	r3, r4
 8001896:	9500      	str	r5, [sp, #0]
 8001898:	9105      	str	r1, [sp, #20]
void pca9534_set_channel(I2C_HandleTypeDef *hi2c, uint8_t addr, uint8_t channel, uint8_t set) {
 800189a:	4606      	mov	r6, r0
    uint8_t state = pca9534_read_reg(hi2c, addr, PCA9534_REG_OUTPUT);

    uint8_t n = channel;

    if (set) {
        state |= (1 << n);
 800189c:	40bc      	lsls	r4, r7
    HAL_I2C_Mem_Read(hi2c, addr, reg, 1, &read_data, 1, 10);
 800189e:	f001 f86f 	bl	8002980 <HAL_I2C_Mem_Read>
    return read_data;
 80018a2:	f89d 001f 	ldrb.w	r0, [sp, #31]
    if (set) {
 80018a6:	9905      	ldr	r1, [sp, #20]
 80018a8:	f1b8 0f00 	cmp.w	r8, #0
 80018ac:	d00f      	beq.n	80018ce <pca9534_set_channel+0x5e>
        state |= (1 << n);
 80018ae:	4304      	orrs	r4, r0
 80018b0:	b2e4      	uxtb	r4, r4
    HAL_I2C_Mem_Write(hi2c, addr, reg, 1, &write_data, 1, 10);
 80018b2:	2301      	movs	r3, #1
 80018b4:	220a      	movs	r2, #10
 80018b6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80018ba:	9500      	str	r5, [sp, #0]
 80018bc:	461a      	mov	r2, r3
 80018be:	4630      	mov	r0, r6
 80018c0:	f88d 401f 	strb.w	r4, [sp, #31]
 80018c4:	f000 ff68 	bl	8002798 <HAL_I2C_Mem_Write>
    } else {
        state &= ~(1 << n);
    }
    
    pca9534_write_reg(hi2c, addr, PCA9534_REG_OUTPUT, state);
 80018c8:	b008      	add	sp, #32
 80018ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        state &= ~(1 << n);
 80018ce:	ea20 0404 	bic.w	r4, r0, r4
 80018d2:	e7ee      	b.n	80018b2 <pca9534_set_channel+0x42>

080018d4 <MX_SPI1_Init>:
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80018d4:	480f      	ldr	r0, [pc, #60]	; (8001914 <MX_SPI1_Init+0x40>)
 80018d6:	4910      	ldr	r1, [pc, #64]	; (8001918 <MX_SPI1_Init+0x44>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80018d8:	f44f 7282 	mov.w	r2, #260	; 0x104
{
 80018dc:	b510      	push	{r4, lr}
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80018de:	e9c0 1200 	strd	r1, r2, [r0]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80018e2:	f44f 7200 	mov.w	r2, #512	; 0x200
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80018e6:	2300      	movs	r3, #0
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80018e8:	2401      	movs	r4, #1
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80018ea:	2118      	movs	r1, #24
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80018ec:	6182      	str	r2, [r0, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 10;
 80018ee:	220a      	movs	r2, #10
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80018f0:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80018f4:	e9c0 3404 	strd	r3, r4, [r0, #16]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018f8:	e9c0 1307 	strd	r1, r3, [r0, #28]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018fc:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
  hspi1.Init.CRCPolynomial = 10;
 8001900:	62c2      	str	r2, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001902:	f001 fda1 	bl	8003448 <HAL_SPI_Init>
 8001906:	b900      	cbnz	r0, 800190a <MX_SPI1_Init+0x36>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001908:	bd10      	pop	{r4, pc}
 800190a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 800190e:	f7ff bf97 	b.w	8001840 <Error_Handler>
 8001912:	bf00      	nop
 8001914:	20000274 	.word	0x20000274
 8001918:	40013000 	.word	0x40013000
 800191c:	00000000 	.word	0x00000000

08001920 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001920:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(spiHandle->Instance==SPI1)
 8001922:	4a1b      	ldr	r2, [pc, #108]	; (8001990 <HAL_SPI_MspInit+0x70>)
 8001924:	6801      	ldr	r1, [r0, #0]
{
 8001926:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001928:	2300      	movs	r3, #0
  if(spiHandle->Instance==SPI1)
 800192a:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800192c:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8001930:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8001934:	9306      	str	r3, [sp, #24]
  if(spiHandle->Instance==SPI1)
 8001936:	d001      	beq.n	800193c <HAL_SPI_MspInit+0x1c>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001938:	b008      	add	sp, #32
 800193a:	bd10      	pop	{r4, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 800193c:	f502 3284 	add.w	r2, r2, #67584	; 0x10800
 8001940:	9300      	str	r3, [sp, #0]
 8001942:	6c50      	ldr	r0, [r2, #68]	; 0x44
 8001944:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
 8001948:	6450      	str	r0, [r2, #68]	; 0x44
 800194a:	6c50      	ldr	r0, [r2, #68]	; 0x44
 800194c:	f400 5080 	and.w	r0, r0, #4096	; 0x1000
 8001950:	9000      	str	r0, [sp, #0]
 8001952:	9800      	ldr	r0, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001954:	9301      	str	r3, [sp, #4]
 8001956:	6b13      	ldr	r3, [r2, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001958:	480e      	ldr	r0, [pc, #56]	; (8001994 <HAL_SPI_MspInit+0x74>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800195a:	f043 0301 	orr.w	r3, r3, #1
 800195e:	6313      	str	r3, [r2, #48]	; 0x30
 8001960:	6b13      	ldr	r3, [r2, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001962:	ed9f 7b09 	vldr	d7, [pc, #36]	; 8001988 <HAL_SPI_MspInit+0x68>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001966:	f003 0301 	and.w	r3, r3, #1
 800196a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800196c:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800196e:	2305      	movs	r3, #5
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001970:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001972:	ed8d 7b02 	vstr	d7, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001976:	e9cd 2305 	strd	r2, r3, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800197a:	9c01      	ldr	r4, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800197c:	f000 fade 	bl	8001f3c <HAL_GPIO_Init>
}
 8001980:	b008      	add	sp, #32
 8001982:	bd10      	pop	{r4, pc}
 8001984:	f3af 8000 	nop.w
 8001988:	000000e0 	.word	0x000000e0
 800198c:	00000002 	.word	0x00000002
 8001990:	40013000 	.word	0x40013000
 8001994:	40020000 	.word	0x40020000

08001998 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001998:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800199a:	4b0d      	ldr	r3, [pc, #52]	; (80019d0 <HAL_MspInit+0x38>)
 800199c:	2100      	movs	r1, #0
 800199e:	9100      	str	r1, [sp, #0]
 80019a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80019a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80019a6:	645a      	str	r2, [r3, #68]	; 0x44
 80019a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80019aa:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80019ae:	9200      	str	r2, [sp, #0]
 80019b0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019b2:	9101      	str	r1, [sp, #4]
 80019b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80019b6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80019ba:	641a      	str	r2, [r3, #64]	; 0x40
 80019bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019c2:	9301      	str	r3, [sp, #4]
 80019c4:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80019c6:	2007      	movs	r0, #7
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019c8:	b002      	add	sp, #8
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80019ca:	f000 b9e5 	b.w	8001d98 <HAL_NVIC_SetPriorityGrouping>
 80019ce:	bf00      	nop
 80019d0:	40023800 	.word	0x40023800

080019d4 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019d4:	e7fe      	b.n	80019d4 <NMI_Handler>
 80019d6:	bf00      	nop

080019d8 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019d8:	e7fe      	b.n	80019d8 <HardFault_Handler>
 80019da:	bf00      	nop

080019dc <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019dc:	e7fe      	b.n	80019dc <MemManage_Handler>
 80019de:	bf00      	nop

080019e0 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019e0:	e7fe      	b.n	80019e0 <BusFault_Handler>
 80019e2:	bf00      	nop

080019e4 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019e4:	e7fe      	b.n	80019e4 <UsageFault_Handler>
 80019e6:	bf00      	nop

080019e8 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019e8:	4770      	bx	lr
 80019ea:	bf00      	nop

080019ec <DebugMon_Handler>:
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop

080019f0 <PendSV_Handler>:
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop

080019f4 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019f4:	f000 b9ac 	b.w	8001d50 <HAL_IncTick>

080019f8 <TIM1_BRK_TIM9_IRQHandler>:
void TIM1_BRK_TIM9_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80019f8:	4801      	ldr	r0, [pc, #4]	; (8001a00 <TIM1_BRK_TIM9_IRQHandler+0x8>)
 80019fa:	f002 b9a5 	b.w	8003d48 <HAL_TIM_IRQHandler>
 80019fe:	bf00      	nop
 8001a00:	200002d0 	.word	0x200002d0

08001a04 <TIM1_UP_TIM10_IRQHandler>:
 8001a04:	4801      	ldr	r0, [pc, #4]	; (8001a0c <TIM1_UP_TIM10_IRQHandler+0x8>)
 8001a06:	f002 b99f 	b.w	8003d48 <HAL_TIM_IRQHandler>
 8001a0a:	bf00      	nop
 8001a0c:	200002d0 	.word	0x200002d0

08001a10 <TIM1_TRG_COM_TIM11_IRQHandler>:
 8001a10:	4801      	ldr	r0, [pc, #4]	; (8001a18 <TIM1_TRG_COM_TIM11_IRQHandler+0x8>)
 8001a12:	f002 b999 	b.w	8003d48 <HAL_TIM_IRQHandler>
 8001a16:	bf00      	nop
 8001a18:	200002d0 	.word	0x200002d0

08001a1c <TIM1_CC_IRQHandler>:
 8001a1c:	4801      	ldr	r0, [pc, #4]	; (8001a24 <TIM1_CC_IRQHandler+0x8>)
 8001a1e:	f002 b993 	b.w	8003d48 <HAL_TIM_IRQHandler>
 8001a22:	bf00      	nop
 8001a24:	200002d0 	.word	0x200002d0

08001a28 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001a28:	4801      	ldr	r0, [pc, #4]	; (8001a30 <USART2_IRQHandler+0x8>)
 8001a2a:	f002 bc61 	b.w	80042f0 <HAL_UART_IRQHandler>
 8001a2e:	bf00      	nop
 8001a30:	20000318 	.word	0x20000318

08001a34 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8001a34:	2001      	movs	r0, #1
 8001a36:	4770      	bx	lr

08001a38 <_kill>:

int _kill(int pid, int sig)
{
 8001a38:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a3a:	f002 fde3 	bl	8004604 <__errno>
 8001a3e:	2316      	movs	r3, #22
 8001a40:	6003      	str	r3, [r0, #0]
  return -1;
}
 8001a42:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a46:	bd08      	pop	{r3, pc}

08001a48 <_exit>:

void _exit (int status)
{
 8001a48:	b508      	push	{r3, lr}
  errno = EINVAL;
 8001a4a:	f002 fddb 	bl	8004604 <__errno>
 8001a4e:	2316      	movs	r3, #22
 8001a50:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 8001a52:	e7fe      	b.n	8001a52 <_exit+0xa>

08001a54 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a54:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a56:	1e16      	subs	r6, r2, #0
 8001a58:	dd07      	ble.n	8001a6a <_read+0x16>
 8001a5a:	460c      	mov	r4, r1
 8001a5c:	198d      	adds	r5, r1, r6
  {
    *ptr++ = __io_getchar();
 8001a5e:	f3af 8000 	nop.w
 8001a62:	f804 0b01 	strb.w	r0, [r4], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a66:	42a5      	cmp	r5, r4
 8001a68:	d1f9      	bne.n	8001a5e <_read+0xa>
  }

  return len;
}
 8001a6a:	4630      	mov	r0, r6
 8001a6c:	bd70      	pop	{r4, r5, r6, pc}
 8001a6e:	bf00      	nop

08001a70 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8001a70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a74:	4770      	bx	lr
 8001a76:	bf00      	nop

08001a78 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8001a78:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a7c:	604b      	str	r3, [r1, #4]
  return 0;
}
 8001a7e:	2000      	movs	r0, #0
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop

08001a84 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8001a84:	2001      	movs	r0, #1
 8001a86:	4770      	bx	lr

08001a88 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8001a88:	2000      	movs	r0, #0
 8001a8a:	4770      	bx	lr

08001a8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a8c:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a8e:	4c0c      	ldr	r4, [pc, #48]	; (8001ac0 <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a90:	4b0c      	ldr	r3, [pc, #48]	; (8001ac4 <_sbrk+0x38>)
 8001a92:	490d      	ldr	r1, [pc, #52]	; (8001ac8 <_sbrk+0x3c>)
  if (NULL == __sbrk_heap_end)
 8001a94:	6822      	ldr	r2, [r4, #0]
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a96:	1a59      	subs	r1, r3, r1
  if (NULL == __sbrk_heap_end)
 8001a98:	b12a      	cbz	r2, 8001aa6 <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a9a:	4410      	add	r0, r2
 8001a9c:	4288      	cmp	r0, r1
 8001a9e:	d807      	bhi.n	8001ab0 <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8001aa0:	6020      	str	r0, [r4, #0]

  return (void *)prev_heap_end;
}
 8001aa2:	4610      	mov	r0, r2
 8001aa4:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8001aa6:	4a09      	ldr	r2, [pc, #36]	; (8001acc <_sbrk+0x40>)
 8001aa8:	6022      	str	r2, [r4, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8001aaa:	4410      	add	r0, r2
 8001aac:	4288      	cmp	r0, r1
 8001aae:	d9f7      	bls.n	8001aa0 <_sbrk+0x14>
    errno = ENOMEM;
 8001ab0:	f002 fda8 	bl	8004604 <__errno>
 8001ab4:	230c      	movs	r3, #12
    return (void *)-1;
 8001ab6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    errno = ENOMEM;
 8001aba:	6003      	str	r3, [r0, #0]
}
 8001abc:	4610      	mov	r0, r2
 8001abe:	bd10      	pop	{r4, pc}
 8001ac0:	200002cc 	.word	0x200002cc
 8001ac4:	20020000 	.word	0x20020000
 8001ac8:	00000400 	.word	0x00000400
 8001acc:	20000370 	.word	0x20000370

08001ad0 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ad0:	4a03      	ldr	r2, [pc, #12]	; (8001ae0 <SystemInit+0x10>)
 8001ad2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001ad6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ada:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ade:	4770      	bx	lr
 8001ae0:	e000ed00 	.word	0xe000ed00

08001ae4 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001ae4:	b500      	push	{lr}
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001ae6:	481b      	ldr	r0, [pc, #108]	; (8001b54 <MX_TIM1_Init+0x70>)
 8001ae8:	4a1b      	ldr	r2, [pc, #108]	; (8001b58 <MX_TIM1_Init+0x74>)
 8001aea:	6002      	str	r2, [r0, #0]
  htim1.Init.Prescaler = 17999;
 8001aec:	f244 624f 	movw	r2, #17999	; 0x464f
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001af0:	2300      	movs	r3, #0
{
 8001af2:	b087      	sub	sp, #28
  htim1.Init.Prescaler = 17999;
 8001af4:	6042      	str	r2, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.Period = 10;
 8001af6:	220a      	movs	r2, #10
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001af8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8001afc:	e9cd 3304 	strd	r3, r3, [sp, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b00:	e9cd 3300 	strd	r3, r3, [sp]
  htim1.Init.Period = 10;
 8001b04:	e9c0 3202 	strd	r3, r2, [r0, #8]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim1.Init.RepetitionCounter = 0;
 8001b08:	e9c0 3304 	strd	r3, r3, [r0, #16]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b0c:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001b0e:	f001 ff99 	bl	8003a44 <HAL_TIM_Base_Init>
 8001b12:	b998      	cbnz	r0, 8001b3c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001b18:	480e      	ldr	r0, [pc, #56]	; (8001b54 <MX_TIM1_Init+0x70>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b1a:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001b1c:	a902      	add	r1, sp, #8
 8001b1e:	f002 f85b 	bl	8003bd8 <HAL_TIM_ConfigClockSource>
 8001b22:	b998      	cbnz	r0, 8001b4c <MX_TIM1_Init+0x68>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b24:	2200      	movs	r2, #0
 8001b26:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b28:	480a      	ldr	r0, [pc, #40]	; (8001b54 <MX_TIM1_Init+0x70>)
 8001b2a:	4669      	mov	r1, sp
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b2c:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b30:	f002 f9b4 	bl	8003e9c <HAL_TIMEx_MasterConfigSynchronization>
 8001b34:	b928      	cbnz	r0, 8001b42 <MX_TIM1_Init+0x5e>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001b36:	b007      	add	sp, #28
 8001b38:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001b3c:	f7ff fe80 	bl	8001840 <Error_Handler>
 8001b40:	e7e8      	b.n	8001b14 <MX_TIM1_Init+0x30>
    Error_Handler();
 8001b42:	f7ff fe7d 	bl	8001840 <Error_Handler>
}
 8001b46:	b007      	add	sp, #28
 8001b48:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001b4c:	f7ff fe78 	bl	8001840 <Error_Handler>
 8001b50:	e7e8      	b.n	8001b24 <MX_TIM1_Init+0x40>
 8001b52:	bf00      	nop
 8001b54:	200002d0 	.word	0x200002d0
 8001b58:	40010000 	.word	0x40010000

08001b5c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM1)
 8001b5c:	4b1a      	ldr	r3, [pc, #104]	; (8001bc8 <HAL_TIM_Base_MspInit+0x6c>)
 8001b5e:	6802      	ldr	r2, [r0, #0]
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d000      	beq.n	8001b66 <HAL_TIM_Base_MspInit+0xa>
 8001b64:	4770      	bx	lr
{
 8001b66:	b500      	push	{lr}
 8001b68:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
 8001b70:	9201      	str	r2, [sp, #4]
 8001b72:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001b74:	f041 0101 	orr.w	r1, r1, #1
 8001b78:	6459      	str	r1, [r3, #68]	; 0x44
 8001b7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b7c:	f003 0301 	and.w	r3, r3, #1

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8001b80:	4611      	mov	r1, r2
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b82:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8001b84:	2018      	movs	r0, #24
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b86:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8001b88:	f000 f918 	bl	8001dbc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001b8c:	2018      	movs	r0, #24
 8001b8e:	f000 f953 	bl	8001e38 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001b92:	2200      	movs	r2, #0
 8001b94:	4611      	mov	r1, r2
 8001b96:	2019      	movs	r0, #25
 8001b98:	f000 f910 	bl	8001dbc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001b9c:	2019      	movs	r0, #25
 8001b9e:	f000 f94b 	bl	8001e38 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	4611      	mov	r1, r2
 8001ba6:	201a      	movs	r0, #26
 8001ba8:	f000 f908 	bl	8001dbc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001bac:	201a      	movs	r0, #26
 8001bae:	f000 f943 	bl	8001e38 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	4611      	mov	r1, r2
 8001bb6:	201b      	movs	r0, #27
 8001bb8:	f000 f900 	bl	8001dbc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001bbc:	201b      	movs	r0, #27
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001bbe:	b003      	add	sp, #12
 8001bc0:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001bc4:	f000 b938 	b.w	8001e38 <HAL_NVIC_EnableIRQ>
 8001bc8:	40010000 	.word	0x40010000

08001bcc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001bcc:	b510      	push	{r4, lr}
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001bce:	480b      	ldr	r0, [pc, #44]	; (8001bfc <MX_USART2_UART_Init+0x30>)
 8001bd0:	4c0b      	ldr	r4, [pc, #44]	; (8001c00 <MX_USART2_UART_Init+0x34>)
  huart2.Init.BaudRate = 921600;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001bd2:	2300      	movs	r3, #0
  huart2.Init.BaudRate = 921600;
 8001bd4:	f44f 2161 	mov.w	r1, #921600	; 0xe1000
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001bd8:	220c      	movs	r2, #12
  huart2.Init.BaudRate = 921600;
 8001bda:	e9c0 4100 	strd	r4, r1, [r0]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001bde:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001be2:	e9c0 3204 	strd	r3, r2, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001be6:	e9c0 3306 	strd	r3, r3, [r0, #24]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001bea:	f002 f99b 	bl	8003f24 <HAL_UART_Init>
 8001bee:	b900      	cbnz	r0, 8001bf2 <MX_USART2_UART_Init+0x26>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001bf0:	bd10      	pop	{r4, pc}
 8001bf2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8001bf6:	f7ff be23 	b.w	8001840 <Error_Handler>
 8001bfa:	bf00      	nop
 8001bfc:	20000318 	.word	0x20000318
 8001c00:	40004400 	.word	0x40004400

08001c04 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001c04:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(uartHandle->Instance==USART2)
 8001c06:	4b1c      	ldr	r3, [pc, #112]	; (8001c78 <HAL_UART_MspInit+0x74>)
 8001c08:	6802      	ldr	r2, [r0, #0]
{
 8001c0a:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c0c:	2400      	movs	r4, #0
  if(uartHandle->Instance==USART2)
 8001c0e:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c10:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8001c14:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8001c18:	9406      	str	r4, [sp, #24]
  if(uartHandle->Instance==USART2)
 8001c1a:	d001      	beq.n	8001c20 <HAL_UART_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001c1c:	b009      	add	sp, #36	; 0x24
 8001c1e:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c20:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8001c24:	9400      	str	r4, [sp, #0]
 8001c26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c28:	4814      	ldr	r0, [pc, #80]	; (8001c7c <HAL_UART_MspInit+0x78>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c2a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001c2e:	641a      	str	r2, [r3, #64]	; 0x40
 8001c30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c32:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001c36:	9200      	str	r2, [sp, #0]
 8001c38:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c3a:	9401      	str	r4, [sp, #4]
 8001c3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c3e:	f042 0201 	orr.w	r2, r2, #1
 8001c42:	631a      	str	r2, [r3, #48]	; 0x30
 8001c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c46:	f003 0301 	and.w	r3, r3, #1
 8001c4a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001c4c:	220c      	movs	r2, #12
 8001c4e:	2302      	movs	r3, #2
 8001c50:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c54:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c56:	2307      	movs	r3, #7
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c58:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c5a:	e9cd 2305 	strd	r2, r3, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c5e:	9d01      	ldr	r5, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c60:	f000 f96c 	bl	8001f3c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001c64:	4622      	mov	r2, r4
 8001c66:	4621      	mov	r1, r4
 8001c68:	2026      	movs	r0, #38	; 0x26
 8001c6a:	f000 f8a7 	bl	8001dbc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001c6e:	2026      	movs	r0, #38	; 0x26
 8001c70:	f000 f8e2 	bl	8001e38 <HAL_NVIC_EnableIRQ>
}
 8001c74:	b009      	add	sp, #36	; 0x24
 8001c76:	bd30      	pop	{r4, r5, pc}
 8001c78:	40004400 	.word	0x40004400
 8001c7c:	40020000 	.word	0x40020000

08001c80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001c80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001cb8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c84:	480d      	ldr	r0, [pc, #52]	; (8001cbc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001c86:	490e      	ldr	r1, [pc, #56]	; (8001cc0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001c88:	4a0e      	ldr	r2, [pc, #56]	; (8001cc4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c8c:	e002      	b.n	8001c94 <LoopCopyDataInit>

08001c8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c92:	3304      	adds	r3, #4

08001c94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c98:	d3f9      	bcc.n	8001c8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c9a:	4a0b      	ldr	r2, [pc, #44]	; (8001cc8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001c9c:	4c0b      	ldr	r4, [pc, #44]	; (8001ccc <LoopFillZerobss+0x26>)
  movs r3, #0
 8001c9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ca0:	e001      	b.n	8001ca6 <LoopFillZerobss>

08001ca2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ca2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ca4:	3204      	adds	r2, #4

08001ca6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ca6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ca8:	d3fb      	bcc.n	8001ca2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001caa:	f7ff ff11 	bl	8001ad0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001cae:	f002 fcaf 	bl	8004610 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cb2:	f7ff faf5 	bl	80012a0 <main>
  bx  lr    
 8001cb6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001cb8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001cbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cc0:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001cc4:	08007804 	.word	0x08007804
  ldr r2, =_sbss
 8001cc8:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001ccc:	20000370 	.word	0x20000370

08001cd0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001cd0:	e7fe      	b.n	8001cd0 <ADC_IRQHandler>
	...

08001cd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cd4:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cd6:	4a0e      	ldr	r2, [pc, #56]	; (8001d10 <HAL_InitTick+0x3c>)
 8001cd8:	4b0e      	ldr	r3, [pc, #56]	; (8001d14 <HAL_InitTick+0x40>)
 8001cda:	7812      	ldrb	r2, [r2, #0]
 8001cdc:	681b      	ldr	r3, [r3, #0]
{
 8001cde:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ce0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001ce4:	fbb0 f0f2 	udiv	r0, r0, r2
 8001ce8:	fbb3 f0f0 	udiv	r0, r3, r0
 8001cec:	f000 f8b2 	bl	8001e54 <HAL_SYSTICK_Config>
 8001cf0:	b908      	cbnz	r0, 8001cf6 <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cf2:	2d0f      	cmp	r5, #15
 8001cf4:	d901      	bls.n	8001cfa <HAL_InitTick+0x26>
    return HAL_ERROR;
 8001cf6:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8001cf8:	bd38      	pop	{r3, r4, r5, pc}
 8001cfa:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	4629      	mov	r1, r5
 8001d00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d04:	f000 f85a 	bl	8001dbc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d08:	4b03      	ldr	r3, [pc, #12]	; (8001d18 <HAL_InitTick+0x44>)
 8001d0a:	4620      	mov	r0, r4
 8001d0c:	601d      	str	r5, [r3, #0]
}
 8001d0e:	bd38      	pop	{r3, r4, r5, pc}
 8001d10:	20000004 	.word	0x20000004
 8001d14:	20000000 	.word	0x20000000
 8001d18:	20000008 	.word	0x20000008

08001d1c <HAL_Init>:
{
 8001d1c:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d1e:	4b0b      	ldr	r3, [pc, #44]	; (8001d4c <HAL_Init+0x30>)
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d26:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001d2e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d36:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d38:	2003      	movs	r0, #3
 8001d3a:	f000 f82d 	bl	8001d98 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d3e:	2000      	movs	r0, #0
 8001d40:	f7ff ffc8 	bl	8001cd4 <HAL_InitTick>
  HAL_MspInit();
 8001d44:	f7ff fe28 	bl	8001998 <HAL_MspInit>
}
 8001d48:	2000      	movs	r0, #0
 8001d4a:	bd08      	pop	{r3, pc}
 8001d4c:	40023c00 	.word	0x40023c00

08001d50 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001d50:	4a03      	ldr	r2, [pc, #12]	; (8001d60 <HAL_IncTick+0x10>)
 8001d52:	4b04      	ldr	r3, [pc, #16]	; (8001d64 <HAL_IncTick+0x14>)
 8001d54:	6811      	ldr	r1, [r2, #0]
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	440b      	add	r3, r1
 8001d5a:	6013      	str	r3, [r2, #0]
}
 8001d5c:	4770      	bx	lr
 8001d5e:	bf00      	nop
 8001d60:	2000035c 	.word	0x2000035c
 8001d64:	20000004 	.word	0x20000004

08001d68 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001d68:	4b01      	ldr	r3, [pc, #4]	; (8001d70 <HAL_GetTick+0x8>)
 8001d6a:	6818      	ldr	r0, [r3, #0]
}
 8001d6c:	4770      	bx	lr
 8001d6e:	bf00      	nop
 8001d70:	2000035c 	.word	0x2000035c

08001d74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d74:	b538      	push	{r3, r4, r5, lr}
 8001d76:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001d78:	f7ff fff6 	bl	8001d68 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d7c:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8001d7e:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8001d80:	d002      	beq.n	8001d88 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d82:	4b04      	ldr	r3, [pc, #16]	; (8001d94 <HAL_Delay+0x20>)
 8001d84:	781b      	ldrb	r3, [r3, #0]
 8001d86:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d88:	f7ff ffee 	bl	8001d68 <HAL_GetTick>
 8001d8c:	1b43      	subs	r3, r0, r5
 8001d8e:	42a3      	cmp	r3, r4
 8001d90:	d3fa      	bcc.n	8001d88 <HAL_Delay+0x14>
  {
  }
}
 8001d92:	bd38      	pop	{r3, r4, r5, pc}
 8001d94:	20000004 	.word	0x20000004

08001d98 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d98:	4907      	ldr	r1, [pc, #28]	; (8001db8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001d9a:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d9c:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d9e:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001da2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001da6:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001da8:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001daa:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001dae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001db2:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001db4:	4770      	bx	lr
 8001db6:	bf00      	nop
 8001db8:	e000ed00 	.word	0xe000ed00

08001dbc <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dbc:	4b1c      	ldr	r3, [pc, #112]	; (8001e30 <HAL_NVIC_SetPriority+0x74>)
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dc4:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dc6:	f1c3 0e07 	rsb	lr, r3, #7
 8001dca:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dce:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dd2:	bf28      	it	cs
 8001dd4:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dd8:	f1bc 0f06 	cmp.w	ip, #6
 8001ddc:	d91b      	bls.n	8001e16 <HAL_NVIC_SetPriority+0x5a>
 8001dde:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001de0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8001de4:	fa0c fc03 	lsl.w	ip, ip, r3
 8001de8:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dec:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8001df0:	fa0c fc0e 	lsl.w	ip, ip, lr
 8001df4:	ea21 010c 	bic.w	r1, r1, ip
 8001df8:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8001dfa:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dfc:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8001e00:	db0c      	blt.n	8001e1c <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e02:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8001e06:	0109      	lsls	r1, r1, #4
 8001e08:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001e0c:	b2c9      	uxtb	r1, r1
 8001e0e:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001e12:	f85d fb04 	ldr.w	pc, [sp], #4
 8001e16:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e18:	4613      	mov	r3, r2
 8001e1a:	e7e7      	b.n	8001dec <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e1c:	4b05      	ldr	r3, [pc, #20]	; (8001e34 <HAL_NVIC_SetPriority+0x78>)
 8001e1e:	f000 000f 	and.w	r0, r0, #15
 8001e22:	0109      	lsls	r1, r1, #4
 8001e24:	4403      	add	r3, r0
 8001e26:	b2c9      	uxtb	r1, r1
 8001e28:	7619      	strb	r1, [r3, #24]
 8001e2a:	f85d fb04 	ldr.w	pc, [sp], #4
 8001e2e:	bf00      	nop
 8001e30:	e000ed00 	.word	0xe000ed00
 8001e34:	e000ecfc 	.word	0xe000ecfc

08001e38 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001e38:	2800      	cmp	r0, #0
 8001e3a:	db08      	blt.n	8001e4e <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e3c:	0941      	lsrs	r1, r0, #5
 8001e3e:	4a04      	ldr	r2, [pc, #16]	; (8001e50 <HAL_NVIC_EnableIRQ+0x18>)
 8001e40:	f000 001f 	and.w	r0, r0, #31
 8001e44:	2301      	movs	r3, #1
 8001e46:	fa03 f000 	lsl.w	r0, r3, r0
 8001e4a:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001e4e:	4770      	bx	lr
 8001e50:	e000e100 	.word	0xe000e100

08001e54 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e54:	3801      	subs	r0, #1
 8001e56:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001e5a:	d210      	bcs.n	8001e7e <HAL_SYSTICK_Config+0x2a>
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e5c:	b410      	push	{r4}
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e5e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e62:	4c08      	ldr	r4, [pc, #32]	; (8001e84 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e64:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e66:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
 8001e6a:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e6e:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e70:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e72:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e74:	619a      	str	r2, [r3, #24]
   return SysTick_Config(TicksNumb);
}
 8001e76:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e7a:	6119      	str	r1, [r3, #16]
 8001e7c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001e7e:	2001      	movs	r0, #1
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop
 8001e84:	e000ed00 	.word	0xe000ed00

08001e88 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e88:	b570      	push	{r4, r5, r6, lr}
 8001e8a:	4604      	mov	r4, r0
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e8c:	6d86      	ldr	r6, [r0, #88]	; 0x58
  
  uint32_t tickstart = HAL_GetTick();
 8001e8e:	f7ff ff6b 	bl	8001d68 <HAL_GetTick>
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e92:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8001e96:	2b02      	cmp	r3, #2
 8001e98:	d006      	beq.n	8001ea8 <HAL_DMA_Abort+0x20>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e9a:	2300      	movs	r3, #0
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e9c:	2280      	movs	r2, #128	; 0x80
    __HAL_UNLOCK(hdma);
 8001e9e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ea2:	6562      	str	r2, [r4, #84]	; 0x54
    
    return HAL_ERROR;
 8001ea4:	2001      	movs	r0, #1
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
  }
  return HAL_OK;
}
 8001ea6:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ea8:	6823      	ldr	r3, [r4, #0]
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	f022 0216 	bic.w	r2, r2, #22
 8001eb0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001eb2:	695a      	ldr	r2, [r3, #20]
 8001eb4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001eb8:	615a      	str	r2, [r3, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001eba:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001ebc:	4605      	mov	r5, r0
 8001ebe:	b332      	cbz	r2, 8001f0e <HAL_DMA_Abort+0x86>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	f022 0208 	bic.w	r2, r2, #8
 8001ec6:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	f022 0201 	bic.w	r2, r2, #1
 8001ece:	601a      	str	r2, [r3, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ed0:	e005      	b.n	8001ede <HAL_DMA_Abort+0x56>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ed2:	f7ff ff49 	bl	8001d68 <HAL_GetTick>
 8001ed6:	1b43      	subs	r3, r0, r5
 8001ed8:	2b05      	cmp	r3, #5
 8001eda:	d80f      	bhi.n	8001efc <HAL_DMA_Abort+0x74>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001edc:	6823      	ldr	r3, [r4, #0]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f013 0301 	ands.w	r3, r3, #1
 8001ee4:	d1f5      	bne.n	8001ed2 <HAL_DMA_Abort+0x4a>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ee6:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8001ee8:	223f      	movs	r2, #63	; 0x3f
 8001eea:	408a      	lsls	r2, r1
    hdma->State = HAL_DMA_STATE_READY;
 8001eec:	2101      	movs	r1, #1
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001eee:	60b2      	str	r2, [r6, #8]
    hdma->State = HAL_DMA_STATE_READY;
 8001ef0:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 8001ef4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 8001ef8:	4618      	mov	r0, r3
}
 8001efa:	bd70      	pop	{r4, r5, r6, pc}
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001efc:	2003      	movs	r0, #3
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001efe:	2220      	movs	r2, #32
        __HAL_UNLOCK(hdma);
 8001f00:	2300      	movs	r3, #0
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f02:	6562      	str	r2, [r4, #84]	; 0x54
        __HAL_UNLOCK(hdma);
 8001f04:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f08:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8001f0c:	bd70      	pop	{r4, r5, r6, pc}
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f0e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8001f10:	2a00      	cmp	r2, #0
 8001f12:	d1d5      	bne.n	8001ec0 <HAL_DMA_Abort+0x38>
 8001f14:	e7d8      	b.n	8001ec8 <HAL_DMA_Abort+0x40>
 8001f16:	bf00      	nop

08001f18 <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f18:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8001f1c:	2b02      	cmp	r3, #2
 8001f1e:	d003      	beq.n	8001f28 <HAL_DMA_Abort_IT+0x10>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f20:	2380      	movs	r3, #128	; 0x80
 8001f22:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8001f24:	2001      	movs	r0, #1
 8001f26:	4770      	bx	lr
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f28:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8001f2a:	2305      	movs	r3, #5
 8001f2c:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8001f30:	6813      	ldr	r3, [r2, #0]
 8001f32:	f023 0301 	bic.w	r3, r3, #1
  }

  return HAL_OK;
 8001f36:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 8001f38:	6013      	str	r3, [r2, #0]
}
 8001f3a:	4770      	bx	lr

08001f3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f40:	2200      	movs	r2, #0
 8001f42:	680c      	ldr	r4, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f44:	f8df a214 	ldr.w	sl, [pc, #532]	; 800215c <HAL_GPIO_Init+0x220>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f48:	4e7d      	ldr	r6, [pc, #500]	; (8002140 <HAL_GPIO_Init+0x204>)
{
 8001f4a:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f4c:	4613      	mov	r3, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f4e:	4689      	mov	r9, r1
 8001f50:	e005      	b.n	8001f5e <HAL_GPIO_Init+0x22>
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f52:	3301      	adds	r3, #1
 8001f54:	2b10      	cmp	r3, #16
 8001f56:	f102 0202 	add.w	r2, r2, #2
 8001f5a:	f000 8084 	beq.w	8002066 <HAL_GPIO_Init+0x12a>
    ioposition = 0x01U << position;
 8001f5e:	2101      	movs	r1, #1
 8001f60:	4099      	lsls	r1, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f62:	ea01 0b04 	and.w	fp, r1, r4
    if(iocurrent == ioposition)
 8001f66:	43a1      	bics	r1, r4
 8001f68:	d1f3      	bne.n	8001f52 <HAL_GPIO_Init+0x16>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f6a:	f8d9 c004 	ldr.w	ip, [r9, #4]
 8001f6e:	f00c 0103 	and.w	r1, ip, #3
 8001f72:	1e4d      	subs	r5, r1, #1
 8001f74:	2d01      	cmp	r5, #1
 8001f76:	d979      	bls.n	800206c <HAL_GPIO_Init+0x130>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f78:	2903      	cmp	r1, #3
 8001f7a:	f040 80b9 	bne.w	80020f0 <HAL_GPIO_Init+0x1b4>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f7e:	4091      	lsls	r1, r2
 8001f80:	43cd      	mvns	r5, r1
      temp = GPIOx->MODER;
 8001f82:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f84:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f86:	4329      	orrs	r1, r5
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f88:	f41c 3f40 	tst.w	ip, #196608	; 0x30000
      GPIOx->MODER = temp;
 8001f8c:	6001      	str	r1, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f8e:	d0e0      	beq.n	8001f52 <HAL_GPIO_Init+0x16>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f90:	2100      	movs	r1, #0
 8001f92:	9103      	str	r1, [sp, #12]
 8001f94:	f8da 1044 	ldr.w	r1, [sl, #68]	; 0x44
 8001f98:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8001f9c:	f8ca 1044 	str.w	r1, [sl, #68]	; 0x44
 8001fa0:	f8da 1044 	ldr.w	r1, [sl, #68]	; 0x44
 8001fa4:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 8001fa8:	9103      	str	r1, [sp, #12]
 8001faa:	9903      	ldr	r1, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 8001fac:	f023 0103 	bic.w	r1, r3, #3
 8001fb0:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8001fb4:	f501 319c 	add.w	r1, r1, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001fb8:	f003 0703 	and.w	r7, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8001fbc:	f8d1 e008 	ldr.w	lr, [r1, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001fc0:	00bf      	lsls	r7, r7, #2
 8001fc2:	250f      	movs	r5, #15
 8001fc4:	40bd      	lsls	r5, r7
 8001fc6:	ea2e 0805 	bic.w	r8, lr, r5
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001fca:	4d5e      	ldr	r5, [pc, #376]	; (8002144 <HAL_GPIO_Init+0x208>)
 8001fcc:	42a8      	cmp	r0, r5
 8001fce:	d01f      	beq.n	8002010 <HAL_GPIO_Init+0xd4>
 8001fd0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001fd4:	42a8      	cmp	r0, r5
 8001fd6:	f000 808f 	beq.w	80020f8 <HAL_GPIO_Init+0x1bc>
 8001fda:	4d5b      	ldr	r5, [pc, #364]	; (8002148 <HAL_GPIO_Init+0x20c>)
 8001fdc:	42a8      	cmp	r0, r5
 8001fde:	f000 8092 	beq.w	8002106 <HAL_GPIO_Init+0x1ca>
 8001fe2:	4d5a      	ldr	r5, [pc, #360]	; (800214c <HAL_GPIO_Init+0x210>)
 8001fe4:	42a8      	cmp	r0, r5
 8001fe6:	f000 8095 	beq.w	8002114 <HAL_GPIO_Init+0x1d8>
 8001fea:	4d59      	ldr	r5, [pc, #356]	; (8002150 <HAL_GPIO_Init+0x214>)
 8001fec:	42a8      	cmp	r0, r5
 8001fee:	f000 8098 	beq.w	8002122 <HAL_GPIO_Init+0x1e6>
 8001ff2:	4d58      	ldr	r5, [pc, #352]	; (8002154 <HAL_GPIO_Init+0x218>)
 8001ff4:	42a8      	cmp	r0, r5
 8001ff6:	f000 809b 	beq.w	8002130 <HAL_GPIO_Init+0x1f4>
 8001ffa:	4d57      	ldr	r5, [pc, #348]	; (8002158 <HAL_GPIO_Init+0x21c>)
 8001ffc:	42a8      	cmp	r0, r5
 8001ffe:	bf0c      	ite	eq
 8002000:	f04f 0e06 	moveq.w	lr, #6
 8002004:	f04f 0e07 	movne.w	lr, #7
 8002008:	fa0e f707 	lsl.w	r7, lr, r7
 800200c:	ea48 0807 	orr.w	r8, r8, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002010:	f8c1 8008 	str.w	r8, [r1, #8]
        temp = EXTI->RTSR;
 8002014:	68b1      	ldr	r1, [r6, #8]
        temp &= ~((uint32_t)iocurrent);
 8002016:	ea6f 070b 	mvn.w	r7, fp
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800201a:	f41c 1f80 	tst.w	ip, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 800201e:	bf0c      	ite	eq
 8002020:	4039      	andeq	r1, r7
        {
          temp |= iocurrent;
 8002022:	ea4b 0101 	orrne.w	r1, fp, r1
        }
        EXTI->RTSR = temp;
 8002026:	60b1      	str	r1, [r6, #8]

        temp = EXTI->FTSR;
 8002028:	68f5      	ldr	r5, [r6, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800202a:	f41c 1f00 	tst.w	ip, #2097152	; 0x200000
        temp &= ~((uint32_t)iocurrent);
 800202e:	bf0c      	ite	eq
 8002030:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8002032:	ea4b 0505 	orrne.w	r5, fp, r5
        }
        EXTI->FTSR = temp;
 8002036:	60f5      	str	r5, [r6, #12]

        temp = EXTI->EMR;
 8002038:	6875      	ldr	r5, [r6, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800203a:	f41c 3f00 	tst.w	ip, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 800203e:	bf0c      	ite	eq
 8002040:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8002042:	ea4b 0505 	orrne.w	r5, fp, r5
        }
        EXTI->EMR = temp;
 8002046:	6075      	str	r5, [r6, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002048:	6831      	ldr	r1, [r6, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800204a:	f41c 3f80 	tst.w	ip, #65536	; 0x10000
  for(position = 0U; position < GPIO_NUMBER; position++)
 800204e:	f103 0301 	add.w	r3, r3, #1
        temp &= ~((uint32_t)iocurrent);
 8002052:	bf0c      	ite	eq
 8002054:	4039      	andeq	r1, r7
        {
          temp |= iocurrent;
 8002056:	ea4b 0101 	orrne.w	r1, fp, r1
  for(position = 0U; position < GPIO_NUMBER; position++)
 800205a:	2b10      	cmp	r3, #16
        }
        EXTI->IMR = temp;
 800205c:	6031      	str	r1, [r6, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800205e:	f102 0202 	add.w	r2, r2, #2
 8002062:	f47f af7c 	bne.w	8001f5e <HAL_GPIO_Init+0x22>
      }
    }
  }
}
 8002066:	b005      	add	sp, #20
 8002068:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= (GPIO_Init->Speed << (position * 2U));
 800206c:	f8d9 500c 	ldr.w	r5, [r9, #12]
        temp = GPIOx->OSPEEDR; 
 8002070:	6887      	ldr	r7, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002072:	fa05 f802 	lsl.w	r8, r5, r2
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002076:	2503      	movs	r5, #3
 8002078:	fa05 fe02 	lsl.w	lr, r5, r2
 800207c:	ea27 070e 	bic.w	r7, r7, lr
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002080:	ea48 0707 	orr.w	r7, r8, r7
        GPIOx->OSPEEDR = temp;
 8002084:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8002086:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002088:	ea6f 050e 	mvn.w	r5, lr
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800208c:	ea27 0e0b 	bic.w	lr, r7, fp
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002090:	f3cc 1700 	ubfx	r7, ip, #4, #1
 8002094:	409f      	lsls	r7, r3
 8002096:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 800209a:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 800209c:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800209e:	ea07 0e05 	and.w	lr, r7, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020a2:	f8d9 7008 	ldr.w	r7, [r9, #8]
 80020a6:	4097      	lsls	r7, r2
 80020a8:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020ac:	2902      	cmp	r1, #2
        GPIOx->PUPDR = temp;
 80020ae:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020b0:	fa01 f102 	lsl.w	r1, r1, r2
 80020b4:	f47f af65 	bne.w	8001f82 <HAL_GPIO_Init+0x46>
        temp = GPIOx->AFR[position >> 3U];
 80020b8:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 80020bc:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80020c0:	f003 0807 	and.w	r8, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 80020c4:	f8de 7020 	ldr.w	r7, [lr, #32]
 80020c8:	9700      	str	r7, [sp, #0]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80020ca:	f8d9 7010 	ldr.w	r7, [r9, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80020ce:	ea4f 0888 	mov.w	r8, r8, lsl #2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80020d2:	fa07 f708 	lsl.w	r7, r7, r8
 80020d6:	9701      	str	r7, [sp, #4]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80020d8:	270f      	movs	r7, #15
 80020da:	fa07 f808 	lsl.w	r8, r7, r8
 80020de:	9f00      	ldr	r7, [sp, #0]
 80020e0:	ea27 0808 	bic.w	r8, r7, r8
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80020e4:	9f01      	ldr	r7, [sp, #4]
 80020e6:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->AFR[position >> 3U] = temp;
 80020ea:	f8ce 7020 	str.w	r7, [lr, #32]
 80020ee:	e748      	b.n	8001f82 <HAL_GPIO_Init+0x46>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80020f0:	2503      	movs	r5, #3
 80020f2:	4095      	lsls	r5, r2
 80020f4:	43ed      	mvns	r5, r5
 80020f6:	e7d1      	b.n	800209c <HAL_GPIO_Init+0x160>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80020f8:	f04f 0e01 	mov.w	lr, #1
 80020fc:	fa0e f707 	lsl.w	r7, lr, r7
 8002100:	ea48 0807 	orr.w	r8, r8, r7
 8002104:	e784      	b.n	8002010 <HAL_GPIO_Init+0xd4>
 8002106:	f04f 0e02 	mov.w	lr, #2
 800210a:	fa0e f707 	lsl.w	r7, lr, r7
 800210e:	ea48 0807 	orr.w	r8, r8, r7
 8002112:	e77d      	b.n	8002010 <HAL_GPIO_Init+0xd4>
 8002114:	f04f 0e03 	mov.w	lr, #3
 8002118:	fa0e f707 	lsl.w	r7, lr, r7
 800211c:	ea48 0807 	orr.w	r8, r8, r7
 8002120:	e776      	b.n	8002010 <HAL_GPIO_Init+0xd4>
 8002122:	f04f 0e04 	mov.w	lr, #4
 8002126:	fa0e f707 	lsl.w	r7, lr, r7
 800212a:	ea48 0807 	orr.w	r8, r8, r7
 800212e:	e76f      	b.n	8002010 <HAL_GPIO_Init+0xd4>
 8002130:	f04f 0e05 	mov.w	lr, #5
 8002134:	fa0e f707 	lsl.w	r7, lr, r7
 8002138:	ea48 0807 	orr.w	r8, r8, r7
 800213c:	e768      	b.n	8002010 <HAL_GPIO_Init+0xd4>
 800213e:	bf00      	nop
 8002140:	40013c00 	.word	0x40013c00
 8002144:	40020000 	.word	0x40020000
 8002148:	40020800 	.word	0x40020800
 800214c:	40020c00 	.word	0x40020c00
 8002150:	40021000 	.word	0x40021000
 8002154:	40021400 	.word	0x40021400
 8002158:	40021800 	.word	0x40021800
 800215c:	40023800 	.word	0x40023800

08002160 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002160:	6903      	ldr	r3, [r0, #16]
 8002162:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8002164:	bf14      	ite	ne
 8002166:	2001      	movne	r0, #1
 8002168:	2000      	moveq	r0, #0
 800216a:	4770      	bx	lr

0800216c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800216c:	b902      	cbnz	r2, 8002170 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800216e:	0409      	lsls	r1, r1, #16
 8002170:	6181      	str	r1, [r0, #24]
  }
}
 8002172:	4770      	bx	lr

08002174 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002178:	6804      	ldr	r4, [r0, #0]
{
 800217a:	b083      	sub	sp, #12
 800217c:	4698      	mov	r8, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800217e:	6823      	ldr	r3, [r4, #0]
{
 8002180:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 8002184:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002188:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 800218c:	4606      	mov	r6, r0
 800218e:	468a      	mov	sl, r1
 8002190:	4617      	mov	r7, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002192:	6023      	str	r3, [r4, #0]
  * @param  Status The new Flag status (SET or RESET).
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
 8002194:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 8002198:	d135      	bne.n	8002206 <I2C_RequestMemoryWrite+0x92>
{
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800219a:	6965      	ldr	r5, [r4, #20]
 800219c:	07e8      	lsls	r0, r5, #31
 800219e:	d5fc      	bpl.n	800219a <I2C_RequestMemoryWrite+0x26>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80021a0:	f00a 01fe 	and.w	r1, sl, #254	; 0xfe
 80021a4:	6121      	str	r1, [r4, #16]
  * @param  Flag specifies the I2C flag to check.
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
 80021a6:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 80021aa:	d003      	beq.n	80021b4 <I2C_RequestMemoryWrite+0x40>
 80021ac:	e04e      	b.n	800224c <I2C_RequestMemoryWrite+0xd8>
{
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80021ae:	6961      	ldr	r1, [r4, #20]
 80021b0:	054d      	lsls	r5, r1, #21
 80021b2:	d45c      	bmi.n	800226e <I2C_RequestMemoryWrite+0xfa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80021b4:	6961      	ldr	r1, [r4, #20]
 80021b6:	078b      	lsls	r3, r1, #30
 80021b8:	d5f9      	bpl.n	80021ae <I2C_RequestMemoryWrite+0x3a>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021ba:	2300      	movs	r3, #0
 80021bc:	9301      	str	r3, [sp, #4]
 80021be:	6963      	ldr	r3, [r4, #20]
 80021c0:	9301      	str	r3, [sp, #4]
 80021c2:	69a3      	ldr	r3, [r4, #24]
 80021c4:	9301      	str	r3, [sp, #4]
 80021c6:	9b01      	ldr	r3, [sp, #4]
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80021c8:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 80021cc:	f040 8087 	bne.w	80022de <I2C_RequestMemoryWrite+0x16a>
 80021d0:	6963      	ldr	r3, [r4, #20]
 80021d2:	061a      	lsls	r2, r3, #24
 80021d4:	d463      	bmi.n	800229e <I2C_RequestMemoryWrite+0x12a>
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80021d6:	6963      	ldr	r3, [r4, #20]
 80021d8:	055b      	lsls	r3, r3, #21
 80021da:	d5f9      	bpl.n	80021d0 <I2C_RequestMemoryWrite+0x5c>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

    hi2c->PreviousState       = I2C_STATE_NONE;
 80021dc:	2200      	movs	r2, #0
    hi2c->State               = HAL_I2C_STATE_READY;
 80021de:	2320      	movs	r3, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021e0:	f46f 6180 	mvn.w	r1, #1024	; 0x400
 80021e4:	6161      	str	r1, [r4, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 80021e6:	6332      	str	r2, [r6, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80021e8:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021ec:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80021f0:	6c33      	ldr	r3, [r6, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021f2:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80021f6:	f043 0304 	orr.w	r3, r3, #4
 80021fa:	6433      	str	r3, [r6, #64]	; 0x40
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021fc:	6c33      	ldr	r3, [r6, #64]	; 0x40
 80021fe:	2b04      	cmp	r3, #4
 8002200:	d066      	beq.n	80022d0 <I2C_RequestMemoryWrite+0x15c>
    return HAL_ERROR;
 8002202:	2001      	movs	r0, #1
 8002204:	e01f      	b.n	8002246 <I2C_RequestMemoryWrite+0xd2>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002206:	6963      	ldr	r3, [r4, #20]
 8002208:	07d9      	lsls	r1, r3, #31
 800220a:	d4c9      	bmi.n	80021a0 <I2C_RequestMemoryWrite+0x2c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800220c:	f7ff fdac 	bl	8001d68 <HAL_GetTick>
 8002210:	eba0 000b 	sub.w	r0, r0, fp
 8002214:	4581      	cmp	r9, r0
 8002216:	d304      	bcc.n	8002222 <I2C_RequestMemoryWrite+0xae>
 8002218:	f1b9 0f00 	cmp.w	r9, #0
 800221c:	d001      	beq.n	8002222 <I2C_RequestMemoryWrite+0xae>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800221e:	6834      	ldr	r4, [r6, #0]
 8002220:	e7b8      	b.n	8002194 <I2C_RequestMemoryWrite+0x20>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002222:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8002224:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002226:	6333      	str	r3, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002228:	f886 203d 	strb.w	r2, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800222c:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002230:	6c32      	ldr	r2, [r6, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002232:	6831      	ldr	r1, [r6, #0]
        __HAL_UNLOCK(hi2c);
 8002234:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002238:	f042 0220 	orr.w	r2, r2, #32
 800223c:	6432      	str	r2, [r6, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800223e:	680b      	ldr	r3, [r1, #0]
 8002240:	05dc      	lsls	r4, r3, #23
 8002242:	d435      	bmi.n	80022b0 <I2C_RequestMemoryWrite+0x13c>
    return HAL_TIMEOUT;
 8002244:	2003      	movs	r0, #3
}
 8002246:	b003      	add	sp, #12
 8002248:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800224c:	6963      	ldr	r3, [r4, #20]
 800224e:	0798      	lsls	r0, r3, #30
 8002250:	d4b3      	bmi.n	80021ba <I2C_RequestMemoryWrite+0x46>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002252:	6963      	ldr	r3, [r4, #20]
 8002254:	055a      	lsls	r2, r3, #21
 8002256:	d40a      	bmi.n	800226e <I2C_RequestMemoryWrite+0xfa>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002258:	f7ff fd86 	bl	8001d68 <HAL_GetTick>
 800225c:	eba0 000b 	sub.w	r0, r0, fp
 8002260:	4581      	cmp	r9, r0
 8002262:	d34e      	bcc.n	8002302 <I2C_RequestMemoryWrite+0x18e>
 8002264:	f1b9 0f00 	cmp.w	r9, #0
 8002268:	d04b      	beq.n	8002302 <I2C_RequestMemoryWrite+0x18e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800226a:	6834      	ldr	r4, [r6, #0]
 800226c:	e79b      	b.n	80021a6 <I2C_RequestMemoryWrite+0x32>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800226e:	6823      	ldr	r3, [r4, #0]
 8002270:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002274:	6023      	str	r3, [r4, #0]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002276:	2200      	movs	r2, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002278:	f46f 6180 	mvn.w	r1, #1024	; 0x400
      hi2c->State               = HAL_I2C_STATE_READY;
 800227c:	2320      	movs	r3, #32
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800227e:	6161      	str	r1, [r4, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002280:	6332      	str	r2, [r6, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002282:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002286:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800228a:	6c33      	ldr	r3, [r6, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 800228c:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002290:	f043 0304 	orr.w	r3, r3, #4
    return HAL_ERROR;
 8002294:	2001      	movs	r0, #1
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002296:	6433      	str	r3, [r6, #64]	; 0x40
}
 8002298:	b003      	add	sp, #12
 800229a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800229e:	f1b8 0f01 	cmp.w	r8, #1
 80022a2:	d109      	bne.n	80022b8 <I2C_RequestMemoryWrite+0x144>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80022a4:	b2ff      	uxtb	r7, r7
  return HAL_OK;
 80022a6:	2000      	movs	r0, #0
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80022a8:	6127      	str	r7, [r4, #16]
}
 80022aa:	b003      	add	sp, #12
 80022ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80022b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022b4:	6433      	str	r3, [r6, #64]	; 0x40
 80022b6:	e7c5      	b.n	8002244 <I2C_RequestMemoryWrite+0xd0>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80022b8:	0a3b      	lsrs	r3, r7, #8
 80022ba:	6123      	str	r3, [r4, #16]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80022bc:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 80022c0:	d12e      	bne.n	8002320 <I2C_RequestMemoryWrite+0x1ac>
 80022c2:	6963      	ldr	r3, [r4, #20]
 80022c4:	0619      	lsls	r1, r3, #24
 80022c6:	d4ed      	bmi.n	80022a4 <I2C_RequestMemoryWrite+0x130>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80022c8:	6963      	ldr	r3, [r4, #20]
 80022ca:	055a      	lsls	r2, r3, #21
 80022cc:	d5f9      	bpl.n	80022c2 <I2C_RequestMemoryWrite+0x14e>
 80022ce:	e785      	b.n	80021dc <I2C_RequestMemoryWrite+0x68>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022d0:	6832      	ldr	r2, [r6, #0]
 80022d2:	6813      	ldr	r3, [r2, #0]
 80022d4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
      return HAL_ERROR;
 80022d8:	2001      	movs	r0, #1
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022da:	6013      	str	r3, [r2, #0]
 80022dc:	e7b3      	b.n	8002246 <I2C_RequestMemoryWrite+0xd2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80022de:	6963      	ldr	r3, [r4, #20]
 80022e0:	061d      	lsls	r5, r3, #24
 80022e2:	d4dc      	bmi.n	800229e <I2C_RequestMemoryWrite+0x12a>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80022e4:	6963      	ldr	r3, [r4, #20]
 80022e6:	0559      	lsls	r1, r3, #21
 80022e8:	f53f af78 	bmi.w	80021dc <I2C_RequestMemoryWrite+0x68>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022ec:	f7ff fd3c 	bl	8001d68 <HAL_GetTick>
 80022f0:	eba0 000b 	sub.w	r0, r0, fp
 80022f4:	4581      	cmp	r9, r0
 80022f6:	d325      	bcc.n	8002344 <I2C_RequestMemoryWrite+0x1d0>
 80022f8:	f1b9 0f00 	cmp.w	r9, #0
 80022fc:	d022      	beq.n	8002344 <I2C_RequestMemoryWrite+0x1d0>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80022fe:	6834      	ldr	r4, [r6, #0]
 8002300:	e762      	b.n	80021c8 <I2C_RequestMemoryWrite+0x54>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002302:	2200      	movs	r2, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8002304:	2320      	movs	r3, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002306:	6332      	str	r2, [r6, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002308:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800230c:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002310:	6c33      	ldr	r3, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002312:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002316:	f043 0320 	orr.w	r3, r3, #32
 800231a:	6433      	str	r3, [r6, #64]	; 0x40
    return HAL_ERROR;
 800231c:	2001      	movs	r0, #1
 800231e:	e792      	b.n	8002246 <I2C_RequestMemoryWrite+0xd2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002320:	6963      	ldr	r3, [r4, #20]
 8002322:	061b      	lsls	r3, r3, #24
 8002324:	d4be      	bmi.n	80022a4 <I2C_RequestMemoryWrite+0x130>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002326:	6963      	ldr	r3, [r4, #20]
 8002328:	0558      	lsls	r0, r3, #21
 800232a:	f53f af57 	bmi.w	80021dc <I2C_RequestMemoryWrite+0x68>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800232e:	f7ff fd1b 	bl	8001d68 <HAL_GetTick>
 8002332:	eba0 000b 	sub.w	r0, r0, fp
 8002336:	4581      	cmp	r9, r0
 8002338:	d304      	bcc.n	8002344 <I2C_RequestMemoryWrite+0x1d0>
 800233a:	f1b9 0f00 	cmp.w	r9, #0
 800233e:	d001      	beq.n	8002344 <I2C_RequestMemoryWrite+0x1d0>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002340:	6834      	ldr	r4, [r6, #0]
 8002342:	e7bb      	b.n	80022bc <I2C_RequestMemoryWrite+0x148>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002344:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8002346:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002348:	6332      	str	r2, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800234a:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800234e:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002352:	6c33      	ldr	r3, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002354:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002358:	f043 0320 	orr.w	r3, r3, #32
 800235c:	6433      	str	r3, [r6, #64]	; 0x40
        return HAL_ERROR;
 800235e:	e74d      	b.n	80021fc <I2C_RequestMemoryWrite+0x88>

08002360 <I2C_RequestMemoryRead>:
{
 8002360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002364:	6804      	ldr	r4, [r0, #0]
{
 8002366:	4698      	mov	r8, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002368:	6823      	ldr	r3, [r4, #0]
 800236a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800236e:	6023      	str	r3, [r4, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002370:	6823      	ldr	r3, [r4, #0]
{
 8002372:	b083      	sub	sp, #12
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002374:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 8002378:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800237c:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002380:	6023      	str	r3, [r4, #0]
{
 8002382:	4606      	mov	r6, r0
 8002384:	468b      	mov	fp, r1
 8002386:	4617      	mov	r7, r2
 8002388:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 800238c:	d139      	bne.n	8002402 <I2C_RequestMemoryRead+0xa2>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800238e:	6965      	ldr	r5, [r4, #20]
 8002390:	07eb      	lsls	r3, r5, #31
 8002392:	d5fc      	bpl.n	800238e <I2C_RequestMemoryRead+0x2e>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002394:	f00b 03fe 	and.w	r3, fp, #254	; 0xfe
 8002398:	6123      	str	r3, [r4, #16]
 800239a:	fa5f fb8b 	uxtb.w	fp, fp
 800239e:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 80023a2:	d003      	beq.n	80023ac <I2C_RequestMemoryRead+0x4c>
 80023a4:	e068      	b.n	8002478 <I2C_RequestMemoryRead+0x118>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80023a6:	6961      	ldr	r1, [r4, #20]
 80023a8:	054a      	lsls	r2, r1, #21
 80023aa:	d450      	bmi.n	800244e <I2C_RequestMemoryRead+0xee>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80023ac:	6961      	ldr	r1, [r4, #20]
 80023ae:	0789      	lsls	r1, r1, #30
 80023b0:	d5f9      	bpl.n	80023a6 <I2C_RequestMemoryRead+0x46>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023b2:	2300      	movs	r3, #0
 80023b4:	9301      	str	r3, [sp, #4]
 80023b6:	6963      	ldr	r3, [r4, #20]
 80023b8:	9301      	str	r3, [sp, #4]
 80023ba:	69a3      	ldr	r3, [r4, #24]
 80023bc:	9301      	str	r3, [sp, #4]
 80023be:	9b01      	ldr	r3, [sp, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80023c0:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 80023c4:	f040 80b8 	bne.w	8002538 <I2C_RequestMemoryRead+0x1d8>
 80023c8:	6963      	ldr	r3, [r4, #20]
 80023ca:	0618      	lsls	r0, r3, #24
 80023cc:	d467      	bmi.n	800249e <I2C_RequestMemoryRead+0x13e>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80023ce:	6963      	ldr	r3, [r4, #20]
 80023d0:	0559      	lsls	r1, r3, #21
 80023d2:	d5f9      	bpl.n	80023c8 <I2C_RequestMemoryRead+0x68>
    hi2c->PreviousState       = I2C_STATE_NONE;
 80023d4:	2200      	movs	r2, #0
    hi2c->State               = HAL_I2C_STATE_READY;
 80023d6:	2320      	movs	r3, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023d8:	f46f 6180 	mvn.w	r1, #1024	; 0x400
 80023dc:	6161      	str	r1, [r4, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 80023de:	6332      	str	r2, [r6, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80023e0:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023e4:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80023e8:	6c33      	ldr	r3, [r6, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 80023ea:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80023ee:	f043 0304 	orr.w	r3, r3, #4
 80023f2:	6433      	str	r3, [r6, #64]	; 0x40
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023f4:	6c33      	ldr	r3, [r6, #64]	; 0x40
 80023f6:	2b04      	cmp	r3, #4
 80023f8:	d06c      	beq.n	80024d4 <I2C_RequestMemoryRead+0x174>
    return HAL_ERROR;
 80023fa:	2001      	movs	r0, #1
}
 80023fc:	b003      	add	sp, #12
 80023fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002402:	6963      	ldr	r3, [r4, #20]
 8002404:	07dd      	lsls	r5, r3, #31
 8002406:	d4c5      	bmi.n	8002394 <I2C_RequestMemoryRead+0x34>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002408:	f7ff fcae 	bl	8001d68 <HAL_GetTick>
 800240c:	eba0 0009 	sub.w	r0, r0, r9
 8002410:	4582      	cmp	sl, r0
 8002412:	d304      	bcc.n	800241e <I2C_RequestMemoryRead+0xbe>
 8002414:	f1ba 0f00 	cmp.w	sl, #0
 8002418:	d001      	beq.n	800241e <I2C_RequestMemoryRead+0xbe>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800241a:	6834      	ldr	r4, [r6, #0]
 800241c:	e7b4      	b.n	8002388 <I2C_RequestMemoryRead+0x28>
        hi2c->PreviousState     = I2C_STATE_NONE;
 800241e:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8002420:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002422:	6333      	str	r3, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002424:	f886 203d 	strb.w	r2, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002428:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800242c:	6c32      	ldr	r2, [r6, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800242e:	6831      	ldr	r1, [r6, #0]
        __HAL_UNLOCK(hi2c);
 8002430:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002434:	f042 0220 	orr.w	r2, r2, #32
 8002438:	6432      	str	r2, [r6, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800243a:	680b      	ldr	r3, [r1, #0]
 800243c:	05dc      	lsls	r4, r3, #23
 800243e:	d502      	bpl.n	8002446 <I2C_RequestMemoryRead+0xe6>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002440:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002444:	6433      	str	r3, [r6, #64]	; 0x40
    return HAL_TIMEOUT;
 8002446:	2003      	movs	r0, #3
}
 8002448:	b003      	add	sp, #12
 800244a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800244e:	6823      	ldr	r3, [r4, #0]
 8002450:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002454:	6023      	str	r3, [r4, #0]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002456:	2200      	movs	r2, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 8002458:	2320      	movs	r3, #32
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800245a:	f46f 6180 	mvn.w	r1, #1024	; 0x400
 800245e:	6161      	str	r1, [r4, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002460:	6332      	str	r2, [r6, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002462:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002466:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800246a:	6c33      	ldr	r3, [r6, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 800246c:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002470:	f043 0304 	orr.w	r3, r3, #4
 8002474:	6433      	str	r3, [r6, #64]	; 0x40
 8002476:	e7c0      	b.n	80023fa <I2C_RequestMemoryRead+0x9a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002478:	6963      	ldr	r3, [r4, #20]
 800247a:	079b      	lsls	r3, r3, #30
 800247c:	d499      	bmi.n	80023b2 <I2C_RequestMemoryRead+0x52>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800247e:	6963      	ldr	r3, [r4, #20]
 8002480:	0558      	lsls	r0, r3, #21
 8002482:	d4e4      	bmi.n	800244e <I2C_RequestMemoryRead+0xee>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002484:	f7ff fc70 	bl	8001d68 <HAL_GetTick>
 8002488:	eba0 0009 	sub.w	r0, r0, r9
 800248c:	4582      	cmp	sl, r0
 800248e:	f0c0 808b 	bcc.w	80025a8 <I2C_RequestMemoryRead+0x248>
 8002492:	f1ba 0f00 	cmp.w	sl, #0
 8002496:	f000 8087 	beq.w	80025a8 <I2C_RequestMemoryRead+0x248>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800249a:	6834      	ldr	r4, [r6, #0]
 800249c:	e77f      	b.n	800239e <I2C_RequestMemoryRead+0x3e>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800249e:	f1b8 0f01 	cmp.w	r8, #1
 80024a2:	d10b      	bne.n	80024bc <I2C_RequestMemoryRead+0x15c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80024a4:	b2ff      	uxtb	r7, r7
 80024a6:	6127      	str	r7, [r4, #16]
 80024a8:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 80024ac:	d16a      	bne.n	8002584 <I2C_RequestMemoryRead+0x224>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80024ae:	6963      	ldr	r3, [r4, #20]
 80024b0:	061b      	lsls	r3, r3, #24
 80024b2:	d416      	bmi.n	80024e2 <I2C_RequestMemoryRead+0x182>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80024b4:	6963      	ldr	r3, [r4, #20]
 80024b6:	055f      	lsls	r7, r3, #21
 80024b8:	d5f9      	bpl.n	80024ae <I2C_RequestMemoryRead+0x14e>
 80024ba:	e78b      	b.n	80023d4 <I2C_RequestMemoryRead+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80024bc:	0a3b      	lsrs	r3, r7, #8
 80024be:	6123      	str	r3, [r4, #16]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80024c0:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 80024c4:	d17f      	bne.n	80025c6 <I2C_RequestMemoryRead+0x266>
 80024c6:	6963      	ldr	r3, [r4, #20]
 80024c8:	061d      	lsls	r5, r3, #24
 80024ca:	d4eb      	bmi.n	80024a4 <I2C_RequestMemoryRead+0x144>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80024cc:	6963      	ldr	r3, [r4, #20]
 80024ce:	0558      	lsls	r0, r3, #21
 80024d0:	d5f9      	bpl.n	80024c6 <I2C_RequestMemoryRead+0x166>
 80024d2:	e77f      	b.n	80023d4 <I2C_RequestMemoryRead+0x74>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024d4:	6832      	ldr	r2, [r6, #0]
 80024d6:	6813      	ldr	r3, [r2, #0]
 80024d8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    return HAL_ERROR;
 80024dc:	2001      	movs	r0, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024de:	6013      	str	r3, [r2, #0]
 80024e0:	e78c      	b.n	80023fc <I2C_RequestMemoryRead+0x9c>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80024e2:	6823      	ldr	r3, [r4, #0]
 80024e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024e8:	6023      	str	r3, [r4, #0]
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
 80024ea:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 80024ee:	d113      	bne.n	8002518 <I2C_RequestMemoryRead+0x1b8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80024f0:	6963      	ldr	r3, [r4, #20]
 80024f2:	07d8      	lsls	r0, r3, #31
 80024f4:	d5fc      	bpl.n	80024f0 <I2C_RequestMemoryRead+0x190>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80024f6:	f04b 0301 	orr.w	r3, fp, #1
 80024fa:	6123      	str	r3, [r4, #16]
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
 80024fc:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 8002500:	d003      	beq.n	800250a <I2C_RequestMemoryRead+0x1aa>
 8002502:	e02b      	b.n	800255c <I2C_RequestMemoryRead+0x1fc>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002504:	6963      	ldr	r3, [r4, #20]
 8002506:	055b      	lsls	r3, r3, #21
 8002508:	d4a1      	bmi.n	800244e <I2C_RequestMemoryRead+0xee>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800250a:	6963      	ldr	r3, [r4, #20]
 800250c:	43db      	mvns	r3, r3
 800250e:	f013 0302 	ands.w	r3, r3, #2
 8002512:	d1f7      	bne.n	8002504 <I2C_RequestMemoryRead+0x1a4>
  return HAL_OK;
 8002514:	4618      	mov	r0, r3
 8002516:	e771      	b.n	80023fc <I2C_RequestMemoryRead+0x9c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002518:	6963      	ldr	r3, [r4, #20]
 800251a:	07d9      	lsls	r1, r3, #31
 800251c:	d4eb      	bmi.n	80024f6 <I2C_RequestMemoryRead+0x196>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800251e:	f7ff fc23 	bl	8001d68 <HAL_GetTick>
 8002522:	eba0 0009 	sub.w	r0, r0, r9
 8002526:	4582      	cmp	sl, r0
 8002528:	f4ff af79 	bcc.w	800241e <I2C_RequestMemoryRead+0xbe>
 800252c:	f1ba 0f00 	cmp.w	sl, #0
 8002530:	f43f af75 	beq.w	800241e <I2C_RequestMemoryRead+0xbe>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002534:	6834      	ldr	r4, [r6, #0]
 8002536:	e7d8      	b.n	80024ea <I2C_RequestMemoryRead+0x18a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002538:	6963      	ldr	r3, [r4, #20]
 800253a:	061a      	lsls	r2, r3, #24
 800253c:	d4af      	bmi.n	800249e <I2C_RequestMemoryRead+0x13e>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800253e:	6963      	ldr	r3, [r4, #20]
 8002540:	055d      	lsls	r5, r3, #21
 8002542:	f53f af47 	bmi.w	80023d4 <I2C_RequestMemoryRead+0x74>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002546:	f7ff fc0f 	bl	8001d68 <HAL_GetTick>
 800254a:	eba0 0009 	sub.w	r0, r0, r9
 800254e:	4582      	cmp	sl, r0
 8002550:	d34c      	bcc.n	80025ec <I2C_RequestMemoryRead+0x28c>
 8002552:	f1ba 0f00 	cmp.w	sl, #0
 8002556:	d049      	beq.n	80025ec <I2C_RequestMemoryRead+0x28c>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002558:	6834      	ldr	r4, [r6, #0]
 800255a:	e731      	b.n	80023c0 <I2C_RequestMemoryRead+0x60>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800255c:	6963      	ldr	r3, [r4, #20]
 800255e:	43db      	mvns	r3, r3
 8002560:	f013 0302 	ands.w	r3, r3, #2
 8002564:	d0d6      	beq.n	8002514 <I2C_RequestMemoryRead+0x1b4>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002566:	6963      	ldr	r3, [r4, #20]
 8002568:	055a      	lsls	r2, r3, #21
 800256a:	f53f af70 	bmi.w	800244e <I2C_RequestMemoryRead+0xee>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800256e:	f7ff fbfb 	bl	8001d68 <HAL_GetTick>
 8002572:	eba0 0009 	sub.w	r0, r0, r9
 8002576:	4582      	cmp	sl, r0
 8002578:	d316      	bcc.n	80025a8 <I2C_RequestMemoryRead+0x248>
 800257a:	f1ba 0f00 	cmp.w	sl, #0
 800257e:	d013      	beq.n	80025a8 <I2C_RequestMemoryRead+0x248>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002580:	6834      	ldr	r4, [r6, #0]
 8002582:	e7bb      	b.n	80024fc <I2C_RequestMemoryRead+0x19c>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002584:	6963      	ldr	r3, [r4, #20]
 8002586:	061d      	lsls	r5, r3, #24
 8002588:	d4ab      	bmi.n	80024e2 <I2C_RequestMemoryRead+0x182>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800258a:	6963      	ldr	r3, [r4, #20]
 800258c:	055a      	lsls	r2, r3, #21
 800258e:	f53f af21 	bmi.w	80023d4 <I2C_RequestMemoryRead+0x74>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002592:	f7ff fbe9 	bl	8001d68 <HAL_GetTick>
 8002596:	eba0 0009 	sub.w	r0, r0, r9
 800259a:	4582      	cmp	sl, r0
 800259c:	d326      	bcc.n	80025ec <I2C_RequestMemoryRead+0x28c>
 800259e:	f1ba 0f00 	cmp.w	sl, #0
 80025a2:	d023      	beq.n	80025ec <I2C_RequestMemoryRead+0x28c>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80025a4:	6834      	ldr	r4, [r6, #0]
 80025a6:	e77f      	b.n	80024a8 <I2C_RequestMemoryRead+0x148>
        hi2c->PreviousState       = I2C_STATE_NONE;
 80025a8:	2200      	movs	r2, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 80025aa:	2320      	movs	r3, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 80025ac:	6332      	str	r2, [r6, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80025ae:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025b2:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80025b6:	6c33      	ldr	r3, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80025b8:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80025bc:	f043 0320 	orr.w	r3, r3, #32
 80025c0:	6433      	str	r3, [r6, #64]	; 0x40
    return HAL_ERROR;
 80025c2:	2001      	movs	r0, #1
 80025c4:	e71a      	b.n	80023fc <I2C_RequestMemoryRead+0x9c>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80025c6:	6963      	ldr	r3, [r4, #20]
 80025c8:	0619      	lsls	r1, r3, #24
 80025ca:	f53f af6b 	bmi.w	80024a4 <I2C_RequestMemoryRead+0x144>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80025ce:	6963      	ldr	r3, [r4, #20]
 80025d0:	055b      	lsls	r3, r3, #21
 80025d2:	f53f aeff 	bmi.w	80023d4 <I2C_RequestMemoryRead+0x74>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025d6:	f7ff fbc7 	bl	8001d68 <HAL_GetTick>
 80025da:	eba0 0009 	sub.w	r0, r0, r9
 80025de:	4582      	cmp	sl, r0
 80025e0:	d304      	bcc.n	80025ec <I2C_RequestMemoryRead+0x28c>
 80025e2:	f1ba 0f00 	cmp.w	sl, #0
 80025e6:	d001      	beq.n	80025ec <I2C_RequestMemoryRead+0x28c>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80025e8:	6834      	ldr	r4, [r6, #0]
 80025ea:	e769      	b.n	80024c0 <I2C_RequestMemoryRead+0x160>
        hi2c->PreviousState     = I2C_STATE_NONE;
 80025ec:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 80025ee:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80025f0:	6332      	str	r2, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80025f2:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80025f6:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80025fa:	6c33      	ldr	r3, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80025fc:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002600:	f043 0320 	orr.w	r3, r3, #32
 8002604:	6433      	str	r3, [r6, #64]	; 0x40
        return HAL_ERROR;
 8002606:	e6f5      	b.n	80023f4 <I2C_RequestMemoryRead+0x94>

08002608 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8002608:	2800      	cmp	r0, #0
 800260a:	f000 80b9 	beq.w	8002780 <HAL_I2C_Init+0x178>
{
 800260e:	b570      	push	{r4, r5, r6, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002610:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002614:	4604      	mov	r4, r0
 8002616:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800261a:	2b00      	cmp	r3, #0
 800261c:	f000 8098 	beq.w	8002750 <HAL_I2C_Init+0x148>
  __HAL_I2C_DISABLE(hi2c);
 8002620:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002622:	2224      	movs	r2, #36	; 0x24
 8002624:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	f022 0201 	bic.w	r2, r2, #1
 800262e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002636:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800263e:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002640:	f000 fc26 	bl	8002e90 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002644:	6863      	ldr	r3, [r4, #4]
 8002646:	494f      	ldr	r1, [pc, #316]	; (8002784 <HAL_I2C_Init+0x17c>)
 8002648:	428b      	cmp	r3, r1
 800264a:	d84f      	bhi.n	80026ec <HAL_I2C_Init+0xe4>
 800264c:	4a4e      	ldr	r2, [pc, #312]	; (8002788 <HAL_I2C_Init+0x180>)
 800264e:	4290      	cmp	r0, r2
 8002650:	d97c      	bls.n	800274c <HAL_I2C_Init+0x144>
  freqrange = I2C_FREQRANGE(pclk1);
 8002652:	4d4e      	ldr	r5, [pc, #312]	; (800278c <HAL_I2C_Init+0x184>)
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002654:	005a      	lsls	r2, r3, #1
  freqrange = I2C_FREQRANGE(pclk1);
 8002656:	fba5 3500 	umull	r3, r5, r5, r0
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800265a:	1e43      	subs	r3, r0, #1
 800265c:	fbb3 f3f2 	udiv	r3, r3, r2
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002660:	6822      	ldr	r2, [r4, #0]
 8002662:	6850      	ldr	r0, [r2, #4]
 8002664:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
 8002668:	ea40 4095 	orr.w	r0, r0, r5, lsr #18
 800266c:	6050      	str	r0, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 800266e:	0ca9      	lsrs	r1, r5, #18
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002670:	f101 0c01 	add.w	ip, r1, #1
 8002674:	6a11      	ldr	r1, [r2, #32]
 8002676:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 800267a:	ea41 010c 	orr.w	r1, r1, ip
 800267e:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002680:	69d1      	ldr	r1, [r2, #28]
 8002682:	f640 7efc 	movw	lr, #4092	; 0xffc
 8002686:	3301      	adds	r3, #1
 8002688:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 800268c:	ea13 0f0e 	tst.w	r3, lr
 8002690:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8002694:	d161      	bne.n	800275a <HAL_I2C_Init+0x152>
 8002696:	2304      	movs	r3, #4
 8002698:	430b      	orrs	r3, r1
 800269a:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800269c:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 80026a0:	6811      	ldr	r1, [r2, #0]
 80026a2:	4303      	orrs	r3, r0
 80026a4:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 80026a8:	430b      	orrs	r3, r1
 80026aa:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80026ac:	6891      	ldr	r1, [r2, #8]
 80026ae:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 80026b2:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 80026b6:	4303      	orrs	r3, r0
 80026b8:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80026bc:	430b      	orrs	r3, r1
 80026be:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80026c0:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 80026c4:	68d1      	ldr	r1, [r2, #12]
 80026c6:	4303      	orrs	r3, r0
 80026c8:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80026cc:	430b      	orrs	r3, r1
 80026ce:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 80026d0:	6811      	ldr	r1, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026d2:	2300      	movs	r3, #0
  __HAL_I2C_ENABLE(hi2c);
 80026d4:	f041 0101 	orr.w	r1, r1, #1
  hi2c->State = HAL_I2C_STATE_READY;
 80026d8:	2020      	movs	r0, #32
  __HAL_I2C_ENABLE(hi2c);
 80026da:	6011      	str	r1, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026dc:	6423      	str	r3, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80026de:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80026e2:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80026e4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  return HAL_OK;
 80026e8:	4618      	mov	r0, r3
}
 80026ea:	bd70      	pop	{r4, r5, r6, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80026ec:	4a28      	ldr	r2, [pc, #160]	; (8002790 <HAL_I2C_Init+0x188>)
 80026ee:	4290      	cmp	r0, r2
 80026f0:	d92c      	bls.n	800274c <HAL_I2C_Init+0x144>
  freqrange = I2C_FREQRANGE(pclk1);
 80026f2:	4d26      	ldr	r5, [pc, #152]	; (800278c <HAL_I2C_Init+0x184>)
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80026f4:	4e27      	ldr	r6, [pc, #156]	; (8002794 <HAL_I2C_Init+0x18c>)
  freqrange = I2C_FREQRANGE(pclk1);
 80026f6:	fba5 2c00 	umull	r2, ip, r5, r0
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80026fa:	6822      	ldr	r2, [r4, #0]
 80026fc:	6855      	ldr	r5, [r2, #4]
 80026fe:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8002702:	ea45 459c 	orr.w	r5, r5, ip, lsr #18
 8002706:	6055      	str	r5, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8002708:	ea4f 419c 	mov.w	r1, ip, lsr #18
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800270c:	f44f 7596 	mov.w	r5, #300	; 0x12c
 8002710:	fb05 f101 	mul.w	r1, r5, r1
 8002714:	fba6 5101 	umull	r5, r1, r6, r1
 8002718:	6a15      	ldr	r5, [r2, #32]
 800271a:	0989      	lsrs	r1, r1, #6
 800271c:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8002720:	3101      	adds	r1, #1
 8002722:	4329      	orrs	r1, r5
 8002724:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002726:	69d1      	ldr	r1, [r2, #28]
 8002728:	68a5      	ldr	r5, [r4, #8]
 800272a:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 800272e:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8002732:	b9ad      	cbnz	r5, 8002760 <HAL_I2C_Init+0x158>
 8002734:	3801      	subs	r0, #1
 8002736:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800273a:	fbb0 f3f3 	udiv	r3, r0, r3
 800273e:	3301      	adds	r3, #1
 8002740:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002744:	b1d3      	cbz	r3, 800277c <HAL_I2C_Init+0x174>
 8002746:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800274a:	e7a5      	b.n	8002698 <HAL_I2C_Init+0x90>
    return HAL_ERROR;
 800274c:	2001      	movs	r0, #1
}
 800274e:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8002750:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8002754:	f7fe fcac 	bl	80010b0 <HAL_I2C_MspInit>
 8002758:	e762      	b.n	8002620 <HAL_I2C_Init+0x18>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800275a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800275e:	e79b      	b.n	8002698 <HAL_I2C_Init+0x90>
 8002760:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002764:	3801      	subs	r0, #1
 8002766:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800276a:	fbb0 f3f3 	udiv	r3, r0, r3
 800276e:	3301      	adds	r3, #1
 8002770:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002774:	b113      	cbz	r3, 800277c <HAL_I2C_Init+0x174>
 8002776:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800277a:	e78d      	b.n	8002698 <HAL_I2C_Init+0x90>
 800277c:	2301      	movs	r3, #1
 800277e:	e78b      	b.n	8002698 <HAL_I2C_Init+0x90>
    return HAL_ERROR;
 8002780:	2001      	movs	r0, #1
}
 8002782:	4770      	bx	lr
 8002784:	000186a0 	.word	0x000186a0
 8002788:	001e847f 	.word	0x001e847f
 800278c:	431bde83 	.word	0x431bde83
 8002790:	003d08ff 	.word	0x003d08ff
 8002794:	10624dd3 	.word	0x10624dd3

08002798 <HAL_I2C_Mem_Write>:
{
 8002798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800279c:	4604      	mov	r4, r0
 800279e:	b083      	sub	sp, #12
 80027a0:	4699      	mov	r9, r3
 80027a2:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 80027a6:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80027a8:	460f      	mov	r7, r1
 80027aa:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 80027ac:	f7ff fadc 	bl	8001d68 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80027b0:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80027b4:	2b20      	cmp	r3, #32
 80027b6:	d004      	beq.n	80027c2 <HAL_I2C_Mem_Write+0x2a>
      return HAL_BUSY;
 80027b8:	2702      	movs	r7, #2
}
 80027ba:	4638      	mov	r0, r7
 80027bc:	b003      	add	sp, #12
 80027be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80027c2:	4605      	mov	r5, r0
 80027c4:	e005      	b.n	80027d2 <HAL_I2C_Mem_Write+0x3a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027c6:	f7ff facf 	bl	8001d68 <HAL_GetTick>
 80027ca:	1b40      	subs	r0, r0, r5
 80027cc:	2819      	cmp	r0, #25
 80027ce:	f200 80aa 	bhi.w	8002926 <HAL_I2C_Mem_Write+0x18e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80027d2:	6820      	ldr	r0, [r4, #0]
 80027d4:	6983      	ldr	r3, [r0, #24]
 80027d6:	ea6f 0c03 	mvn.w	ip, r3
 80027da:	f01c 0b02 	ands.w	fp, ip, #2
 80027de:	d0f2      	beq.n	80027c6 <HAL_I2C_Mem_Write+0x2e>
    __HAL_LOCK(hi2c);
 80027e0:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d0e7      	beq.n	80027b8 <HAL_I2C_Mem_Write+0x20>
 80027e8:	2301      	movs	r3, #1
 80027ea:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80027ee:	6803      	ldr	r3, [r0, #0]
 80027f0:	07db      	lsls	r3, r3, #31
 80027f2:	d571      	bpl.n	80028d8 <HAL_I2C_Mem_Write+0x140>
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80027f4:	4639      	mov	r1, r7
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80027f6:	6807      	ldr	r7, [r0, #0]
 80027f8:	f427 6700 	bic.w	r7, r7, #2048	; 0x800
 80027fc:	6007      	str	r7, [r0, #0]
    hi2c->pBuffPtr    = pData;
 80027fe:	980c      	ldr	r0, [sp, #48]	; 0x30
 8002800:	6260      	str	r0, [r4, #36]	; 0x24
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002802:	2021      	movs	r0, #33	; 0x21
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002804:	e9cd 6500 	strd	r6, r5, [sp]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002808:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800280c:	2040      	movs	r0, #64	; 0x40
 800280e:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002812:	2000      	movs	r0, #0
 8002814:	6420      	str	r0, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 8002816:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800281a:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 800281c:	8520      	strh	r0, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800281e:	4857      	ldr	r0, [pc, #348]	; (800297c <HAL_I2C_Mem_Write+0x1e4>)
 8002820:	62e0      	str	r0, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002822:	464b      	mov	r3, r9
 8002824:	4642      	mov	r2, r8
 8002826:	4620      	mov	r0, r4
 8002828:	f7ff fca4 	bl	8002174 <I2C_RequestMemoryWrite>
 800282c:	4607      	mov	r7, r0
 800282e:	b9f8      	cbnz	r0, 8002870 <HAL_I2C_Mem_Write+0xd8>
    while (hi2c->XferSize > 0U)
 8002830:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002832:	2b00      	cmp	r3, #0
 8002834:	f000 80a0 	beq.w	8002978 <HAL_I2C_Mem_Write+0x1e0>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002838:	6823      	ldr	r3, [r4, #0]
 800283a:	1c72      	adds	r2, r6, #1
 800283c:	d158      	bne.n	80028f0 <HAL_I2C_Mem_Write+0x158>
 800283e:	695a      	ldr	r2, [r3, #20]
 8002840:	0610      	lsls	r0, r2, #24
 8002842:	d41a      	bmi.n	800287a <HAL_I2C_Mem_Write+0xe2>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002844:	695a      	ldr	r2, [r3, #20]
 8002846:	0551      	lsls	r1, r2, #21
 8002848:	d5f9      	bpl.n	800283e <HAL_I2C_Mem_Write+0xa6>
    hi2c->PreviousState       = I2C_STATE_NONE;
 800284a:	2200      	movs	r2, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800284c:	f46f 6080 	mvn.w	r0, #1024	; 0x400
    hi2c->State               = HAL_I2C_STATE_READY;
 8002850:	2120      	movs	r1, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002852:	6158      	str	r0, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8002854:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002856:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800285a:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800285e:	6c23      	ldr	r3, [r4, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 8002860:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002864:	f043 0304 	orr.w	r3, r3, #4
 8002868:	6423      	str	r3, [r4, #64]	; 0x40
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800286a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800286c:	2b04      	cmp	r3, #4
 800286e:	d038      	beq.n	80028e2 <HAL_I2C_Mem_Write+0x14a>
      return HAL_ERROR;
 8002870:	2701      	movs	r7, #1
}
 8002872:	4638      	mov	r0, r7
 8002874:	b003      	add	sp, #12
 8002876:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800287a:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
      hi2c->XferSize--;
 800287e:	f8b4 e028 	ldrh.w	lr, [r4, #40]	; 0x28
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002882:	4661      	mov	r1, ip
      hi2c->XferSize--;
 8002884:	f10e 30ff 	add.w	r0, lr, #4294967295	; 0xffffffff
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002888:	f811 2b01 	ldrb.w	r2, [r1], #1
 800288c:	611a      	str	r2, [r3, #16]
      hi2c->XferCount--;
 800288e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8002890:	6261      	str	r1, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8002892:	3a01      	subs	r2, #1
 8002894:	b292      	uxth	r2, r2
 8002896:	8562      	strh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002898:	b282      	uxth	r2, r0
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800289a:	6958      	ldr	r0, [r3, #20]
      hi2c->XferSize--;
 800289c:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800289e:	0740      	lsls	r0, r0, #29
 80028a0:	d517      	bpl.n	80028d2 <HAL_I2C_Mem_Write+0x13a>
 80028a2:	b942      	cbnz	r2, 80028b6 <HAL_I2C_Mem_Write+0x11e>
 80028a4:	1c72      	adds	r2, r6, #1
 80028a6:	d159      	bne.n	800295c <HAL_I2C_Mem_Write+0x1c4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80028a8:	695a      	ldr	r2, [r3, #20]
 80028aa:	0750      	lsls	r0, r2, #29
 80028ac:	d449      	bmi.n	8002942 <HAL_I2C_Mem_Write+0x1aa>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80028ae:	695a      	ldr	r2, [r3, #20]
 80028b0:	0551      	lsls	r1, r2, #21
 80028b2:	d5f9      	bpl.n	80028a8 <HAL_I2C_Mem_Write+0x110>
 80028b4:	e7c9      	b.n	800284a <HAL_I2C_Mem_Write+0xb2>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80028b6:	f89c 1001 	ldrb.w	r1, [ip, #1]
 80028ba:	6119      	str	r1, [r3, #16]
        hi2c->pBuffPtr++;
 80028bc:	f10c 0102 	add.w	r1, ip, #2
 80028c0:	6261      	str	r1, [r4, #36]	; 0x24
        hi2c->XferCount--;
 80028c2:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 80028c4:	f1ae 0202 	sub.w	r2, lr, #2
        hi2c->XferCount--;
 80028c8:	3901      	subs	r1, #1
        hi2c->XferSize--;
 80028ca:	b292      	uxth	r2, r2
        hi2c->XferCount--;
 80028cc:	b289      	uxth	r1, r1
        hi2c->XferSize--;
 80028ce:	8522      	strh	r2, [r4, #40]	; 0x28
        hi2c->XferCount--;
 80028d0:	8561      	strh	r1, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80028d2:	2a00      	cmp	r2, #0
 80028d4:	d1b1      	bne.n	800283a <HAL_I2C_Mem_Write+0xa2>
 80028d6:	e7e5      	b.n	80028a4 <HAL_I2C_Mem_Write+0x10c>
      __HAL_I2C_ENABLE(hi2c);
 80028d8:	6803      	ldr	r3, [r0, #0]
 80028da:	f043 0301 	orr.w	r3, r3, #1
 80028de:	6003      	str	r3, [r0, #0]
 80028e0:	e788      	b.n	80027f4 <HAL_I2C_Mem_Write+0x5c>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028e2:	6822      	ldr	r2, [r4, #0]
 80028e4:	6813      	ldr	r3, [r2, #0]
 80028e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
      return HAL_ERROR;
 80028ea:	2701      	movs	r7, #1
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028ec:	6013      	str	r3, [r2, #0]
 80028ee:	e764      	b.n	80027ba <HAL_I2C_Mem_Write+0x22>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80028f0:	695a      	ldr	r2, [r3, #20]
 80028f2:	0612      	lsls	r2, r2, #24
 80028f4:	d4c1      	bmi.n	800287a <HAL_I2C_Mem_Write+0xe2>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80028f6:	695a      	ldr	r2, [r3, #20]
 80028f8:	0551      	lsls	r1, r2, #21
 80028fa:	d4a6      	bmi.n	800284a <HAL_I2C_Mem_Write+0xb2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028fc:	f7ff fa34 	bl	8001d68 <HAL_GetTick>
 8002900:	1b40      	subs	r0, r0, r5
 8002902:	4286      	cmp	r6, r0
 8002904:	d301      	bcc.n	800290a <HAL_I2C_Mem_Write+0x172>
 8002906:	2e00      	cmp	r6, #0
 8002908:	d196      	bne.n	8002838 <HAL_I2C_Mem_Write+0xa0>
        hi2c->PreviousState     = I2C_STATE_NONE;
 800290a:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 800290c:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 800290e:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002910:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002914:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002918:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800291a:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800291e:	f043 0320 	orr.w	r3, r3, #32
 8002922:	6423      	str	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 8002924:	e7a1      	b.n	800286a <HAL_I2C_Mem_Write+0xd2>
        hi2c->State             = HAL_I2C_STATE_READY;
 8002926:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002928:	f8c4 b030 	str.w	fp, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800292c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002930:	f884 b03e 	strb.w	fp, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002934:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002936:	f884 b03c 	strb.w	fp, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800293a:	f043 0320 	orr.w	r3, r3, #32
 800293e:	6423      	str	r3, [r4, #64]	; 0x40
 8002940:	e73a      	b.n	80027b8 <HAL_I2C_Mem_Write+0x20>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002942:	681a      	ldr	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002944:	2100      	movs	r1, #0
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002946:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    hi2c->State = HAL_I2C_STATE_READY;
 800294a:	2020      	movs	r0, #32
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800294c:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800294e:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8002952:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002956:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
    return HAL_OK;
 800295a:	e72e      	b.n	80027ba <HAL_I2C_Mem_Write+0x22>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800295c:	695a      	ldr	r2, [r3, #20]
 800295e:	0752      	lsls	r2, r2, #29
 8002960:	d4ef      	bmi.n	8002942 <HAL_I2C_Mem_Write+0x1aa>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002962:	695a      	ldr	r2, [r3, #20]
 8002964:	0551      	lsls	r1, r2, #21
 8002966:	f53f af70 	bmi.w	800284a <HAL_I2C_Mem_Write+0xb2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800296a:	f7ff f9fd 	bl	8001d68 <HAL_GetTick>
 800296e:	1b40      	subs	r0, r0, r5
 8002970:	4286      	cmp	r6, r0
 8002972:	d3ca      	bcc.n	800290a <HAL_I2C_Mem_Write+0x172>
 8002974:	2e00      	cmp	r6, #0
 8002976:	d0c8      	beq.n	800290a <HAL_I2C_Mem_Write+0x172>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002978:	6823      	ldr	r3, [r4, #0]
 800297a:	e793      	b.n	80028a4 <HAL_I2C_Mem_Write+0x10c>
 800297c:	ffff0000 	.word	0xffff0000

08002980 <HAL_I2C_Mem_Read>:
{
 8002980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002984:	4604      	mov	r4, r0
 8002986:	b087      	sub	sp, #28
 8002988:	4699      	mov	r9, r3
 800298a:	f8bd a044 	ldrh.w	sl, [sp, #68]	; 0x44
 800298e:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8002990:	460f      	mov	r7, r1
 8002992:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 8002994:	f7ff f9e8 	bl	8001d68 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002998:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800299c:	2b20      	cmp	r3, #32
 800299e:	d004      	beq.n	80029aa <HAL_I2C_Mem_Read+0x2a>
      return HAL_BUSY;
 80029a0:	2702      	movs	r7, #2
}
 80029a2:	4638      	mov	r0, r7
 80029a4:	b007      	add	sp, #28
 80029a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80029aa:	4606      	mov	r6, r0
 80029ac:	e005      	b.n	80029ba <HAL_I2C_Mem_Read+0x3a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029ae:	f7ff f9db 	bl	8001d68 <HAL_GetTick>
 80029b2:	1b80      	subs	r0, r0, r6
 80029b4:	2819      	cmp	r0, #25
 80029b6:	f200 80d2 	bhi.w	8002b5e <HAL_I2C_Mem_Read+0x1de>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029ba:	f8d4 c000 	ldr.w	ip, [r4]
 80029be:	f8dc 0018 	ldr.w	r0, [ip, #24]
 80029c2:	43c0      	mvns	r0, r0
 80029c4:	f010 0b02 	ands.w	fp, r0, #2
 80029c8:	d0f1      	beq.n	80029ae <HAL_I2C_Mem_Read+0x2e>
    __HAL_LOCK(hi2c);
 80029ca:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d0e6      	beq.n	80029a0 <HAL_I2C_Mem_Read+0x20>
 80029d2:	2301      	movs	r3, #1
 80029d4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80029d8:	f8dc 3000 	ldr.w	r3, [ip]
 80029dc:	07d9      	lsls	r1, r3, #31
 80029de:	d537      	bpl.n	8002a50 <HAL_I2C_Mem_Read+0xd0>
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80029e0:	f8dc 0000 	ldr.w	r0, [ip]
 80029e4:	f420 6000 	bic.w	r0, r0, #2048	; 0x800
 80029e8:	f8cc 0000 	str.w	r0, [ip]
    hi2c->pBuffPtr    = pData;
 80029ec:	9810      	ldr	r0, [sp, #64]	; 0x40
 80029ee:	6260      	str	r0, [r4, #36]	; 0x24
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80029f0:	2022      	movs	r0, #34	; 0x22
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80029f2:	e9cd 5600 	strd	r5, r6, [sp]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80029f6:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80029fa:	2040      	movs	r0, #64	; 0x40
 80029fc:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a00:	2000      	movs	r0, #0
 8002a02:	6420      	str	r0, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 8002a04:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a08:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 8002a0a:	8520      	strh	r0, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a0c:	4893      	ldr	r0, [pc, #588]	; (8002c5c <HAL_I2C_Mem_Read+0x2dc>)
 8002a0e:	62e0      	str	r0, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002a10:	4639      	mov	r1, r7
 8002a12:	464b      	mov	r3, r9
 8002a14:	4642      	mov	r2, r8
 8002a16:	4620      	mov	r0, r4
 8002a18:	f7ff fca2 	bl	8002360 <I2C_RequestMemoryRead>
 8002a1c:	4607      	mov	r7, r0
 8002a1e:	2800      	cmp	r0, #0
 8002a20:	f040 80ab 	bne.w	8002b7a <HAL_I2C_Mem_Read+0x1fa>
    if (hi2c->XferSize == 0U)
 8002a24:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8002a26:	b9d2      	cbnz	r2, 8002a5e <HAL_I2C_Mem_Read+0xde>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a28:	6823      	ldr	r3, [r4, #0]
 8002a2a:	9002      	str	r0, [sp, #8]
 8002a2c:	695a      	ldr	r2, [r3, #20]
 8002a2e:	9202      	str	r2, [sp, #8]
 8002a30:	699a      	ldr	r2, [r3, #24]
 8002a32:	9202      	str	r2, [sp, #8]
 8002a34:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a3c:	601a      	str	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a3e:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8002a40:	2220      	movs	r2, #32
 8002a42:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8002a46:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a4a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 8002a4e:	e7a8      	b.n	80029a2 <HAL_I2C_Mem_Read+0x22>
      __HAL_I2C_ENABLE(hi2c);
 8002a50:	f8dc 3000 	ldr.w	r3, [ip]
 8002a54:	f043 0301 	orr.w	r3, r3, #1
 8002a58:	f8cc 3000 	str.w	r3, [ip]
 8002a5c:	e7c0      	b.n	80029e0 <HAL_I2C_Mem_Read+0x60>
    else if (hi2c->XferSize == 1U)
 8002a5e:	2a01      	cmp	r2, #1
 8002a60:	f000 812c 	beq.w	8002cbc <HAL_I2C_Mem_Read+0x33c>
    else if (hi2c->XferSize == 2U)
 8002a64:	2a02      	cmp	r2, #2
 8002a66:	f000 80bd 	beq.w	8002be4 <HAL_I2C_Mem_Read+0x264>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a6a:	6823      	ldr	r3, [r4, #0]
 8002a6c:	9005      	str	r0, [sp, #20]
 8002a6e:	6959      	ldr	r1, [r3, #20]
 8002a70:	9105      	str	r1, [sp, #20]
 8002a72:	6999      	ldr	r1, [r3, #24]
 8002a74:	9105      	str	r1, [sp, #20]
 8002a76:	9905      	ldr	r1, [sp, #20]
      if (hi2c->XferSize <= 3U)
 8002a78:	2a03      	cmp	r2, #3
 8002a7a:	d849      	bhi.n	8002b10 <HAL_I2C_Mem_Read+0x190>
        if (hi2c->XferSize == 1U)
 8002a7c:	2a01      	cmp	r2, #1
 8002a7e:	f000 80eb 	beq.w	8002c58 <HAL_I2C_Mem_Read+0x2d8>
        else if (hi2c->XferSize == 2U)
 8002a82:	2a02      	cmp	r2, #2
 8002a84:	f000 8089 	beq.w	8002b9a <HAL_I2C_Mem_Read+0x21a>
 8002a88:	1c69      	adds	r1, r5, #1
 8002a8a:	f040 80bb 	bne.w	8002c04 <HAL_I2C_Mem_Read+0x284>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a8e:	695a      	ldr	r2, [r3, #20]
 8002a90:	0752      	lsls	r2, r2, #29
 8002a92:	d5fc      	bpl.n	8002a8e <HAL_I2C_Mem_Read+0x10e>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a94:	681a      	ldr	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a96:	6a61      	ldr	r1, [r4, #36]	; 0x24
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a9c:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a9e:	691b      	ldr	r3, [r3, #16]
 8002aa0:	700b      	strb	r3, [r1, #0]
          hi2c->XferCount--;
 8002aa2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 8002aa4:	6a61      	ldr	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8002aa6:	8d22      	ldrh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8002aa8:	3b01      	subs	r3, #1
          hi2c->pBuffPtr++;
 8002aaa:	3101      	adds	r1, #1
          hi2c->XferSize--;
 8002aac:	3a01      	subs	r2, #1
          hi2c->XferCount--;
 8002aae:	b29b      	uxth	r3, r3
          hi2c->pBuffPtr++;
 8002ab0:	6261      	str	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8002ab2:	8522      	strh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8002ab4:	8563      	strh	r3, [r4, #42]	; 0x2a
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
 8002ab6:	1c69      	adds	r1, r5, #1
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ab8:	6822      	ldr	r2, [r4, #0]
 8002aba:	f040 80af 	bne.w	8002c1c <HAL_I2C_Mem_Read+0x29c>
 8002abe:	6953      	ldr	r3, [r2, #20]
 8002ac0:	075b      	lsls	r3, r3, #29
 8002ac2:	d5fc      	bpl.n	8002abe <HAL_I2C_Mem_Read+0x13e>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ac4:	6813      	ldr	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ac6:	6a61      	ldr	r1, [r4, #36]	; 0x24
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ac8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002acc:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ace:	6913      	ldr	r3, [r2, #16]
 8002ad0:	700b      	strb	r3, [r1, #0]
          hi2c->XferCount--;
 8002ad2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          hi2c->XferSize--;
 8002ad4:	8d22      	ldrh	r2, [r4, #40]	; 0x28
          hi2c->pBuffPtr++;
 8002ad6:	6a60      	ldr	r0, [r4, #36]	; 0x24
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ad8:	6821      	ldr	r1, [r4, #0]
          hi2c->XferCount--;
 8002ada:	3b01      	subs	r3, #1
 8002adc:	b29b      	uxth	r3, r3
 8002ade:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ae0:	6909      	ldr	r1, [r1, #16]
          hi2c->XferSize--;
 8002ae2:	1e53      	subs	r3, r2, #1
          hi2c->pBuffPtr++;
 8002ae4:	f100 0c01 	add.w	ip, r0, #1
          hi2c->XferSize--;
 8002ae8:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->pBuffPtr++;
 8002aea:	f8c4 c024 	str.w	ip, [r4, #36]	; 0x24
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002aee:	7041      	strb	r1, [r0, #1]
          hi2c->XferSize--;
 8002af0:	8d22      	ldrh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8002af2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 8002af4:	6a61      	ldr	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8002af6:	3a01      	subs	r2, #1
          hi2c->XferCount--;
 8002af8:	3b01      	subs	r3, #1
          hi2c->pBuffPtr++;
 8002afa:	3101      	adds	r1, #1
          hi2c->XferSize--;
 8002afc:	b292      	uxth	r2, r2
          hi2c->XferCount--;
 8002afe:	b29b      	uxth	r3, r3
          hi2c->pBuffPtr++;
 8002b00:	6261      	str	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8002b02:	8522      	strh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8002b04:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002b06:	2a00      	cmp	r2, #0
 8002b08:	d099      	beq.n	8002a3e <HAL_I2C_Mem_Read+0xbe>
      if (hi2c->XferSize <= 3U)
 8002b0a:	2a03      	cmp	r2, #3
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002b0c:	6823      	ldr	r3, [r4, #0]
      if (hi2c->XferSize <= 3U)
 8002b0e:	d9b5      	bls.n	8002a7c <HAL_I2C_Mem_Read+0xfc>
 8002b10:	b95d      	cbnz	r5, 8002b2a <HAL_I2C_Mem_Read+0x1aa>
 8002b12:	e0c5      	b.n	8002ca0 <HAL_I2C_Mem_Read+0x320>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002b14:	695a      	ldr	r2, [r3, #20]
 8002b16:	06d0      	lsls	r0, r2, #27
 8002b18:	f100 80b2 	bmi.w	8002c80 <HAL_I2C_Mem_Read+0x300>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b1c:	f7ff f924 	bl	8001d68 <HAL_GetTick>
 8002b20:	1b80      	subs	r0, r0, r6
 8002b22:	4285      	cmp	r5, r0
 8002b24:	f0c0 8086 	bcc.w	8002c34 <HAL_I2C_Mem_Read+0x2b4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002b28:	6823      	ldr	r3, [r4, #0]
 8002b2a:	695a      	ldr	r2, [r3, #20]
 8002b2c:	0652      	lsls	r2, r2, #25
 8002b2e:	d5f1      	bpl.n	8002b14 <HAL_I2C_Mem_Read+0x194>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b30:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002b32:	691b      	ldr	r3, [r3, #16]
 8002b34:	7013      	strb	r3, [r2, #0]
        hi2c->XferCount--;
 8002b36:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002b38:	6820      	ldr	r0, [r4, #0]
        hi2c->XferSize--;
 8002b3a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
        hi2c->pBuffPtr++;
 8002b3c:	6a61      	ldr	r1, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8002b3e:	3b01      	subs	r3, #1
 8002b40:	b29b      	uxth	r3, r3
 8002b42:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002b44:	6943      	ldr	r3, [r0, #20]
        hi2c->XferSize--;
 8002b46:	3a01      	subs	r2, #1
 8002b48:	b292      	uxth	r2, r2
        hi2c->pBuffPtr++;
 8002b4a:	f101 0c01 	add.w	ip, r1, #1
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002b4e:	075b      	lsls	r3, r3, #29
        hi2c->XferSize--;
 8002b50:	8522      	strh	r2, [r4, #40]	; 0x28
        hi2c->pBuffPtr++;
 8002b52:	f8c4 c024 	str.w	ip, [r4, #36]	; 0x24
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002b56:	d5d6      	bpl.n	8002b06 <HAL_I2C_Mem_Read+0x186>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b58:	6903      	ldr	r3, [r0, #16]
 8002b5a:	704b      	strb	r3, [r1, #1]
 8002b5c:	e036      	b.n	8002bcc <HAL_I2C_Mem_Read+0x24c>
        hi2c->State             = HAL_I2C_STATE_READY;
 8002b5e:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002b60:	f8c4 b030 	str.w	fp, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002b64:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002b68:	f884 b03e 	strb.w	fp, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002b6c:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002b6e:	f884 b03c 	strb.w	fp, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002b72:	f043 0320 	orr.w	r3, r3, #32
 8002b76:	6423      	str	r3, [r4, #64]	; 0x40
 8002b78:	e712      	b.n	80029a0 <HAL_I2C_Mem_Read+0x20>
      return HAL_ERROR;
 8002b7a:	2701      	movs	r7, #1
}
 8002b7c:	4638      	mov	r0, r7
 8002b7e:	b007      	add	sp, #28
 8002b80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b84:	695a      	ldr	r2, [r3, #20]
 8002b86:	0750      	lsls	r0, r2, #29
 8002b88:	d40c      	bmi.n	8002ba4 <HAL_I2C_Mem_Read+0x224>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b8a:	f7ff f8ed 	bl	8001d68 <HAL_GetTick>
 8002b8e:	1b80      	subs	r0, r0, r6
 8002b90:	4285      	cmp	r5, r0
 8002b92:	d34f      	bcc.n	8002c34 <HAL_I2C_Mem_Read+0x2b4>
 8002b94:	2d00      	cmp	r5, #0
 8002b96:	d04d      	beq.n	8002c34 <HAL_I2C_Mem_Read+0x2b4>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b98:	6823      	ldr	r3, [r4, #0]
 8002b9a:	1c69      	adds	r1, r5, #1
 8002b9c:	d1f2      	bne.n	8002b84 <HAL_I2C_Mem_Read+0x204>
 8002b9e:	695a      	ldr	r2, [r3, #20]
 8002ba0:	0752      	lsls	r2, r2, #29
 8002ba2:	d5fc      	bpl.n	8002b9e <HAL_I2C_Mem_Read+0x21e>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002baa:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bac:	691a      	ldr	r2, [r3, #16]
 8002bae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002bb0:	701a      	strb	r2, [r3, #0]
          hi2c->XferCount--;
 8002bb2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 8002bb4:	6a62      	ldr	r2, [r4, #36]	; 0x24
          hi2c->XferCount--;
 8002bb6:	3b01      	subs	r3, #1
 8002bb8:	b29b      	uxth	r3, r3
 8002bba:	8563      	strh	r3, [r4, #42]	; 0x2a
          hi2c->XferSize--;
 8002bbc:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002bbe:	3b01      	subs	r3, #1
 8002bc0:	8523      	strh	r3, [r4, #40]	; 0x28
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bc2:	6823      	ldr	r3, [r4, #0]
          hi2c->pBuffPtr++;
 8002bc4:	1c51      	adds	r1, r2, #1
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bc6:	691b      	ldr	r3, [r3, #16]
          hi2c->pBuffPtr++;
 8002bc8:	6261      	str	r1, [r4, #36]	; 0x24
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bca:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 8002bcc:	6a63      	ldr	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8002bce:	8d22      	ldrh	r2, [r4, #40]	; 0x28
          hi2c->pBuffPtr++;
 8002bd0:	3301      	adds	r3, #1
 8002bd2:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferCount--;
 8002bd4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          hi2c->XferSize--;
 8002bd6:	3a01      	subs	r2, #1
          hi2c->XferCount--;
 8002bd8:	3b01      	subs	r3, #1
          hi2c->XferSize--;
 8002bda:	b292      	uxth	r2, r2
          hi2c->XferCount--;
 8002bdc:	b29b      	uxth	r3, r3
          hi2c->XferSize--;
 8002bde:	8522      	strh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8002be0:	8563      	strh	r3, [r4, #42]	; 0x2a
 8002be2:	e790      	b.n	8002b06 <HAL_I2C_Mem_Read+0x186>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002be4:	6823      	ldr	r3, [r4, #0]
 8002be6:	6819      	ldr	r1, [r3, #0]
 8002be8:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8002bec:	6019      	str	r1, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002bee:	6819      	ldr	r1, [r3, #0]
 8002bf0:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8002bf4:	6019      	str	r1, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bf6:	9004      	str	r0, [sp, #16]
 8002bf8:	6959      	ldr	r1, [r3, #20]
 8002bfa:	9104      	str	r1, [sp, #16]
 8002bfc:	6999      	ldr	r1, [r3, #24]
 8002bfe:	9104      	str	r1, [sp, #16]
 8002c00:	9904      	ldr	r1, [sp, #16]
 8002c02:	e739      	b.n	8002a78 <HAL_I2C_Mem_Read+0xf8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c04:	695a      	ldr	r2, [r3, #20]
 8002c06:	0750      	lsls	r0, r2, #29
 8002c08:	f53f af44 	bmi.w	8002a94 <HAL_I2C_Mem_Read+0x114>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c0c:	f7ff f8ac 	bl	8001d68 <HAL_GetTick>
 8002c10:	1b80      	subs	r0, r0, r6
 8002c12:	4285      	cmp	r5, r0
 8002c14:	d30e      	bcc.n	8002c34 <HAL_I2C_Mem_Read+0x2b4>
 8002c16:	b16d      	cbz	r5, 8002c34 <HAL_I2C_Mem_Read+0x2b4>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c18:	6823      	ldr	r3, [r4, #0]
 8002c1a:	e735      	b.n	8002a88 <HAL_I2C_Mem_Read+0x108>
 8002c1c:	6953      	ldr	r3, [r2, #20]
 8002c1e:	0758      	lsls	r0, r3, #29
 8002c20:	f53f af50 	bmi.w	8002ac4 <HAL_I2C_Mem_Read+0x144>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c24:	f7ff f8a0 	bl	8001d68 <HAL_GetTick>
 8002c28:	1b80      	subs	r0, r0, r6
 8002c2a:	4285      	cmp	r5, r0
 8002c2c:	d302      	bcc.n	8002c34 <HAL_I2C_Mem_Read+0x2b4>
 8002c2e:	2d00      	cmp	r5, #0
 8002c30:	f47f af41 	bne.w	8002ab6 <HAL_I2C_Mem_Read+0x136>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002c34:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8002c36:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002c38:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002c3a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002c3e:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002c42:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002c44:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
          return HAL_ERROR;
 8002c48:	2701      	movs	r7, #1
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002c4a:	f043 0320 	orr.w	r3, r3, #32
}
 8002c4e:	4638      	mov	r0, r7
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002c50:	6423      	str	r3, [r4, #64]	; 0x40
}
 8002c52:	b007      	add	sp, #28
 8002c54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c58:	b95d      	cbnz	r5, 8002c72 <HAL_I2C_Mem_Read+0x2f2>
 8002c5a:	e02b      	b.n	8002cb4 <HAL_I2C_Mem_Read+0x334>
 8002c5c:	ffff0000 	.word	0xffff0000
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002c60:	695a      	ldr	r2, [r3, #20]
 8002c62:	06d2      	lsls	r2, r2, #27
 8002c64:	d40c      	bmi.n	8002c80 <HAL_I2C_Mem_Read+0x300>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c66:	f7ff f87f 	bl	8001d68 <HAL_GetTick>
 8002c6a:	1b80      	subs	r0, r0, r6
 8002c6c:	4285      	cmp	r5, r0
 8002c6e:	d3e1      	bcc.n	8002c34 <HAL_I2C_Mem_Read+0x2b4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002c70:	6823      	ldr	r3, [r4, #0]
 8002c72:	695a      	ldr	r2, [r3, #20]
 8002c74:	0651      	lsls	r1, r2, #25
 8002c76:	d5f3      	bpl.n	8002c60 <HAL_I2C_Mem_Read+0x2e0>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c78:	691a      	ldr	r2, [r3, #16]
 8002c7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002c7c:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8002c7e:	e7a5      	b.n	8002bcc <HAL_I2C_Mem_Read+0x24c>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c80:	2200      	movs	r2, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c82:	f06f 0010 	mvn.w	r0, #16
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c86:	2120      	movs	r1, #32
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c88:	6158      	str	r0, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c8a:	6322      	str	r2, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c8c:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c90:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002c94:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002c96:	6423      	str	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8002c98:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
          return HAL_ERROR;
 8002c9c:	2701      	movs	r7, #1
 8002c9e:	e680      	b.n	80029a2 <HAL_I2C_Mem_Read+0x22>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002ca0:	695a      	ldr	r2, [r3, #20]
 8002ca2:	0652      	lsls	r2, r2, #25
 8002ca4:	f53f af44 	bmi.w	8002b30 <HAL_I2C_Mem_Read+0x1b0>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002ca8:	695a      	ldr	r2, [r3, #20]
 8002caa:	06d1      	lsls	r1, r2, #27
 8002cac:	d4e8      	bmi.n	8002c80 <HAL_I2C_Mem_Read+0x300>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cae:	f7ff f85b 	bl	8001d68 <HAL_GetTick>
 8002cb2:	e7bf      	b.n	8002c34 <HAL_I2C_Mem_Read+0x2b4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002cb4:	695a      	ldr	r2, [r3, #20]
 8002cb6:	0650      	lsls	r0, r2, #25
 8002cb8:	d5f6      	bpl.n	8002ca8 <HAL_I2C_Mem_Read+0x328>
 8002cba:	e7dd      	b.n	8002c78 <HAL_I2C_Mem_Read+0x2f8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cbc:	6823      	ldr	r3, [r4, #0]
 8002cbe:	6819      	ldr	r1, [r3, #0]
 8002cc0:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8002cc4:	6019      	str	r1, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cc6:	9003      	str	r0, [sp, #12]
 8002cc8:	6959      	ldr	r1, [r3, #20]
 8002cca:	9103      	str	r1, [sp, #12]
 8002ccc:	6999      	ldr	r1, [r3, #24]
 8002cce:	9103      	str	r1, [sp, #12]
 8002cd0:	9903      	ldr	r1, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cd2:	6819      	ldr	r1, [r3, #0]
 8002cd4:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8002cd8:	6019      	str	r1, [r3, #0]
 8002cda:	e6cd      	b.n	8002a78 <HAL_I2C_Mem_Read+0xf8>

08002cdc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002cdc:	b530      	push	{r4, r5, lr}
 8002cde:	b083      	sub	sp, #12
  uint32_t tickstart = 0U;

  __HAL_RCC_PWR_CLK_ENABLE();
 8002ce0:	4b19      	ldr	r3, [pc, #100]	; (8002d48 <HAL_PWREx_EnableOverDrive+0x6c>)
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002ce2:	491a      	ldr	r1, [pc, #104]	; (8002d4c <HAL_PWREx_EnableOverDrive+0x70>)

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002ce4:	4d1a      	ldr	r5, [pc, #104]	; (8002d50 <HAL_PWREx_EnableOverDrive+0x74>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	9201      	str	r2, [sp, #4]
 8002cea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002cec:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002cf0:	641a      	str	r2, [r3, #64]	; 0x40
 8002cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cf8:	9301      	str	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002cfa:	2201      	movs	r2, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 8002cfc:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002cfe:	640a      	str	r2, [r1, #64]	; 0x40
  tickstart = HAL_GetTick();
 8002d00:	f7ff f832 	bl	8001d68 <HAL_GetTick>
 8002d04:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002d06:	e005      	b.n	8002d14 <HAL_PWREx_EnableOverDrive+0x38>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002d08:	f7ff f82e 	bl	8001d68 <HAL_GetTick>
 8002d0c:	1b00      	subs	r0, r0, r4
 8002d0e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002d12:	d816      	bhi.n	8002d42 <HAL_PWREx_EnableOverDrive+0x66>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002d14:	686b      	ldr	r3, [r5, #4]
 8002d16:	03da      	lsls	r2, r3, #15
 8002d18:	d5f6      	bpl.n	8002d08 <HAL_PWREx_EnableOverDrive+0x2c>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002d1a:	4b0c      	ldr	r3, [pc, #48]	; (8002d4c <HAL_PWREx_EnableOverDrive+0x70>)

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002d1c:	4d0c      	ldr	r5, [pc, #48]	; (8002d50 <HAL_PWREx_EnableOverDrive+0x74>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002d1e:	2201      	movs	r2, #1
 8002d20:	645a      	str	r2, [r3, #68]	; 0x44
  tickstart = HAL_GetTick();
 8002d22:	f7ff f821 	bl	8001d68 <HAL_GetTick>
 8002d26:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002d28:	e005      	b.n	8002d36 <HAL_PWREx_EnableOverDrive+0x5a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002d2a:	f7ff f81d 	bl	8001d68 <HAL_GetTick>
 8002d2e:	1b00      	subs	r0, r0, r4
 8002d30:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002d34:	d805      	bhi.n	8002d42 <HAL_PWREx_EnableOverDrive+0x66>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002d36:	686b      	ldr	r3, [r5, #4]
 8002d38:	039b      	lsls	r3, r3, #14
 8002d3a:	d5f6      	bpl.n	8002d2a <HAL_PWREx_EnableOverDrive+0x4e>
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8002d3c:	2000      	movs	r0, #0
}
 8002d3e:	b003      	add	sp, #12
 8002d40:	bd30      	pop	{r4, r5, pc}
      return HAL_TIMEOUT;
 8002d42:	2003      	movs	r0, #3
}
 8002d44:	b003      	add	sp, #12
 8002d46:	bd30      	pop	{r4, r5, pc}
 8002d48:	40023800 	.word	0x40023800
 8002d4c:	420e0000 	.word	0x420e0000
 8002d50:	40007000 	.word	0x40007000

08002d54 <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d54:	2800      	cmp	r0, #0
 8002d56:	f000 8087 	beq.w	8002e68 <HAL_RCC_ClockConfig+0x114>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d5a:	4a48      	ldr	r2, [pc, #288]	; (8002e7c <HAL_RCC_ClockConfig+0x128>)
 8002d5c:	6813      	ldr	r3, [r2, #0]
 8002d5e:	f003 030f 	and.w	r3, r3, #15
 8002d62:	428b      	cmp	r3, r1
{
 8002d64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d68:	460d      	mov	r5, r1
 8002d6a:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d6c:	d209      	bcs.n	8002d82 <HAL_RCC_ClockConfig+0x2e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d6e:	b2cb      	uxtb	r3, r1
 8002d70:	7013      	strb	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d72:	6813      	ldr	r3, [r2, #0]
 8002d74:	f003 030f 	and.w	r3, r3, #15
 8002d78:	428b      	cmp	r3, r1
 8002d7a:	d002      	beq.n	8002d82 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8002d7c:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);

  return HAL_OK;
}
 8002d7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d82:	6823      	ldr	r3, [r4, #0]
 8002d84:	0798      	lsls	r0, r3, #30
 8002d86:	d514      	bpl.n	8002db2 <HAL_RCC_ClockConfig+0x5e>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d88:	0759      	lsls	r1, r3, #29
 8002d8a:	d504      	bpl.n	8002d96 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d8c:	493c      	ldr	r1, [pc, #240]	; (8002e80 <HAL_RCC_ClockConfig+0x12c>)
 8002d8e:	688a      	ldr	r2, [r1, #8]
 8002d90:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 8002d94:	608a      	str	r2, [r1, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d96:	071a      	lsls	r2, r3, #28
 8002d98:	d504      	bpl.n	8002da4 <HAL_RCC_ClockConfig+0x50>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d9a:	4939      	ldr	r1, [pc, #228]	; (8002e80 <HAL_RCC_ClockConfig+0x12c>)
 8002d9c:	688a      	ldr	r2, [r1, #8]
 8002d9e:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 8002da2:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002da4:	4936      	ldr	r1, [pc, #216]	; (8002e80 <HAL_RCC_ClockConfig+0x12c>)
 8002da6:	68a0      	ldr	r0, [r4, #8]
 8002da8:	688a      	ldr	r2, [r1, #8]
 8002daa:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002dae:	4302      	orrs	r2, r0
 8002db0:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002db2:	07df      	lsls	r7, r3, #31
 8002db4:	d521      	bpl.n	8002dfa <HAL_RCC_ClockConfig+0xa6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002db6:	6862      	ldr	r2, [r4, #4]
 8002db8:	2a01      	cmp	r2, #1
 8002dba:	d057      	beq.n	8002e6c <HAL_RCC_ClockConfig+0x118>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002dbc:	1e93      	subs	r3, r2, #2
 8002dbe:	2b01      	cmp	r3, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dc0:	4b2f      	ldr	r3, [pc, #188]	; (8002e80 <HAL_RCC_ClockConfig+0x12c>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002dc4:	d94d      	bls.n	8002e62 <HAL_RCC_ClockConfig+0x10e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dc6:	0799      	lsls	r1, r3, #30
 8002dc8:	d5d8      	bpl.n	8002d7c <HAL_RCC_ClockConfig+0x28>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002dca:	4e2d      	ldr	r6, [pc, #180]	; (8002e80 <HAL_RCC_ClockConfig+0x12c>)
 8002dcc:	68b3      	ldr	r3, [r6, #8]
 8002dce:	f023 0303 	bic.w	r3, r3, #3
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8002dd6:	f7fe ffc7 	bl	8001d68 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dda:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8002dde:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002de0:	e004      	b.n	8002dec <HAL_RCC_ClockConfig+0x98>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002de2:	f7fe ffc1 	bl	8001d68 <HAL_GetTick>
 8002de6:	1bc0      	subs	r0, r0, r7
 8002de8:	4540      	cmp	r0, r8
 8002dea:	d844      	bhi.n	8002e76 <HAL_RCC_ClockConfig+0x122>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dec:	68b3      	ldr	r3, [r6, #8]
 8002dee:	6862      	ldr	r2, [r4, #4]
 8002df0:	f003 030c 	and.w	r3, r3, #12
 8002df4:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002df8:	d1f3      	bne.n	8002de2 <HAL_RCC_ClockConfig+0x8e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002dfa:	4a20      	ldr	r2, [pc, #128]	; (8002e7c <HAL_RCC_ClockConfig+0x128>)
 8002dfc:	6813      	ldr	r3, [r2, #0]
 8002dfe:	f003 030f 	and.w	r3, r3, #15
 8002e02:	42ab      	cmp	r3, r5
 8002e04:	d906      	bls.n	8002e14 <HAL_RCC_ClockConfig+0xc0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e06:	b2eb      	uxtb	r3, r5
 8002e08:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e0a:	6813      	ldr	r3, [r2, #0]
 8002e0c:	f003 030f 	and.w	r3, r3, #15
 8002e10:	42ab      	cmp	r3, r5
 8002e12:	d1b3      	bne.n	8002d7c <HAL_RCC_ClockConfig+0x28>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e14:	6823      	ldr	r3, [r4, #0]
 8002e16:	075a      	lsls	r2, r3, #29
 8002e18:	d506      	bpl.n	8002e28 <HAL_RCC_ClockConfig+0xd4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e1a:	4919      	ldr	r1, [pc, #100]	; (8002e80 <HAL_RCC_ClockConfig+0x12c>)
 8002e1c:	68e0      	ldr	r0, [r4, #12]
 8002e1e:	688a      	ldr	r2, [r1, #8]
 8002e20:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8002e24:	4302      	orrs	r2, r0
 8002e26:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e28:	071b      	lsls	r3, r3, #28
 8002e2a:	d507      	bpl.n	8002e3c <HAL_RCC_ClockConfig+0xe8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e2c:	4a14      	ldr	r2, [pc, #80]	; (8002e80 <HAL_RCC_ClockConfig+0x12c>)
 8002e2e:	6921      	ldr	r1, [r4, #16]
 8002e30:	6893      	ldr	r3, [r2, #8]
 8002e32:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002e36:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002e3a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e3c:	f000 f848 	bl	8002ed0 <HAL_RCC_GetSysClockFreq>
 8002e40:	4a0f      	ldr	r2, [pc, #60]	; (8002e80 <HAL_RCC_ClockConfig+0x12c>)
 8002e42:	4c10      	ldr	r4, [pc, #64]	; (8002e84 <HAL_RCC_ClockConfig+0x130>)
 8002e44:	6892      	ldr	r2, [r2, #8]
 8002e46:	4910      	ldr	r1, [pc, #64]	; (8002e88 <HAL_RCC_ClockConfig+0x134>)
 8002e48:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	5ca2      	ldrb	r2, [r4, r2]
  HAL_InitTick (uwTickPrio);
 8002e50:	480e      	ldr	r0, [pc, #56]	; (8002e8c <HAL_RCC_ClockConfig+0x138>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e52:	40d3      	lsrs	r3, r2
  HAL_InitTick (uwTickPrio);
 8002e54:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e56:	600b      	str	r3, [r1, #0]
  HAL_InitTick (uwTickPrio);
 8002e58:	f7fe ff3c 	bl	8001cd4 <HAL_InitTick>
  return HAL_OK;
 8002e5c:	2000      	movs	r0, #0
}
 8002e5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e62:	0198      	lsls	r0, r3, #6
 8002e64:	d4b1      	bmi.n	8002dca <HAL_RCC_ClockConfig+0x76>
 8002e66:	e789      	b.n	8002d7c <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 8002e68:	2001      	movs	r0, #1
}
 8002e6a:	4770      	bx	lr
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e6c:	4b04      	ldr	r3, [pc, #16]	; (8002e80 <HAL_RCC_ClockConfig+0x12c>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	039e      	lsls	r6, r3, #14
 8002e72:	d4aa      	bmi.n	8002dca <HAL_RCC_ClockConfig+0x76>
 8002e74:	e782      	b.n	8002d7c <HAL_RCC_ClockConfig+0x28>
        return HAL_TIMEOUT;
 8002e76:	2003      	movs	r0, #3
 8002e78:	e781      	b.n	8002d7e <HAL_RCC_ClockConfig+0x2a>
 8002e7a:	bf00      	nop
 8002e7c:	40023c00 	.word	0x40023c00
 8002e80:	40023800 	.word	0x40023800
 8002e84:	08007404 	.word	0x08007404
 8002e88:	20000000 	.word	0x20000000
 8002e8c:	20000008 	.word	0x20000008

08002e90 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002e90:	4b04      	ldr	r3, [pc, #16]	; (8002ea4 <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 8002e92:	4905      	ldr	r1, [pc, #20]	; (8002ea8 <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	4a05      	ldr	r2, [pc, #20]	; (8002eac <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002e98:	6808      	ldr	r0, [r1, #0]
 8002e9a:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8002e9e:	5cd3      	ldrb	r3, [r2, r3]
}
 8002ea0:	40d8      	lsrs	r0, r3
 8002ea2:	4770      	bx	lr
 8002ea4:	40023800 	.word	0x40023800
 8002ea8:	20000000 	.word	0x20000000
 8002eac:	08007414 	.word	0x08007414

08002eb0 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002eb0:	4b04      	ldr	r3, [pc, #16]	; (8002ec4 <HAL_RCC_GetPCLK2Freq+0x14>)
  return SystemCoreClock;
 8002eb2:	4905      	ldr	r1, [pc, #20]	; (8002ec8 <HAL_RCC_GetPCLK2Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	4a05      	ldr	r2, [pc, #20]	; (8002ecc <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002eb8:	6808      	ldr	r0, [r1, #0]
 8002eba:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8002ebe:	5cd3      	ldrb	r3, [r2, r3]
}
 8002ec0:	40d8      	lsrs	r0, r3
 8002ec2:	4770      	bx	lr
 8002ec4:	40023800 	.word	0x40023800
 8002ec8:	20000000 	.word	0x20000000
 8002ecc:	08007414 	.word	0x08007414

08002ed0 <HAL_RCC_GetSysClockFreq>:
  uint32_t pllp = 0U;
  uint32_t pllr = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ed0:	4927      	ldr	r1, [pc, #156]	; (8002f70 <HAL_RCC_GetSysClockFreq+0xa0>)
{
 8002ed2:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ed4:	688b      	ldr	r3, [r1, #8]
 8002ed6:	f003 030c 	and.w	r3, r3, #12
 8002eda:	2b08      	cmp	r3, #8
 8002edc:	d007      	beq.n	8002eee <HAL_RCC_GetSysClockFreq+0x1e>
 8002ede:	2b0c      	cmp	r3, #12
 8002ee0:	d01d      	beq.n	8002f1e <HAL_RCC_GetSysClockFreq+0x4e>
 8002ee2:	4a24      	ldr	r2, [pc, #144]	; (8002f74 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002ee4:	4824      	ldr	r0, [pc, #144]	; (8002f78 <HAL_RCC_GetSysClockFreq+0xa8>)
 8002ee6:	2b04      	cmp	r3, #4
 8002ee8:	bf08      	it	eq
 8002eea:	4610      	moveq	r0, r2
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002eec:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002eee:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ef0:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ef2:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ef4:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ef8:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002efc:	d12e      	bne.n	8002f5c <HAL_RCC_GetSysClockFreq+0x8c>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002efe:	481e      	ldr	r0, [pc, #120]	; (8002f78 <HAL_RCC_GetSysClockFreq+0xa8>)
 8002f00:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8002f04:	fba1 0100 	umull	r0, r1, r1, r0
 8002f08:	f7fd febe 	bl	8000c88 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002f0c:	4b18      	ldr	r3, [pc, #96]	; (8002f70 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8002f14:	3301      	adds	r3, #1
 8002f16:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8002f18:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8002f1c:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f1e:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f20:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f22:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f24:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f28:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f2c:	d10d      	bne.n	8002f4a <HAL_RCC_GetSysClockFreq+0x7a>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f2e:	4812      	ldr	r0, [pc, #72]	; (8002f78 <HAL_RCC_GetSysClockFreq+0xa8>)
 8002f30:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8002f34:	fba1 0100 	umull	r0, r1, r1, r0
 8002f38:	f7fd fea6 	bl	8000c88 <__aeabi_uldivmod>
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002f3c:	4b0c      	ldr	r3, [pc, #48]	; (8002f70 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	f3c3 7302 	ubfx	r3, r3, #28, #3
      sysclockfreq = pllvco/pllr;
 8002f44:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8002f48:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f4a:	480a      	ldr	r0, [pc, #40]	; (8002f74 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002f4c:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8002f50:	2300      	movs	r3, #0
 8002f52:	fba1 0100 	umull	r0, r1, r1, r0
 8002f56:	f7fd fe97 	bl	8000c88 <__aeabi_uldivmod>
 8002f5a:	e7ef      	b.n	8002f3c <HAL_RCC_GetSysClockFreq+0x6c>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f5c:	4805      	ldr	r0, [pc, #20]	; (8002f74 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002f5e:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8002f62:	2300      	movs	r3, #0
 8002f64:	fba1 0100 	umull	r0, r1, r1, r0
 8002f68:	f7fd fe8e 	bl	8000c88 <__aeabi_uldivmod>
 8002f6c:	e7ce      	b.n	8002f0c <HAL_RCC_GetSysClockFreq+0x3c>
 8002f6e:	bf00      	nop
 8002f70:	40023800 	.word	0x40023800
 8002f74:	007a1200 	.word	0x007a1200
 8002f78:	00f42400 	.word	0x00f42400

08002f7c <HAL_RCC_OscConfig>:
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f7c:	2800      	cmp	r0, #0
 8002f7e:	f000 81b3 	beq.w	80032e8 <HAL_RCC_OscConfig+0x36c>
{
 8002f82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f86:	6803      	ldr	r3, [r0, #0]
 8002f88:	07da      	lsls	r2, r3, #31
{
 8002f8a:	b082      	sub	sp, #8
 8002f8c:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f8e:	d536      	bpl.n	8002ffe <HAL_RCC_OscConfig+0x82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002f90:	49a2      	ldr	r1, [pc, #648]	; (800321c <HAL_RCC_OscConfig+0x2a0>)
 8002f92:	688a      	ldr	r2, [r1, #8]
 8002f94:	f002 020c 	and.w	r2, r2, #12
 8002f98:	2a04      	cmp	r2, #4
 8002f9a:	f000 80df 	beq.w	800315c <HAL_RCC_OscConfig+0x1e0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002f9e:	688a      	ldr	r2, [r1, #8]
 8002fa0:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002fa4:	2a08      	cmp	r2, #8
 8002fa6:	f000 80d5 	beq.w	8003154 <HAL_RCC_OscConfig+0x1d8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002faa:	499c      	ldr	r1, [pc, #624]	; (800321c <HAL_RCC_OscConfig+0x2a0>)
 8002fac:	688a      	ldr	r2, [r1, #8]
 8002fae:	f002 020c 	and.w	r2, r2, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002fb2:	2a0c      	cmp	r2, #12
 8002fb4:	f000 8105 	beq.w	80031c2 <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fb8:	6863      	ldr	r3, [r4, #4]
 8002fba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fbe:	f000 8119 	beq.w	80031f4 <HAL_RCC_OscConfig+0x278>
 8002fc2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002fc6:	f000 8196 	beq.w	80032f6 <HAL_RCC_OscConfig+0x37a>
 8002fca:	4d94      	ldr	r5, [pc, #592]	; (800321c <HAL_RCC_OscConfig+0x2a0>)
 8002fcc:	682a      	ldr	r2, [r5, #0]
 8002fce:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002fd2:	602a      	str	r2, [r5, #0]
 8002fd4:	682a      	ldr	r2, [r5, #0]
 8002fd6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002fda:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	f040 810e 	bne.w	80031fe <HAL_RCC_OscConfig+0x282>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fe2:	f7fe fec1 	bl	8001d68 <HAL_GetTick>
 8002fe6:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fe8:	e005      	b.n	8002ff6 <HAL_RCC_OscConfig+0x7a>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fea:	f7fe febd 	bl	8001d68 <HAL_GetTick>
 8002fee:	1b80      	subs	r0, r0, r6
 8002ff0:	2864      	cmp	r0, #100	; 0x64
 8002ff2:	f200 80fb 	bhi.w	80031ec <HAL_RCC_OscConfig+0x270>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ff6:	682b      	ldr	r3, [r5, #0]
 8002ff8:	0399      	lsls	r1, r3, #14
 8002ffa:	d4f6      	bmi.n	8002fea <HAL_RCC_OscConfig+0x6e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ffc:	6823      	ldr	r3, [r4, #0]
 8002ffe:	079a      	lsls	r2, r3, #30
 8003000:	d52f      	bpl.n	8003062 <HAL_RCC_OscConfig+0xe6>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003002:	4a86      	ldr	r2, [pc, #536]	; (800321c <HAL_RCC_OscConfig+0x2a0>)
 8003004:	6891      	ldr	r1, [r2, #8]
 8003006:	f011 0f0c 	tst.w	r1, #12
 800300a:	f000 8098 	beq.w	800313e <HAL_RCC_OscConfig+0x1c2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800300e:	6891      	ldr	r1, [r2, #8]
 8003010:	f001 010c 	and.w	r1, r1, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003014:	2908      	cmp	r1, #8
 8003016:	f000 808e 	beq.w	8003136 <HAL_RCC_OscConfig+0x1ba>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800301a:	4980      	ldr	r1, [pc, #512]	; (800321c <HAL_RCC_OscConfig+0x2a0>)
 800301c:	688a      	ldr	r2, [r1, #8]
 800301e:	f002 020c 	and.w	r2, r2, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003022:	2a0c      	cmp	r2, #12
 8003024:	f000 8162 	beq.w	80032ec <HAL_RCC_OscConfig+0x370>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003028:	68e3      	ldr	r3, [r4, #12]
 800302a:	2b00      	cmp	r3, #0
 800302c:	f000 8114 	beq.w	8003258 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003030:	4b7b      	ldr	r3, [pc, #492]	; (8003220 <HAL_RCC_OscConfig+0x2a4>)

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003032:	4e7a      	ldr	r6, [pc, #488]	; (800321c <HAL_RCC_OscConfig+0x2a0>)
        __HAL_RCC_HSI_ENABLE();
 8003034:	2201      	movs	r2, #1
 8003036:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003038:	f7fe fe96 	bl	8001d68 <HAL_GetTick>
 800303c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800303e:	e005      	b.n	800304c <HAL_RCC_OscConfig+0xd0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003040:	f7fe fe92 	bl	8001d68 <HAL_GetTick>
 8003044:	1b40      	subs	r0, r0, r5
 8003046:	2802      	cmp	r0, #2
 8003048:	f200 80d0 	bhi.w	80031ec <HAL_RCC_OscConfig+0x270>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800304c:	6833      	ldr	r3, [r6, #0]
 800304e:	0798      	lsls	r0, r3, #30
 8003050:	d5f6      	bpl.n	8003040 <HAL_RCC_OscConfig+0xc4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003052:	6833      	ldr	r3, [r6, #0]
 8003054:	6922      	ldr	r2, [r4, #16]
 8003056:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800305a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800305e:	6033      	str	r3, [r6, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003060:	6823      	ldr	r3, [r4, #0]
 8003062:	071a      	lsls	r2, r3, #28
 8003064:	d451      	bmi.n	800310a <HAL_RCC_OscConfig+0x18e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003066:	0758      	lsls	r0, r3, #29
 8003068:	d530      	bpl.n	80030cc <HAL_RCC_OscConfig+0x150>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800306a:	4a6c      	ldr	r2, [pc, #432]	; (800321c <HAL_RCC_OscConfig+0x2a0>)
 800306c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800306e:	f013 5380 	ands.w	r3, r3, #268435456	; 0x10000000
 8003072:	f000 809a 	beq.w	80031aa <HAL_RCC_OscConfig+0x22e>
    FlagStatus       pwrclkchanged = RESET;
 8003076:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003078:	4e6a      	ldr	r6, [pc, #424]	; (8003224 <HAL_RCC_OscConfig+0x2a8>)
 800307a:	6833      	ldr	r3, [r6, #0]
 800307c:	05d9      	lsls	r1, r3, #23
 800307e:	f140 80a5 	bpl.w	80031cc <HAL_RCC_OscConfig+0x250>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003082:	68a3      	ldr	r3, [r4, #8]
 8003084:	2b01      	cmp	r3, #1
 8003086:	f000 80cf 	beq.w	8003228 <HAL_RCC_OscConfig+0x2ac>
 800308a:	2b05      	cmp	r3, #5
 800308c:	f000 813d 	beq.w	800330a <HAL_RCC_OscConfig+0x38e>
 8003090:	4e62      	ldr	r6, [pc, #392]	; (800321c <HAL_RCC_OscConfig+0x2a0>)
 8003092:	6f32      	ldr	r2, [r6, #112]	; 0x70
 8003094:	f022 0201 	bic.w	r2, r2, #1
 8003098:	6732      	str	r2, [r6, #112]	; 0x70
 800309a:	6f32      	ldr	r2, [r6, #112]	; 0x70
 800309c:	f022 0204 	bic.w	r2, r2, #4
 80030a0:	6732      	str	r2, [r6, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	f040 80c5 	bne.w	8003232 <HAL_RCC_OscConfig+0x2b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030a8:	f7fe fe5e 	bl	8001d68 <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030ac:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80030b0:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030b2:	e005      	b.n	80030c0 <HAL_RCC_OscConfig+0x144>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030b4:	f7fe fe58 	bl	8001d68 <HAL_GetTick>
 80030b8:	1bc0      	subs	r0, r0, r7
 80030ba:	4540      	cmp	r0, r8
 80030bc:	f200 8096 	bhi.w	80031ec <HAL_RCC_OscConfig+0x270>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030c0:	6f33      	ldr	r3, [r6, #112]	; 0x70
 80030c2:	0798      	lsls	r0, r3, #30
 80030c4:	d4f6      	bmi.n	80030b4 <HAL_RCC_OscConfig+0x138>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80030c6:	2d00      	cmp	r5, #0
 80030c8:	f040 8108 	bne.w	80032dc <HAL_RCC_OscConfig+0x360>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030cc:	69a0      	ldr	r0, [r4, #24]
 80030ce:	b1c0      	cbz	r0, 8003102 <HAL_RCC_OscConfig+0x186>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80030d0:	4d52      	ldr	r5, [pc, #328]	; (800321c <HAL_RCC_OscConfig+0x2a0>)
 80030d2:	68ab      	ldr	r3, [r5, #8]
 80030d4:	f003 030c 	and.w	r3, r3, #12
 80030d8:	2b08      	cmp	r3, #8
 80030da:	f000 80ce 	beq.w	800327a <HAL_RCC_OscConfig+0x2fe>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030de:	4b50      	ldr	r3, [pc, #320]	; (8003220 <HAL_RCC_OscConfig+0x2a4>)
 80030e0:	2200      	movs	r2, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030e2:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 80030e4:	661a      	str	r2, [r3, #96]	; 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030e6:	f000 811a 	beq.w	800331e <HAL_RCC_OscConfig+0x3a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ea:	f7fe fe3d 	bl	8001d68 <HAL_GetTick>
 80030ee:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030f0:	e004      	b.n	80030fc <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030f2:	f7fe fe39 	bl	8001d68 <HAL_GetTick>
 80030f6:	1b00      	subs	r0, r0, r4
 80030f8:	2802      	cmp	r0, #2
 80030fa:	d877      	bhi.n	80031ec <HAL_RCC_OscConfig+0x270>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030fc:	682b      	ldr	r3, [r5, #0]
 80030fe:	019b      	lsls	r3, r3, #6
 8003100:	d4f7      	bmi.n	80030f2 <HAL_RCC_OscConfig+0x176>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8003102:	2000      	movs	r0, #0
}
 8003104:	b002      	add	sp, #8
 8003106:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800310a:	6963      	ldr	r3, [r4, #20]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d02f      	beq.n	8003170 <HAL_RCC_OscConfig+0x1f4>
      __HAL_RCC_LSI_ENABLE();
 8003110:	4b43      	ldr	r3, [pc, #268]	; (8003220 <HAL_RCC_OscConfig+0x2a4>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003112:	4e42      	ldr	r6, [pc, #264]	; (800321c <HAL_RCC_OscConfig+0x2a0>)
      __HAL_RCC_LSI_ENABLE();
 8003114:	2201      	movs	r2, #1
 8003116:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 800311a:	f7fe fe25 	bl	8001d68 <HAL_GetTick>
 800311e:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003120:	e004      	b.n	800312c <HAL_RCC_OscConfig+0x1b0>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003122:	f7fe fe21 	bl	8001d68 <HAL_GetTick>
 8003126:	1b40      	subs	r0, r0, r5
 8003128:	2802      	cmp	r0, #2
 800312a:	d85f      	bhi.n	80031ec <HAL_RCC_OscConfig+0x270>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800312c:	6f73      	ldr	r3, [r6, #116]	; 0x74
 800312e:	079b      	lsls	r3, r3, #30
 8003130:	d5f7      	bpl.n	8003122 <HAL_RCC_OscConfig+0x1a6>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003132:	6823      	ldr	r3, [r4, #0]
 8003134:	e797      	b.n	8003066 <HAL_RCC_OscConfig+0xea>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003136:	6852      	ldr	r2, [r2, #4]
 8003138:	0257      	lsls	r7, r2, #9
 800313a:	f53f af6e 	bmi.w	800301a <HAL_RCC_OscConfig+0x9e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800313e:	4a37      	ldr	r2, [pc, #220]	; (800321c <HAL_RCC_OscConfig+0x2a0>)
 8003140:	6812      	ldr	r2, [r2, #0]
 8003142:	0795      	lsls	r5, r2, #30
 8003144:	d525      	bpl.n	8003192 <HAL_RCC_OscConfig+0x216>
 8003146:	68e2      	ldr	r2, [r4, #12]
 8003148:	2a01      	cmp	r2, #1
 800314a:	d022      	beq.n	8003192 <HAL_RCC_OscConfig+0x216>
        return HAL_ERROR;
 800314c:	2001      	movs	r0, #1
}
 800314e:	b002      	add	sp, #8
 8003150:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003154:	684a      	ldr	r2, [r1, #4]
 8003156:	0257      	lsls	r7, r2, #9
 8003158:	f57f af27 	bpl.w	8002faa <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800315c:	4a2f      	ldr	r2, [pc, #188]	; (800321c <HAL_RCC_OscConfig+0x2a0>)
 800315e:	6812      	ldr	r2, [r2, #0]
 8003160:	0395      	lsls	r5, r2, #14
 8003162:	f57f af4c 	bpl.w	8002ffe <HAL_RCC_OscConfig+0x82>
 8003166:	6862      	ldr	r2, [r4, #4]
 8003168:	2a00      	cmp	r2, #0
 800316a:	f47f af48 	bne.w	8002ffe <HAL_RCC_OscConfig+0x82>
 800316e:	e7ed      	b.n	800314c <HAL_RCC_OscConfig+0x1d0>
      __HAL_RCC_LSI_DISABLE();
 8003170:	4a2b      	ldr	r2, [pc, #172]	; (8003220 <HAL_RCC_OscConfig+0x2a4>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003172:	4e2a      	ldr	r6, [pc, #168]	; (800321c <HAL_RCC_OscConfig+0x2a0>)
      __HAL_RCC_LSI_DISABLE();
 8003174:	f8c2 3e80 	str.w	r3, [r2, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 8003178:	f7fe fdf6 	bl	8001d68 <HAL_GetTick>
 800317c:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800317e:	e004      	b.n	800318a <HAL_RCC_OscConfig+0x20e>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003180:	f7fe fdf2 	bl	8001d68 <HAL_GetTick>
 8003184:	1b40      	subs	r0, r0, r5
 8003186:	2802      	cmp	r0, #2
 8003188:	d830      	bhi.n	80031ec <HAL_RCC_OscConfig+0x270>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800318a:	6f73      	ldr	r3, [r6, #116]	; 0x74
 800318c:	079f      	lsls	r7, r3, #30
 800318e:	d4f7      	bmi.n	8003180 <HAL_RCC_OscConfig+0x204>
 8003190:	e7cf      	b.n	8003132 <HAL_RCC_OscConfig+0x1b6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003192:	4922      	ldr	r1, [pc, #136]	; (800321c <HAL_RCC_OscConfig+0x2a0>)
 8003194:	6920      	ldr	r0, [r4, #16]
 8003196:	680a      	ldr	r2, [r1, #0]
 8003198:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800319c:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 80031a0:	600a      	str	r2, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031a2:	071a      	lsls	r2, r3, #28
 80031a4:	f57f af5f 	bpl.w	8003066 <HAL_RCC_OscConfig+0xea>
 80031a8:	e7af      	b.n	800310a <HAL_RCC_OscConfig+0x18e>
      __HAL_RCC_PWR_CLK_ENABLE();
 80031aa:	9301      	str	r3, [sp, #4]
 80031ac:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80031ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031b2:	6413      	str	r3, [r2, #64]	; 0x40
 80031b4:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80031b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031ba:	9301      	str	r3, [sp, #4]
 80031bc:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80031be:	2501      	movs	r5, #1
 80031c0:	e75a      	b.n	8003078 <HAL_RCC_OscConfig+0xfc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031c2:	684a      	ldr	r2, [r1, #4]
 80031c4:	0256      	lsls	r6, r2, #9
 80031c6:	f57f aef7 	bpl.w	8002fb8 <HAL_RCC_OscConfig+0x3c>
 80031ca:	e7c7      	b.n	800315c <HAL_RCC_OscConfig+0x1e0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031cc:	6833      	ldr	r3, [r6, #0]
 80031ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031d2:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80031d4:	f7fe fdc8 	bl	8001d68 <HAL_GetTick>
 80031d8:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031da:	6833      	ldr	r3, [r6, #0]
 80031dc:	05da      	lsls	r2, r3, #23
 80031de:	f53f af50 	bmi.w	8003082 <HAL_RCC_OscConfig+0x106>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031e2:	f7fe fdc1 	bl	8001d68 <HAL_GetTick>
 80031e6:	1bc0      	subs	r0, r0, r7
 80031e8:	2802      	cmp	r0, #2
 80031ea:	d9f6      	bls.n	80031da <HAL_RCC_OscConfig+0x25e>
            return HAL_TIMEOUT;
 80031ec:	2003      	movs	r0, #3
}
 80031ee:	b002      	add	sp, #8
 80031f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031f4:	4a09      	ldr	r2, [pc, #36]	; (800321c <HAL_RCC_OscConfig+0x2a0>)
 80031f6:	6813      	ldr	r3, [r2, #0]
 80031f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031fc:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80031fe:	f7fe fdb3 	bl	8001d68 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003202:	4e06      	ldr	r6, [pc, #24]	; (800321c <HAL_RCC_OscConfig+0x2a0>)
        tickstart = HAL_GetTick();
 8003204:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003206:	e004      	b.n	8003212 <HAL_RCC_OscConfig+0x296>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003208:	f7fe fdae 	bl	8001d68 <HAL_GetTick>
 800320c:	1b40      	subs	r0, r0, r5
 800320e:	2864      	cmp	r0, #100	; 0x64
 8003210:	d8ec      	bhi.n	80031ec <HAL_RCC_OscConfig+0x270>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003212:	6833      	ldr	r3, [r6, #0]
 8003214:	0398      	lsls	r0, r3, #14
 8003216:	d5f7      	bpl.n	8003208 <HAL_RCC_OscConfig+0x28c>
 8003218:	e6f0      	b.n	8002ffc <HAL_RCC_OscConfig+0x80>
 800321a:	bf00      	nop
 800321c:	40023800 	.word	0x40023800
 8003220:	42470000 	.word	0x42470000
 8003224:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003228:	4a55      	ldr	r2, [pc, #340]	; (8003380 <HAL_RCC_OscConfig+0x404>)
 800322a:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800322c:	f043 0301 	orr.w	r3, r3, #1
 8003230:	6713      	str	r3, [r2, #112]	; 0x70
      tickstart = HAL_GetTick();
 8003232:	f7fe fd99 	bl	8001d68 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003236:	4f52      	ldr	r7, [pc, #328]	; (8003380 <HAL_RCC_OscConfig+0x404>)
      tickstart = HAL_GetTick();
 8003238:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800323a:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800323e:	e004      	b.n	800324a <HAL_RCC_OscConfig+0x2ce>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003240:	f7fe fd92 	bl	8001d68 <HAL_GetTick>
 8003244:	1b80      	subs	r0, r0, r6
 8003246:	4540      	cmp	r0, r8
 8003248:	d8d0      	bhi.n	80031ec <HAL_RCC_OscConfig+0x270>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800324a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800324c:	079b      	lsls	r3, r3, #30
 800324e:	d5f7      	bpl.n	8003240 <HAL_RCC_OscConfig+0x2c4>
    if(pwrclkchanged == SET)
 8003250:	2d00      	cmp	r5, #0
 8003252:	f43f af3b 	beq.w	80030cc <HAL_RCC_OscConfig+0x150>
 8003256:	e041      	b.n	80032dc <HAL_RCC_OscConfig+0x360>
        __HAL_RCC_HSI_DISABLE();
 8003258:	4a4a      	ldr	r2, [pc, #296]	; (8003384 <HAL_RCC_OscConfig+0x408>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800325a:	4e49      	ldr	r6, [pc, #292]	; (8003380 <HAL_RCC_OscConfig+0x404>)
        __HAL_RCC_HSI_DISABLE();
 800325c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800325e:	f7fe fd83 	bl	8001d68 <HAL_GetTick>
 8003262:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003264:	e004      	b.n	8003270 <HAL_RCC_OscConfig+0x2f4>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003266:	f7fe fd7f 	bl	8001d68 <HAL_GetTick>
 800326a:	1b40      	subs	r0, r0, r5
 800326c:	2802      	cmp	r0, #2
 800326e:	d8bd      	bhi.n	80031ec <HAL_RCC_OscConfig+0x270>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003270:	6833      	ldr	r3, [r6, #0]
 8003272:	0799      	lsls	r1, r3, #30
 8003274:	d4f7      	bmi.n	8003266 <HAL_RCC_OscConfig+0x2ea>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003276:	6823      	ldr	r3, [r4, #0]
 8003278:	e6f3      	b.n	8003062 <HAL_RCC_OscConfig+0xe6>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800327a:	2801      	cmp	r0, #1
 800327c:	f43f af42 	beq.w	8003104 <HAL_RCC_OscConfig+0x188>
        pll_config = RCC->PLLCFGR;
 8003280:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003282:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003284:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003288:	4291      	cmp	r1, r2
 800328a:	f47f af5f 	bne.w	800314c <HAL_RCC_OscConfig+0x1d0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800328e:	6a22      	ldr	r2, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003290:	f003 013f 	and.w	r1, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003294:	4291      	cmp	r1, r2
 8003296:	f47f af59 	bne.w	800314c <HAL_RCC_OscConfig+0x1d0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800329a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800329c:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 80032a0:	401a      	ands	r2, r3
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032a2:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 80032a6:	f47f af51 	bne.w	800314c <HAL_RCC_OscConfig+0x1d0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80032aa:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80032ac:	0852      	lsrs	r2, r2, #1
 80032ae:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 80032b2:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032b4:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 80032b8:	f47f af48 	bne.w	800314c <HAL_RCC_OscConfig+0x1d0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80032bc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80032be:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80032c2:	ebb2 6f01 	cmp.w	r2, r1, lsl #24
 80032c6:	f47f af41 	bne.w	800314c <HAL_RCC_OscConfig+0x1d0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80032ca:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80032cc:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80032d0:	ebb3 7f02 	cmp.w	r3, r2, lsl #28
  return HAL_OK;
 80032d4:	bf14      	ite	ne
 80032d6:	2001      	movne	r0, #1
 80032d8:	2000      	moveq	r0, #0
 80032da:	e713      	b.n	8003104 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_PWR_CLK_DISABLE();
 80032dc:	4a28      	ldr	r2, [pc, #160]	; (8003380 <HAL_RCC_OscConfig+0x404>)
 80032de:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80032e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032e4:	6413      	str	r3, [r2, #64]	; 0x40
 80032e6:	e6f1      	b.n	80030cc <HAL_RCC_OscConfig+0x150>
    return HAL_ERROR;
 80032e8:	2001      	movs	r0, #1
}
 80032ea:	4770      	bx	lr
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032ec:	684a      	ldr	r2, [r1, #4]
 80032ee:	0256      	lsls	r6, r2, #9
 80032f0:	f53f ae9a 	bmi.w	8003028 <HAL_RCC_OscConfig+0xac>
 80032f4:	e723      	b.n	800313e <HAL_RCC_OscConfig+0x1c2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032f6:	4b22      	ldr	r3, [pc, #136]	; (8003380 <HAL_RCC_OscConfig+0x404>)
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80032fe:	601a      	str	r2, [r3, #0]
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003306:	601a      	str	r2, [r3, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003308:	e779      	b.n	80031fe <HAL_RCC_OscConfig+0x282>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800330a:	4b1d      	ldr	r3, [pc, #116]	; (8003380 <HAL_RCC_OscConfig+0x404>)
 800330c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800330e:	f042 0204 	orr.w	r2, r2, #4
 8003312:	671a      	str	r2, [r3, #112]	; 0x70
 8003314:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003316:	f042 0201 	orr.w	r2, r2, #1
 800331a:	671a      	str	r2, [r3, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800331c:	e789      	b.n	8003232 <HAL_RCC_OscConfig+0x2b6>
        tickstart = HAL_GetTick();
 800331e:	f7fe fd23 	bl	8001d68 <HAL_GetTick>
 8003322:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003324:	e005      	b.n	8003332 <HAL_RCC_OscConfig+0x3b6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003326:	f7fe fd1f 	bl	8001d68 <HAL_GetTick>
 800332a:	1b80      	subs	r0, r0, r6
 800332c:	2802      	cmp	r0, #2
 800332e:	f63f af5d 	bhi.w	80031ec <HAL_RCC_OscConfig+0x270>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003332:	682b      	ldr	r3, [r5, #0]
 8003334:	0199      	lsls	r1, r3, #6
 8003336:	d4f6      	bmi.n	8003326 <HAL_RCC_OscConfig+0x3aa>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003338:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 800333c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800333e:	430b      	orrs	r3, r1
 8003340:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8003344:	e9d4 200a 	ldrd	r2, r0, [r4, #40]	; 0x28
 8003348:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800334a:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800334e:	0852      	lsrs	r2, r2, #1
 8003350:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8003354:	3a01      	subs	r2, #1
        __HAL_RCC_PLL_ENABLE();
 8003356:	490b      	ldr	r1, [pc, #44]	; (8003384 <HAL_RCC_OscConfig+0x408>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003358:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 800335c:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800335e:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8003360:	660a      	str	r2, [r1, #96]	; 0x60
        tickstart = HAL_GetTick();
 8003362:	f7fe fd01 	bl	8001d68 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003366:	4d06      	ldr	r5, [pc, #24]	; (8003380 <HAL_RCC_OscConfig+0x404>)
        tickstart = HAL_GetTick();
 8003368:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800336a:	e005      	b.n	8003378 <HAL_RCC_OscConfig+0x3fc>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800336c:	f7fe fcfc 	bl	8001d68 <HAL_GetTick>
 8003370:	1b00      	subs	r0, r0, r4
 8003372:	2802      	cmp	r0, #2
 8003374:	f63f af3a 	bhi.w	80031ec <HAL_RCC_OscConfig+0x270>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003378:	682b      	ldr	r3, [r5, #0]
 800337a:	019a      	lsls	r2, r3, #6
 800337c:	d5f6      	bpl.n	800336c <HAL_RCC_OscConfig+0x3f0>
 800337e:	e6c0      	b.n	8003102 <HAL_RCC_OscConfig+0x186>
 8003380:	40023800 	.word	0x40023800
 8003384:	42470000 	.word	0x42470000

08003388 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8003388:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800338c:	b082      	sub	sp, #8
 800338e:	461d      	mov	r5, r3
 8003390:	4616      	mov	r6, r2
 8003392:	460c      	mov	r4, r1
 8003394:	4607      	mov	r7, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003396:	f7fe fce7 	bl	8001d68 <HAL_GetTick>
 800339a:	4435      	add	r5, r6
 800339c:	1a2d      	subs	r5, r5, r0
  tmp_tickstart = HAL_GetTick();
 800339e:	f7fe fce3 	bl	8001d68 <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80033a2:	4b28      	ldr	r3, [pc, #160]	; (8003444 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xbc>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 80033aa:	fb05 f303 	mul.w	r3, r5, r3
  tmp_tickstart = HAL_GetTick();
 80033ae:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80033b0:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80033b2:	1c73      	adds	r3, r6, #1
 80033b4:	6839      	ldr	r1, [r7, #0]
 80033b6:	d107      	bne.n	80033c8 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x40>
 80033b8:	688b      	ldr	r3, [r1, #8]
 80033ba:	ea34 0303 	bics.w	r3, r4, r3
 80033be:	d0fb      	beq.n	80033b8 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x30>
      }
      count--;
    }
  }

  return HAL_OK;
 80033c0:	2000      	movs	r0, #0
}
 80033c2:	b002      	add	sp, #8
 80033c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80033c8:	688b      	ldr	r3, [r1, #8]
 80033ca:	ea34 0303 	bics.w	r3, r4, r3
 80033ce:	d1f7      	bne.n	80033c0 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x38>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80033d0:	f7fe fcca 	bl	8001d68 <HAL_GetTick>
 80033d4:	eba0 0008 	sub.w	r0, r0, r8
 80033d8:	42a8      	cmp	r0, r5
 80033da:	d208      	bcs.n	80033ee <SPI_WaitFlagStateUntilTimeout.constprop.0+0x66>
      if (count == 0U)
 80033dc:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 80033de:	2b00      	cmp	r3, #0
      count--;
 80033e0:	9b01      	ldr	r3, [sp, #4]
 80033e2:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
        tmp_timeout = 0U;
 80033e6:	bf08      	it	eq
 80033e8:	2500      	moveq	r5, #0
      count--;
 80033ea:	9301      	str	r3, [sp, #4]
 80033ec:	e7e1      	b.n	80033b2 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x2a>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033ee:	e9d7 3100 	ldrd	r3, r1, [r7]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80033f2:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033f4:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80033f8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80033fc:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033fe:	d014      	beq.n	800342a <SPI_WaitFlagStateUntilTimeout.constprop.0+0xa2>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003400:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003402:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8003406:	d007      	beq.n	8003418 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x90>
        hspi->State = HAL_SPI_STATE_READY;
 8003408:	2201      	movs	r2, #1
        __HAL_UNLOCK(hspi);
 800340a:	2300      	movs	r3, #0
        hspi->State = HAL_SPI_STATE_READY;
 800340c:	f887 2051 	strb.w	r2, [r7, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8003410:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
 8003414:	2003      	movs	r0, #3
 8003416:	e7d4      	b.n	80033c2 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x3a>
          SPI_RESET_CRC(hspi);
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800341e:	601a      	str	r2, [r3, #0]
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003426:	601a      	str	r2, [r3, #0]
 8003428:	e7ee      	b.n	8003408 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x80>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800342a:	68ba      	ldr	r2, [r7, #8]
 800342c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8003430:	d002      	beq.n	8003438 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xb0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003432:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8003436:	d1e3      	bne.n	8003400 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x78>
          __HAL_SPI_DISABLE(hspi);
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800343e:	601a      	str	r2, [r3, #0]
 8003440:	e7de      	b.n	8003400 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x78>
 8003442:	bf00      	nop
 8003444:	20000000 	.word	0x20000000

08003448 <HAL_SPI_Init>:
  if (hspi == NULL)
 8003448:	2800      	cmp	r0, #0
 800344a:	d05c      	beq.n	8003506 <HAL_SPI_Init+0xbe>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800344c:	6a41      	ldr	r1, [r0, #36]	; 0x24
{
 800344e:	b570      	push	{r4, r5, r6, lr}
 8003450:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003452:	2900      	cmp	r1, #0
 8003454:	d047      	beq.n	80034e6 <HAL_SPI_Init+0x9e>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003456:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003458:	e9c0 3304 	strd	r3, r3, [r0, #16]
  if (hspi->State == HAL_SPI_STATE_RESET)
 800345c:	f894 2051 	ldrb.w	r2, [r4, #81]	; 0x51
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003460:	2300      	movs	r3, #0
 8003462:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8003464:	f002 00ff 	and.w	r0, r2, #255	; 0xff
 8003468:	2a00      	cmp	r2, #0
 800346a:	d042      	beq.n	80034f2 <HAL_SPI_Init+0xaa>
 800346c:	469c      	mov	ip, r3
  __HAL_SPI_DISABLE(hspi);
 800346e:	6825      	ldr	r5, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003470:	68a2      	ldr	r2, [r4, #8]
  hspi->State = HAL_SPI_STATE_BUSY;
 8003472:	2302      	movs	r3, #2
 8003474:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8003478:	682b      	ldr	r3, [r5, #0]
 800347a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800347e:	602b      	str	r3, [r5, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003480:	6863      	ldr	r3, [r4, #4]
 8003482:	f402 4204 	and.w	r2, r2, #33792	; 0x8400
 8003486:	f403 7382 	and.w	r3, r3, #260	; 0x104
 800348a:	4313      	orrs	r3, r2
 800348c:	68e2      	ldr	r2, [r4, #12]
 800348e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003492:	4313      	orrs	r3, r2
 8003494:	6922      	ldr	r2, [r4, #16]
 8003496:	f002 0202 	and.w	r2, r2, #2
 800349a:	4313      	orrs	r3, r2
 800349c:	6962      	ldr	r2, [r4, #20]
 800349e:	f002 0201 	and.w	r2, r2, #1
 80034a2:	431a      	orrs	r2, r3
 80034a4:	69e3      	ldr	r3, [r4, #28]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80034a6:	f001 0010 	and.w	r0, r1, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80034aa:	f003 0638 	and.w	r6, r3, #56	; 0x38
 80034ae:	69a1      	ldr	r1, [r4, #24]
 80034b0:	6a23      	ldr	r3, [r4, #32]
 80034b2:	f003 0e80 	and.w	lr, r3, #128	; 0x80
 80034b6:	f401 7300 	and.w	r3, r1, #512	; 0x200
 80034ba:	4313      	orrs	r3, r2
 80034bc:	4333      	orrs	r3, r6
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80034be:	0c09      	lsrs	r1, r1, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80034c0:	ea43 030e 	orr.w	r3, r3, lr
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80034c4:	f001 0104 	and.w	r1, r1, #4
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80034c8:	ea43 030c 	orr.w	r3, r3, ip
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80034cc:	4301      	orrs	r1, r0
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80034ce:	602b      	str	r3, [r5, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80034d0:	6069      	str	r1, [r5, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80034d2:	69eb      	ldr	r3, [r5, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80034d4:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80034d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  hspi->State     = HAL_SPI_STATE_READY;
 80034da:	2201      	movs	r2, #1
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80034dc:	61eb      	str	r3, [r5, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80034de:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80034e0:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
}
 80034e4:	bd70      	pop	{r4, r5, r6, pc}
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80034e6:	6843      	ldr	r3, [r0, #4]
 80034e8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034ec:	d0b6      	beq.n	800345c <HAL_SPI_Init+0x14>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80034ee:	61c1      	str	r1, [r0, #28]
 80034f0:	e7b4      	b.n	800345c <HAL_SPI_Init+0x14>
    hspi->Lock = HAL_UNLOCKED;
 80034f2:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 80034f6:	4620      	mov	r0, r4
 80034f8:	f7fe fa12 	bl	8001920 <HAL_SPI_MspInit>
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80034fc:	e9d4 1309 	ldrd	r1, r3, [r4, #36]	; 0x24
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003500:	f403 5c00 	and.w	ip, r3, #8192	; 0x2000
 8003504:	e7b3      	b.n	800346e <HAL_SPI_Init+0x26>
    return HAL_ERROR;
 8003506:	2001      	movs	r0, #1
}
 8003508:	4770      	bx	lr
 800350a:	bf00      	nop

0800350c <HAL_SPI_Transmit>:
{
 800350c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003510:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 8003512:	f890 0050 	ldrb.w	r0, [r0, #80]	; 0x50
 8003516:	2801      	cmp	r0, #1
{
 8003518:	b082      	sub	sp, #8
  __HAL_LOCK(hspi);
 800351a:	f000 8087 	beq.w	800362c <HAL_SPI_Transmit+0x120>
 800351e:	461d      	mov	r5, r3
 8003520:	2301      	movs	r3, #1
 8003522:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 8003526:	4688      	mov	r8, r1
 8003528:	4617      	mov	r7, r2
 800352a:	f7fe fc1d 	bl	8001d68 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 800352e:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8003532:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8003534:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8003536:	b2d8      	uxtb	r0, r3
 8003538:	d009      	beq.n	800354e <HAL_SPI_Transmit+0x42>
    errorcode = HAL_BUSY;
 800353a:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 800353c:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 800353e:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 8003540:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003544:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8003548:	b002      	add	sp, #8
 800354a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((pData == NULL) || (Size == 0U))
 800354e:	f1b8 0f00 	cmp.w	r8, #0
 8003552:	d0f3      	beq.n	800353c <HAL_SPI_Transmit+0x30>
 8003554:	2f00      	cmp	r7, #0
 8003556:	d0f1      	beq.n	800353c <HAL_SPI_Transmit+0x30>
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003558:	68a2      	ldr	r2, [r4, #8]
    __HAL_SPI_DISABLE(hspi);
 800355a:	6820      	ldr	r0, [r4, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800355c:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003560:	2300      	movs	r3, #0
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003562:	2103      	movs	r1, #3
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003564:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003568:	f884 1051 	strb.w	r1, [r4, #81]	; 0x51
  hspi->RxISR       = NULL;
 800356c:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003570:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->TxXferSize  = Size;
 8003572:	86a7      	strh	r7, [r4, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003574:	86e7      	strh	r7, [r4, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003576:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003578:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800357a:	87e3      	strh	r3, [r4, #62]	; 0x3e
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800357c:	f000 8083 	beq.w	8003686 <HAL_SPI_Transmit+0x17a>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003580:	6803      	ldr	r3, [r0, #0]
 8003582:	065b      	lsls	r3, r3, #25
    __HAL_SPI_DISABLE(hspi);
 8003584:	4684      	mov	ip, r0
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003586:	d403      	bmi.n	8003590 <HAL_SPI_Transmit+0x84>
    __HAL_SPI_ENABLE(hspi);
 8003588:	6803      	ldr	r3, [r0, #0]
 800358a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800358e:	6003      	str	r3, [r0, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003590:	68e3      	ldr	r3, [r4, #12]
 8003592:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003596:	6863      	ldr	r3, [r4, #4]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003598:	d04c      	beq.n	8003634 <HAL_SPI_Transmit+0x128>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800359a:	2b00      	cmp	r3, #0
 800359c:	f000 8095 	beq.w	80036ca <HAL_SPI_Transmit+0x1be>
 80035a0:	2f01      	cmp	r7, #1
 80035a2:	f000 8092 	beq.w	80036ca <HAL_SPI_Transmit+0x1be>
    while (hspi->TxXferCount > 0U)
 80035a6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80035a8:	b29b      	uxth	r3, r3
 80035aa:	b1bb      	cbz	r3, 80035dc <HAL_SPI_Transmit+0xd0>
 80035ac:	2d00      	cmp	r5, #0
 80035ae:	f000 80cb 	beq.w	8003748 <HAL_SPI_Transmit+0x23c>
 80035b2:	1c6f      	adds	r7, r5, #1
 80035b4:	d17e      	bne.n	80036b4 <HAL_SPI_Transmit+0x1a8>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80035b6:	6823      	ldr	r3, [r4, #0]
 80035b8:	689a      	ldr	r2, [r3, #8]
 80035ba:	0790      	lsls	r0, r2, #30
 80035bc:	f140 8090 	bpl.w	80036e0 <HAL_SPI_Transmit+0x1d4>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80035c0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80035c2:	7812      	ldrb	r2, [r2, #0]
 80035c4:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 80035c6:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80035c8:	6b23      	ldr	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80035ca:	3901      	subs	r1, #1
 80035cc:	b289      	uxth	r1, r1
 80035ce:	86e1      	strh	r1, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 80035d0:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80035d2:	3301      	adds	r3, #1
    while (hspi->TxXferCount > 0U)
 80035d4:	b289      	uxth	r1, r1
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80035d6:	6323      	str	r3, [r4, #48]	; 0x30
    while (hspi->TxXferCount > 0U)
 80035d8:	2900      	cmp	r1, #0
 80035da:	d1ec      	bne.n	80035b6 <HAL_SPI_Transmit+0xaa>
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80035dc:	6862      	ldr	r2, [r4, #4]
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80035de:	4b72      	ldr	r3, [pc, #456]	; (80037a8 <HAL_SPI_Transmit+0x29c>)
 80035e0:	4972      	ldr	r1, [pc, #456]	; (80037ac <HAL_SPI_Transmit+0x2a0>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	fba1 1303 	umull	r1, r3, r1, r3
 80035e8:	0d5b      	lsrs	r3, r3, #21
 80035ea:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80035ee:	fb01 f303 	mul.w	r3, r1, r3
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80035f2:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80035f6:	9301      	str	r3, [sp, #4]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80035f8:	d107      	bne.n	800360a <HAL_SPI_Transmit+0xfe>
 80035fa:	e0c6      	b.n	800378a <HAL_SPI_Transmit+0x27e>
    {
      if (count == 0U)
      {
        break;
      }
      count--;
 80035fc:	9b01      	ldr	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80035fe:	6822      	ldr	r2, [r4, #0]
      count--;
 8003600:	3b01      	subs	r3, #1
 8003602:	9301      	str	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003604:	6893      	ldr	r3, [r2, #8]
 8003606:	061b      	lsls	r3, r3, #24
 8003608:	d502      	bpl.n	8003610 <HAL_SPI_Transmit+0x104>
      if (count == 0U)
 800360a:	9b01      	ldr	r3, [sp, #4]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d1f5      	bne.n	80035fc <HAL_SPI_Transmit+0xf0>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003610:	68a3      	ldr	r3, [r4, #8]
 8003612:	b933      	cbnz	r3, 8003622 <HAL_SPI_Transmit+0x116>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003614:	6822      	ldr	r2, [r4, #0]
 8003616:	9300      	str	r3, [sp, #0]
 8003618:	68d3      	ldr	r3, [r2, #12]
 800361a:	9300      	str	r3, [sp, #0]
 800361c:	6893      	ldr	r3, [r2, #8]
 800361e:	9300      	str	r3, [sp, #0]
 8003620:	9b00      	ldr	r3, [sp, #0]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003622:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 8003624:	3800      	subs	r0, #0
 8003626:	bf18      	it	ne
 8003628:	2001      	movne	r0, #1
error:
 800362a:	e787      	b.n	800353c <HAL_SPI_Transmit+0x30>
  __HAL_LOCK(hspi);
 800362c:	2002      	movs	r0, #2
}
 800362e:	b002      	add	sp, #8
 8003630:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003634:	461a      	mov	r2, r3
 8003636:	2b00      	cmp	r3, #0
 8003638:	d174      	bne.n	8003724 <HAL_SPI_Transmit+0x218>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800363a:	4641      	mov	r1, r8
 800363c:	f831 7b02 	ldrh.w	r7, [r1], #2
 8003640:	60c7      	str	r7, [r0, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003642:	6321      	str	r1, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8003644:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
 8003646:	3901      	subs	r1, #1
 8003648:	b289      	uxth	r1, r1
 800364a:	86e1      	strh	r1, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 800364c:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
 800364e:	b289      	uxth	r1, r1
 8003650:	2900      	cmp	r1, #0
 8003652:	d0c4      	beq.n	80035de <HAL_SPI_Transmit+0xd2>
 8003654:	2d00      	cmp	r5, #0
 8003656:	f000 808b 	beq.w	8003770 <HAL_SPI_Transmit+0x264>
 800365a:	1c69      	adds	r1, r5, #1
 800365c:	d158      	bne.n	8003710 <HAL_SPI_Transmit+0x204>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800365e:	6883      	ldr	r3, [r0, #8]
 8003660:	079a      	lsls	r2, r3, #30
 8003662:	f140 8089 	bpl.w	8003778 <HAL_SPI_Transmit+0x26c>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003666:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003668:	f832 3b02 	ldrh.w	r3, [r2], #2
 800366c:	60c3      	str	r3, [r0, #12]
        hspi->TxXferCount--;
 800366e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003670:	6322      	str	r2, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8003672:	3b01      	subs	r3, #1
 8003674:	b29b      	uxth	r3, r3
 8003676:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8003678:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800367a:	b29b      	uxth	r3, r3
 800367c:	2b00      	cmp	r3, #0
 800367e:	d1ee      	bne.n	800365e <HAL_SPI_Transmit+0x152>
 8003680:	6863      	ldr	r3, [r4, #4]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003682:	461a      	mov	r2, r3
 8003684:	e7ab      	b.n	80035de <HAL_SPI_Transmit+0xd2>
    __HAL_SPI_DISABLE(hspi);
 8003686:	6803      	ldr	r3, [r0, #0]
 8003688:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800368c:	6003      	str	r3, [r0, #0]
    SPI_1LINE_TX(hspi);
 800368e:	6803      	ldr	r3, [r0, #0]
 8003690:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003694:	6003      	str	r3, [r0, #0]
 8003696:	e773      	b.n	8003580 <HAL_SPI_Transmit+0x74>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003698:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800369a:	7812      	ldrb	r2, [r2, #0]
 800369c:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 800369e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80036a0:	6b22      	ldr	r2, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80036a2:	3b01      	subs	r3, #1
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80036a4:	3201      	adds	r2, #1
        hspi->TxXferCount--;
 80036a6:	b29b      	uxth	r3, r3
 80036a8:	86e3      	strh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80036aa:	6322      	str	r2, [r4, #48]	; 0x30
    while (hspi->TxXferCount > 0U)
 80036ac:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80036ae:	b29b      	uxth	r3, r3
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d093      	beq.n	80035dc <HAL_SPI_Transmit+0xd0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80036b4:	6823      	ldr	r3, [r4, #0]
 80036b6:	689a      	ldr	r2, [r3, #8]
 80036b8:	0791      	lsls	r1, r2, #30
 80036ba:	d4ed      	bmi.n	8003698 <HAL_SPI_Transmit+0x18c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80036bc:	f7fe fb54 	bl	8001d68 <HAL_GetTick>
 80036c0:	1b80      	subs	r0, r0, r6
 80036c2:	4285      	cmp	r5, r0
 80036c4:	d8f2      	bhi.n	80036ac <HAL_SPI_Transmit+0x1a0>
          errorcode = HAL_TIMEOUT;
 80036c6:	2003      	movs	r0, #3
 80036c8:	e738      	b.n	800353c <HAL_SPI_Transmit+0x30>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80036ca:	f898 3000 	ldrb.w	r3, [r8]
 80036ce:	7303      	strb	r3, [r0, #12]
      hspi->TxXferCount--;
 80036d0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80036d2:	6b22      	ldr	r2, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80036d4:	3b01      	subs	r3, #1
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80036d6:	3201      	adds	r2, #1
      hspi->TxXferCount--;
 80036d8:	b29b      	uxth	r3, r3
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80036da:	6322      	str	r2, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80036dc:	86e3      	strh	r3, [r4, #54]	; 0x36
 80036de:	e762      	b.n	80035a6 <HAL_SPI_Transmit+0x9a>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80036e0:	f7fe fb42 	bl	8001d68 <HAL_GetTick>
    while (hspi->TxXferCount > 0U)
 80036e4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80036e6:	b29b      	uxth	r3, r3
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	f47f af64 	bne.w	80035b6 <HAL_SPI_Transmit+0xaa>
 80036ee:	e775      	b.n	80035dc <HAL_SPI_Transmit+0xd0>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80036f0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80036f2:	f832 3b02 	ldrh.w	r3, [r2], #2
 80036f6:	f8cc 300c 	str.w	r3, [ip, #12]
        hspi->TxXferCount--;
 80036fa:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80036fc:	6322      	str	r2, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80036fe:	3b01      	subs	r3, #1
 8003700:	b29b      	uxth	r3, r3
 8003702:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8003704:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003706:	b29b      	uxth	r3, r3
 8003708:	2b00      	cmp	r3, #0
 800370a:	d0b9      	beq.n	8003680 <HAL_SPI_Transmit+0x174>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800370c:	f8d4 c000 	ldr.w	ip, [r4]
 8003710:	f8dc 3008 	ldr.w	r3, [ip, #8]
 8003714:	079b      	lsls	r3, r3, #30
 8003716:	d4eb      	bmi.n	80036f0 <HAL_SPI_Transmit+0x1e4>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003718:	f7fe fb26 	bl	8001d68 <HAL_GetTick>
 800371c:	1b80      	subs	r0, r0, r6
 800371e:	4285      	cmp	r5, r0
 8003720:	d9d1      	bls.n	80036c6 <HAL_SPI_Transmit+0x1ba>
 8003722:	e7ef      	b.n	8003704 <HAL_SPI_Transmit+0x1f8>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003724:	2f01      	cmp	r7, #1
 8003726:	d191      	bne.n	800364c <HAL_SPI_Transmit+0x140>
 8003728:	e787      	b.n	800363a <HAL_SPI_Transmit+0x12e>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800372a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800372c:	7812      	ldrb	r2, [r2, #0]
 800372e:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 8003730:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003732:	6b22      	ldr	r2, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8003734:	3b01      	subs	r3, #1
 8003736:	b29b      	uxth	r3, r3
 8003738:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 800373a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800373c:	3201      	adds	r2, #1
    while (hspi->TxXferCount > 0U)
 800373e:	b29b      	uxth	r3, r3
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003740:	6322      	str	r2, [r4, #48]	; 0x30
    while (hspi->TxXferCount > 0U)
 8003742:	2b00      	cmp	r3, #0
 8003744:	f43f af4a 	beq.w	80035dc <HAL_SPI_Transmit+0xd0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003748:	6823      	ldr	r3, [r4, #0]
 800374a:	689a      	ldr	r2, [r3, #8]
 800374c:	0792      	lsls	r2, r2, #30
 800374e:	d4ec      	bmi.n	800372a <HAL_SPI_Transmit+0x21e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003750:	f7fe fb0a 	bl	8001d68 <HAL_GetTick>
 8003754:	e7b7      	b.n	80036c6 <HAL_SPI_Transmit+0x1ba>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003756:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8003758:	f831 2b02 	ldrh.w	r2, [r1], #2
 800375c:	60c2      	str	r2, [r0, #12]
        hspi->TxXferCount--;
 800375e:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003760:	6321      	str	r1, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8003762:	3a01      	subs	r2, #1
 8003764:	b292      	uxth	r2, r2
 8003766:	86e2      	strh	r2, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8003768:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 800376a:	b292      	uxth	r2, r2
 800376c:	2a00      	cmp	r2, #0
 800376e:	d088      	beq.n	8003682 <HAL_SPI_Transmit+0x176>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003770:	6882      	ldr	r2, [r0, #8]
 8003772:	0797      	lsls	r7, r2, #30
 8003774:	d5ec      	bpl.n	8003750 <HAL_SPI_Transmit+0x244>
 8003776:	e7ee      	b.n	8003756 <HAL_SPI_Transmit+0x24a>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003778:	f7fe faf6 	bl	8001d68 <HAL_GetTick>
    while (hspi->TxXferCount > 0U)
 800377c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800377e:	b29b      	uxth	r3, r3
 8003780:	2b00      	cmp	r3, #0
 8003782:	f43f af7d 	beq.w	8003680 <HAL_SPI_Transmit+0x174>
 8003786:	6820      	ldr	r0, [r4, #0]
 8003788:	e769      	b.n	800365e <HAL_SPI_Transmit+0x152>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800378a:	4633      	mov	r3, r6
 800378c:	462a      	mov	r2, r5
 800378e:	2180      	movs	r1, #128	; 0x80
 8003790:	4620      	mov	r0, r4
 8003792:	f7ff fdf9 	bl	8003388 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8003796:	2800      	cmp	r0, #0
 8003798:	f43f af3a 	beq.w	8003610 <HAL_SPI_Transmit+0x104>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800379c:	6d63      	ldr	r3, [r4, #84]	; 0x54
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800379e:	2220      	movs	r2, #32
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80037a0:	4313      	orrs	r3, r2
 80037a2:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80037a4:	6562      	str	r2, [r4, #84]	; 0x54
 80037a6:	e733      	b.n	8003610 <HAL_SPI_Transmit+0x104>
 80037a8:	20000000 	.word	0x20000000
 80037ac:	165e9f81 	.word	0x165e9f81

080037b0 <HAL_SPI_TransmitReceive>:
{
 80037b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80037b4:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 80037b6:	f890 0050 	ldrb.w	r0, [r0, #80]	; 0x50
{
 80037ba:	b083      	sub	sp, #12
  __HAL_LOCK(hspi);
 80037bc:	2801      	cmp	r0, #1
{
 80037be:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 80037c0:	f000 8083 	beq.w	80038ca <HAL_SPI_TransmitReceive+0x11a>
 80037c4:	461f      	mov	r7, r3
 80037c6:	2301      	movs	r3, #1
 80037c8:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 80037cc:	4689      	mov	r9, r1
 80037ce:	4690      	mov	r8, r2
 80037d0:	f7fe faca 	bl	8001d68 <HAL_GetTick>
 80037d4:	4606      	mov	r6, r0
  tmp_state           = hspi->State;
 80037d6:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
  tmp_mode            = hspi->Init.Mode;
 80037da:	6863      	ldr	r3, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80037dc:	2801      	cmp	r0, #1
  tmp_state           = hspi->State;
 80037de:	b2c1      	uxtb	r1, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80037e0:	d011      	beq.n	8003806 <HAL_SPI_TransmitReceive+0x56>
 80037e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80037e6:	d009      	beq.n	80037fc <HAL_SPI_TransmitReceive+0x4c>
    errorcode = HAL_BUSY;
 80037e8:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 80037ea:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 80037ec:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 80037ee:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80037f2:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 80037f6:	b003      	add	sp, #12
 80037f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80037fc:	68a2      	ldr	r2, [r4, #8]
 80037fe:	2a00      	cmp	r2, #0
 8003800:	d1f2      	bne.n	80037e8 <HAL_SPI_TransmitReceive+0x38>
 8003802:	2904      	cmp	r1, #4
 8003804:	d1f0      	bne.n	80037e8 <HAL_SPI_TransmitReceive+0x38>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003806:	f1b9 0f00 	cmp.w	r9, #0
 800380a:	d062      	beq.n	80038d2 <HAL_SPI_TransmitReceive+0x122>
 800380c:	f1b8 0f00 	cmp.w	r8, #0
 8003810:	d05f      	beq.n	80038d2 <HAL_SPI_TransmitReceive+0x122>
 8003812:	2f00      	cmp	r7, #0
 8003814:	d05d      	beq.n	80038d2 <HAL_SPI_TransmitReceive+0x122>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003816:	f894 2051 	ldrb.w	r2, [r4, #81]	; 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800381a:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800381e:	2a04      	cmp	r2, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003820:	bf1c      	itt	ne
 8003822:	2205      	movne	r2, #5
 8003824:	f884 2051 	strbne.w	r2, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003828:	2200      	movs	r2, #0
 800382a:	6562      	str	r2, [r4, #84]	; 0x54
  hspi->TxISR       = NULL;
 800382c:	e9c4 2210 	strd	r2, r2, [r4, #64]	; 0x40
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003830:	6822      	ldr	r2, [r4, #0]
  hspi->RxXferCount = Size;
 8003832:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 8003834:	86e7      	strh	r7, [r4, #54]	; 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003836:	6811      	ldr	r1, [r2, #0]
  hspi->RxXferSize  = Size;
 8003838:	87a7      	strh	r7, [r4, #60]	; 0x3c
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800383a:	0649      	lsls	r1, r1, #25
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800383c:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003840:	86a7      	strh	r7, [r4, #52]	; 0x34
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003842:	d403      	bmi.n	800384c <HAL_SPI_TransmitReceive+0x9c>
    __HAL_SPI_ENABLE(hspi);
 8003844:	6811      	ldr	r1, [r2, #0]
 8003846:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 800384a:	6011      	str	r1, [r2, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800384c:	68e1      	ldr	r1, [r4, #12]
 800384e:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8003852:	d04e      	beq.n	80038f2 <HAL_SPI_TransmitReceive+0x142>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003854:	2b00      	cmp	r3, #0
 8003856:	d03e      	beq.n	80038d6 <HAL_SPI_TransmitReceive+0x126>
 8003858:	2f01      	cmp	r7, #1
 800385a:	d03c      	beq.n	80038d6 <HAL_SPI_TransmitReceive+0x126>
        txallowed = 1U;
 800385c:	2701      	movs	r7, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800385e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003860:	b29b      	uxth	r3, r3
 8003862:	b91b      	cbnz	r3, 800386c <HAL_SPI_TransmitReceive+0xbc>
 8003864:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003866:	b29b      	uxth	r3, r3
 8003868:	2b00      	cmp	r3, #0
 800386a:	d07f      	beq.n	800396c <HAL_SPI_TransmitReceive+0x1bc>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800386c:	6822      	ldr	r2, [r4, #0]
 800386e:	6893      	ldr	r3, [r2, #8]
 8003870:	0799      	lsls	r1, r3, #30
 8003872:	d50f      	bpl.n	8003894 <HAL_SPI_TransmitReceive+0xe4>
 8003874:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003876:	b29b      	uxth	r3, r3
 8003878:	b163      	cbz	r3, 8003894 <HAL_SPI_TransmitReceive+0xe4>
 800387a:	b15f      	cbz	r7, 8003894 <HAL_SPI_TransmitReceive+0xe4>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800387c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800387e:	781b      	ldrb	r3, [r3, #0]
 8003880:	7313      	strb	r3, [r2, #12]
        hspi->TxXferCount--;
 8003882:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr++;
 8003884:	6b22      	ldr	r2, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8003886:	3b01      	subs	r3, #1
        hspi->pTxBuffPtr++;
 8003888:	3201      	adds	r2, #1
        hspi->TxXferCount--;
 800388a:	b29b      	uxth	r3, r3
        hspi->pTxBuffPtr++;
 800388c:	6322      	str	r2, [r4, #48]	; 0x30
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800388e:	6822      	ldr	r2, [r4, #0]
        hspi->TxXferCount--;
 8003890:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8003892:	2700      	movs	r7, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003894:	6893      	ldr	r3, [r2, #8]
 8003896:	f013 0301 	ands.w	r3, r3, #1
 800389a:	d00d      	beq.n	80038b8 <HAL_SPI_TransmitReceive+0x108>
 800389c:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 800389e:	b289      	uxth	r1, r1
 80038a0:	b151      	cbz	r1, 80038b8 <HAL_SPI_TransmitReceive+0x108>
        txallowed = 1U;
 80038a2:	461f      	mov	r7, r3
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80038a4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80038a6:	68d2      	ldr	r2, [r2, #12]
 80038a8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80038aa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80038ac:	3301      	adds	r3, #1
 80038ae:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80038b0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80038b2:	3b01      	subs	r3, #1
 80038b4:	b29b      	uxth	r3, r3
 80038b6:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80038b8:	f7fe fa56 	bl	8001d68 <HAL_GetTick>
 80038bc:	1b80      	subs	r0, r0, r6
 80038be:	42a8      	cmp	r0, r5
 80038c0:	d314      	bcc.n	80038ec <HAL_SPI_TransmitReceive+0x13c>
 80038c2:	1c6a      	adds	r2, r5, #1
 80038c4:	d0cb      	beq.n	800385e <HAL_SPI_TransmitReceive+0xae>
        errorcode = HAL_TIMEOUT;
 80038c6:	2003      	movs	r0, #3
 80038c8:	e78f      	b.n	80037ea <HAL_SPI_TransmitReceive+0x3a>
  __HAL_LOCK(hspi);
 80038ca:	2002      	movs	r0, #2
}
 80038cc:	b003      	add	sp, #12
 80038ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    errorcode = HAL_ERROR;
 80038d2:	2001      	movs	r0, #1
 80038d4:	e789      	b.n	80037ea <HAL_SPI_TransmitReceive+0x3a>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80038d6:	f899 3000 	ldrb.w	r3, [r9]
 80038da:	7313      	strb	r3, [r2, #12]
      hspi->TxXferCount--;
 80038dc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80038de:	6b22      	ldr	r2, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80038e0:	3b01      	subs	r3, #1
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80038e2:	3201      	adds	r2, #1
      hspi->TxXferCount--;
 80038e4:	b29b      	uxth	r3, r3
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80038e6:	6322      	str	r2, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80038e8:	86e3      	strh	r3, [r4, #54]	; 0x36
 80038ea:	e7b7      	b.n	800385c <HAL_SPI_TransmitReceive+0xac>
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80038ec:	2d00      	cmp	r5, #0
 80038ee:	d1b6      	bne.n	800385e <HAL_SPI_TransmitReceive+0xae>
 80038f0:	e7e9      	b.n	80038c6 <HAL_SPI_TransmitReceive+0x116>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d16c      	bne.n	80039d0 <HAL_SPI_TransmitReceive+0x220>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80038f6:	4649      	mov	r1, r9
 80038f8:	f831 3b02 	ldrh.w	r3, [r1], #2
 80038fc:	60d3      	str	r3, [r2, #12]
      hspi->TxXferCount--;
 80038fe:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003900:	6321      	str	r1, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8003902:	3b01      	subs	r3, #1
 8003904:	b29b      	uxth	r3, r3
 8003906:	86e3      	strh	r3, [r4, #54]	; 0x36
 8003908:	1c6a      	adds	r2, r5, #1
{
 800390a:	f04f 0701 	mov.w	r7, #1
 800390e:	d025      	beq.n	800395c <HAL_SPI_TransmitReceive+0x1ac>
 8003910:	e061      	b.n	80039d6 <HAL_SPI_TransmitReceive+0x226>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003912:	6822      	ldr	r2, [r4, #0]
 8003914:	6893      	ldr	r3, [r2, #8]
 8003916:	079b      	lsls	r3, r3, #30
 8003918:	d50d      	bpl.n	8003936 <HAL_SPI_TransmitReceive+0x186>
 800391a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800391c:	b29b      	uxth	r3, r3
 800391e:	b153      	cbz	r3, 8003936 <HAL_SPI_TransmitReceive+0x186>
 8003920:	b14f      	cbz	r7, 8003936 <HAL_SPI_TransmitReceive+0x186>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003922:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8003924:	f831 3b02 	ldrh.w	r3, [r1], #2
 8003928:	60d3      	str	r3, [r2, #12]
        hspi->TxXferCount--;
 800392a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800392c:	6321      	str	r1, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800392e:	3b01      	subs	r3, #1
 8003930:	b29b      	uxth	r3, r3
        txallowed = 0U;
 8003932:	2700      	movs	r7, #0
        hspi->TxXferCount--;
 8003934:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003936:	6893      	ldr	r3, [r2, #8]
 8003938:	f013 0301 	ands.w	r3, r3, #1
 800393c:	d00c      	beq.n	8003958 <HAL_SPI_TransmitReceive+0x1a8>
 800393e:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 8003940:	b289      	uxth	r1, r1
 8003942:	b149      	cbz	r1, 8003958 <HAL_SPI_TransmitReceive+0x1a8>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003944:	68d1      	ldr	r1, [r2, #12]
 8003946:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003948:	f822 1b02 	strh.w	r1, [r2], #2
        txallowed = 1U;
 800394c:	461f      	mov	r7, r3
        hspi->RxXferCount--;
 800394e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003950:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8003952:	3b01      	subs	r3, #1
 8003954:	b29b      	uxth	r3, r3
 8003956:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003958:	f7fe fa06 	bl	8001d68 <HAL_GetTick>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800395c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800395e:	b29b      	uxth	r3, r3
 8003960:	2b00      	cmp	r3, #0
 8003962:	d1d6      	bne.n	8003912 <HAL_SPI_TransmitReceive+0x162>
 8003964:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003966:	b29b      	uxth	r3, r3
 8003968:	2b00      	cmp	r3, #0
 800396a:	d1d2      	bne.n	8003912 <HAL_SPI_TransmitReceive+0x162>
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800396c:	4b33      	ldr	r3, [pc, #204]	; (8003a3c <HAL_SPI_TransmitReceive+0x28c>)
 800396e:	4a34      	ldr	r2, [pc, #208]	; (8003a40 <HAL_SPI_TransmitReceive+0x290>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	fba2 2303 	umull	r2, r3, r2, r3
 8003976:	0d5b      	lsrs	r3, r3, #21
 8003978:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800397c:	fb02 f303 	mul.w	r3, r2, r3
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003980:	6862      	ldr	r2, [r4, #4]
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003982:	9301      	str	r3, [sp, #4]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003984:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8003988:	d114      	bne.n	80039b4 <HAL_SPI_TransmitReceive+0x204>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800398a:	4633      	mov	r3, r6
 800398c:	462a      	mov	r2, r5
 800398e:	2180      	movs	r1, #128	; 0x80
 8003990:	4620      	mov	r0, r4
 8003992:	f7ff fcf9 	bl	8003388 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8003996:	b180      	cbz	r0, 80039ba <HAL_SPI_TransmitReceive+0x20a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003998:	6d63      	ldr	r3, [r4, #84]	; 0x54
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800399a:	2220      	movs	r2, #32
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800399c:	4313      	orrs	r3, r2
 800399e:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 80039a0:	2001      	movs	r0, #1
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80039a2:	6562      	str	r2, [r4, #84]	; 0x54
    goto error;
 80039a4:	e721      	b.n	80037ea <HAL_SPI_TransmitReceive+0x3a>
      count--;
 80039a6:	9b01      	ldr	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80039a8:	6822      	ldr	r2, [r4, #0]
      count--;
 80039aa:	3b01      	subs	r3, #1
 80039ac:	9301      	str	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80039ae:	6893      	ldr	r3, [r2, #8]
 80039b0:	061b      	lsls	r3, r3, #24
 80039b2:	d502      	bpl.n	80039ba <HAL_SPI_TransmitReceive+0x20a>
      if (count == 0U)
 80039b4:	9b01      	ldr	r3, [sp, #4]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d1f5      	bne.n	80039a6 <HAL_SPI_TransmitReceive+0x1f6>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80039ba:	68a0      	ldr	r0, [r4, #8]
 80039bc:	2800      	cmp	r0, #0
 80039be:	d13a      	bne.n	8003a36 <HAL_SPI_TransmitReceive+0x286>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80039c0:	6823      	ldr	r3, [r4, #0]
 80039c2:	9000      	str	r0, [sp, #0]
 80039c4:	68da      	ldr	r2, [r3, #12]
 80039c6:	9200      	str	r2, [sp, #0]
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	9300      	str	r3, [sp, #0]
 80039cc:	9b00      	ldr	r3, [sp, #0]
 80039ce:	e70c      	b.n	80037ea <HAL_SPI_TransmitReceive+0x3a>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80039d0:	2f01      	cmp	r7, #1
 80039d2:	d199      	bne.n	8003908 <HAL_SPI_TransmitReceive+0x158>
 80039d4:	e78f      	b.n	80038f6 <HAL_SPI_TransmitReceive+0x146>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80039d6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80039d8:	b29b      	uxth	r3, r3
 80039da:	b91b      	cbnz	r3, 80039e4 <HAL_SPI_TransmitReceive+0x234>
 80039dc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80039de:	b29b      	uxth	r3, r3
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d0c3      	beq.n	800396c <HAL_SPI_TransmitReceive+0x1bc>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80039e4:	6822      	ldr	r2, [r4, #0]
 80039e6:	6893      	ldr	r3, [r2, #8]
 80039e8:	0798      	lsls	r0, r3, #30
 80039ea:	d50d      	bpl.n	8003a08 <HAL_SPI_TransmitReceive+0x258>
 80039ec:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80039ee:	b29b      	uxth	r3, r3
 80039f0:	b153      	cbz	r3, 8003a08 <HAL_SPI_TransmitReceive+0x258>
 80039f2:	b14f      	cbz	r7, 8003a08 <HAL_SPI_TransmitReceive+0x258>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80039f4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80039f6:	f833 1b02 	ldrh.w	r1, [r3], #2
 80039fa:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80039fc:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80039fe:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003a00:	3b01      	subs	r3, #1
 8003a02:	b29b      	uxth	r3, r3
        txallowed = 0U;
 8003a04:	2700      	movs	r7, #0
        hspi->TxXferCount--;
 8003a06:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003a08:	6893      	ldr	r3, [r2, #8]
 8003a0a:	f013 0301 	ands.w	r3, r3, #1
 8003a0e:	d00c      	beq.n	8003a2a <HAL_SPI_TransmitReceive+0x27a>
 8003a10:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 8003a12:	b289      	uxth	r1, r1
 8003a14:	b149      	cbz	r1, 8003a2a <HAL_SPI_TransmitReceive+0x27a>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003a16:	68d1      	ldr	r1, [r2, #12]
 8003a18:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003a1a:	f822 1b02 	strh.w	r1, [r2], #2
        txallowed = 1U;
 8003a1e:	461f      	mov	r7, r3
        hspi->RxXferCount--;
 8003a20:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003a22:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8003a24:	3b01      	subs	r3, #1
 8003a26:	b29b      	uxth	r3, r3
 8003a28:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003a2a:	f7fe f99d 	bl	8001d68 <HAL_GetTick>
 8003a2e:	1b80      	subs	r0, r0, r6
 8003a30:	42a8      	cmp	r0, r5
 8003a32:	d3d0      	bcc.n	80039d6 <HAL_SPI_TransmitReceive+0x226>
 8003a34:	e747      	b.n	80038c6 <HAL_SPI_TransmitReceive+0x116>
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003a36:	2000      	movs	r0, #0
 8003a38:	e6d7      	b.n	80037ea <HAL_SPI_TransmitReceive+0x3a>
 8003a3a:	bf00      	nop
 8003a3c:	20000000 	.word	0x20000000
 8003a40:	165e9f81 	.word	0x165e9f81

08003a44 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a44:	2800      	cmp	r0, #0
 8003a46:	f000 8087 	beq.w	8003b58 <HAL_TIM_Base_Init+0x114>
{
 8003a4a:	b510      	push	{r4, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a4c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003a50:	4604      	mov	r4, r0
 8003a52:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d079      	beq.n	8003b4e <HAL_TIM_Base_Init+0x10a>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a5a:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a5c:	493f      	ldr	r1, [pc, #252]	; (8003b5c <HAL_TIM_Base_Init+0x118>)
  htim->State = HAL_TIM_STATE_BUSY;
 8003a5e:	2302      	movs	r3, #2
 8003a60:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a64:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 8003a66:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a68:	d05d      	beq.n	8003b26 <HAL_TIM_Base_Init+0xe2>
 8003a6a:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8003a6e:	d031      	beq.n	8003ad4 <HAL_TIM_Base_Init+0x90>
 8003a70:	f5a1 417c 	sub.w	r1, r1, #64512	; 0xfc00
 8003a74:	428a      	cmp	r2, r1
 8003a76:	d02d      	beq.n	8003ad4 <HAL_TIM_Base_Init+0x90>
 8003a78:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8003a7c:	428a      	cmp	r2, r1
 8003a7e:	d029      	beq.n	8003ad4 <HAL_TIM_Base_Init+0x90>
 8003a80:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8003a84:	428a      	cmp	r2, r1
 8003a86:	d025      	beq.n	8003ad4 <HAL_TIM_Base_Init+0x90>
 8003a88:	f501 4178 	add.w	r1, r1, #63488	; 0xf800
 8003a8c:	428a      	cmp	r2, r1
 8003a8e:	d04a      	beq.n	8003b26 <HAL_TIM_Base_Init+0xe2>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a90:	f501 5170 	add.w	r1, r1, #15360	; 0x3c00
 8003a94:	428a      	cmp	r2, r1
 8003a96:	d021      	beq.n	8003adc <HAL_TIM_Base_Init+0x98>
 8003a98:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8003a9c:	428a      	cmp	r2, r1
 8003a9e:	d01d      	beq.n	8003adc <HAL_TIM_Base_Init+0x98>
 8003aa0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8003aa4:	428a      	cmp	r2, r1
 8003aa6:	d019      	beq.n	8003adc <HAL_TIM_Base_Init+0x98>
 8003aa8:	f5a1 3198 	sub.w	r1, r1, #77824	; 0x13000
 8003aac:	428a      	cmp	r2, r1
 8003aae:	d015      	beq.n	8003adc <HAL_TIM_Base_Init+0x98>
 8003ab0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8003ab4:	428a      	cmp	r2, r1
 8003ab6:	d011      	beq.n	8003adc <HAL_TIM_Base_Init+0x98>
 8003ab8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8003abc:	428a      	cmp	r2, r1
 8003abe:	d00d      	beq.n	8003adc <HAL_TIM_Base_Init+0x98>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ac0:	69a0      	ldr	r0, [r4, #24]

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ac2:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ac4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ac8:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 8003aca:	6013      	str	r3, [r2, #0]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003acc:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ace:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003ad0:	6293      	str	r3, [r2, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ad2:	e010      	b.n	8003af6 <HAL_TIM_Base_Init+0xb2>
    tmpcr1 |= Structure->CounterMode;
 8003ad4:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ad6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003ada:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003adc:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ade:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ae0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ae4:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ae6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003aea:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003aec:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 8003aee:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8003af0:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003af2:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003af4:	6291      	str	r1, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003af6:	2301      	movs	r3, #1
 8003af8:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003afa:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003afe:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8003b02:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8003b06:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8003b0a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b0e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003b12:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b16:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8003b1a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8003b1e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8003b22:	2000      	movs	r0, #0
}
 8003b24:	bd10      	pop	{r4, pc}
    tmpcr1 |= Structure->CounterMode;
 8003b26:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b28:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003b2e:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b34:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b36:	69a1      	ldr	r1, [r4, #24]
 8003b38:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b3c:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8003b3e:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b40:	68e3      	ldr	r3, [r4, #12]
 8003b42:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003b44:	6863      	ldr	r3, [r4, #4]
 8003b46:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8003b48:	6963      	ldr	r3, [r4, #20]
 8003b4a:	6313      	str	r3, [r2, #48]	; 0x30
 8003b4c:	e7d3      	b.n	8003af6 <HAL_TIM_Base_Init+0xb2>
    htim->Lock = HAL_UNLOCKED;
 8003b4e:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8003b52:	f7fe f803 	bl	8001b5c <HAL_TIM_Base_MspInit>
 8003b56:	e780      	b.n	8003a5a <HAL_TIM_Base_Init+0x16>
    return HAL_ERROR;
 8003b58:	2001      	movs	r0, #1
}
 8003b5a:	4770      	bx	lr
 8003b5c:	40010000 	.word	0x40010000

08003b60 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8003b60:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003b64:	2b01      	cmp	r3, #1
 8003b66:	d12f      	bne.n	8003bc8 <HAL_TIM_Base_Start_IT+0x68>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003b68:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b6a:	4919      	ldr	r1, [pc, #100]	; (8003bd0 <HAL_TIM_Base_Start_IT+0x70>)
  htim->State = HAL_TIM_STATE_BUSY;
 8003b6c:	2202      	movs	r2, #2
 8003b6e:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003b72:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b74:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003b76:	f042 0201 	orr.w	r2, r2, #1
 8003b7a:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b7c:	d019      	beq.n	8003bb2 <HAL_TIM_Base_Start_IT+0x52>
 8003b7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b82:	d016      	beq.n	8003bb2 <HAL_TIM_Base_Start_IT+0x52>
 8003b84:	4a13      	ldr	r2, [pc, #76]	; (8003bd4 <HAL_TIM_Base_Start_IT+0x74>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d013      	beq.n	8003bb2 <HAL_TIM_Base_Start_IT+0x52>
 8003b8a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d00f      	beq.n	8003bb2 <HAL_TIM_Base_Start_IT+0x52>
 8003b92:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d00b      	beq.n	8003bb2 <HAL_TIM_Base_Start_IT+0x52>
 8003b9a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d007      	beq.n	8003bb2 <HAL_TIM_Base_Start_IT+0x52>
 8003ba2:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d003      	beq.n	8003bb2 <HAL_TIM_Base_Start_IT+0x52>
 8003baa:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d104      	bne.n	8003bbc <HAL_TIM_Base_Start_IT+0x5c>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003bb2:	689a      	ldr	r2, [r3, #8]
 8003bb4:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bb8:	2a06      	cmp	r2, #6
 8003bba:	d007      	beq.n	8003bcc <HAL_TIM_Base_Start_IT+0x6c>
    __HAL_TIM_ENABLE(htim);
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	f042 0201 	orr.w	r2, r2, #1
  return HAL_OK;
 8003bc2:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 8003bc4:	601a      	str	r2, [r3, #0]
 8003bc6:	4770      	bx	lr
    return HAL_ERROR;
 8003bc8:	2001      	movs	r0, #1
 8003bca:	4770      	bx	lr
  return HAL_OK;
 8003bcc:	2000      	movs	r0, #0
}
 8003bce:	4770      	bx	lr
 8003bd0:	40010000 	.word	0x40010000
 8003bd4:	40000400 	.word	0x40000400

08003bd8 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8003bd8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d075      	beq.n	8003ccc <HAL_TIM_ConfigClockSource+0xf4>
 8003be0:	4602      	mov	r2, r0
{
 8003be2:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 8003be4:	2302      	movs	r3, #2
  tmpsmcr = htim->Instance->SMCR;
 8003be6:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8003be8:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  __HAL_LOCK(htim);
 8003bec:	2001      	movs	r0, #1
 8003bee:	f882 003c 	strb.w	r0, [r2, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8003bf2:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003bf4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003bf8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8003bfc:	60a3      	str	r3, [r4, #8]
  switch (sClockSourceConfig->ClockSource)
 8003bfe:	680b      	ldr	r3, [r1, #0]
 8003c00:	2b60      	cmp	r3, #96	; 0x60
 8003c02:	d065      	beq.n	8003cd0 <HAL_TIM_ConfigClockSource+0xf8>
 8003c04:	d824      	bhi.n	8003c50 <HAL_TIM_ConfigClockSource+0x78>
 8003c06:	2b40      	cmp	r3, #64	; 0x40
 8003c08:	d07c      	beq.n	8003d04 <HAL_TIM_ConfigClockSource+0x12c>
 8003c0a:	d94b      	bls.n	8003ca4 <HAL_TIM_ConfigClockSource+0xcc>
 8003c0c:	2b50      	cmp	r3, #80	; 0x50
 8003c0e:	d117      	bne.n	8003c40 <HAL_TIM_ConfigClockSource+0x68>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c10:	6848      	ldr	r0, [r1, #4]
 8003c12:	68cd      	ldr	r5, [r1, #12]
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003c14:	6a21      	ldr	r1, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c16:	6a23      	ldr	r3, [r4, #32]
 8003c18:	f023 0301 	bic.w	r3, r3, #1
 8003c1c:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c1e:	69a3      	ldr	r3, [r4, #24]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c20:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c24:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccer |= TIM_ICPolarity;
 8003c28:	4301      	orrs	r1, r0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003c2a:	ea43 1305 	orr.w	r3, r3, r5, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003c2e:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8003c30:	6221      	str	r1, [r4, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003c32:	68a3      	ldr	r3, [r4, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003c34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003c38:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  HAL_StatusTypeDef status = HAL_OK;
 8003c3c:	2000      	movs	r0, #0
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c3e:	60a3      	str	r3, [r4, #8]
  htim->State = HAL_TIM_STATE_READY;
 8003c40:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 8003c42:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8003c44:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8003c48:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
}
 8003c4c:	bc30      	pop	{r4, r5}
 8003c4e:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8003c50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c54:	d038      	beq.n	8003cc8 <HAL_TIM_ConfigClockSource+0xf0>
 8003c56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c5a:	d110      	bne.n	8003c7e <HAL_TIM_ConfigClockSource+0xa6>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003c5c:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8003c60:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003c62:	432b      	orrs	r3, r5
 8003c64:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c66:	f420 417f 	bic.w	r1, r0, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003c6a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8003c6e:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c70:	60a3      	str	r3, [r4, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003c72:	68a3      	ldr	r3, [r4, #8]
 8003c74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  HAL_StatusTypeDef status = HAL_OK;
 8003c78:	2000      	movs	r0, #0
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003c7a:	60a3      	str	r3, [r4, #8]
      break;
 8003c7c:	e7e0      	b.n	8003c40 <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 8003c7e:	2b70      	cmp	r3, #112	; 0x70
 8003c80:	d1de      	bne.n	8003c40 <HAL_TIM_ConfigClockSource+0x68>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003c82:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8003c86:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003c88:	432b      	orrs	r3, r5
 8003c8a:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c8c:	f420 417f 	bic.w	r1, r0, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003c90:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8003c94:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8003c96:	60a3      	str	r3, [r4, #8]
      tmpsmcr = htim->Instance->SMCR;
 8003c98:	68a3      	ldr	r3, [r4, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003c9a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
  HAL_StatusTypeDef status = HAL_OK;
 8003c9e:	2000      	movs	r0, #0
      htim->Instance->SMCR = tmpsmcr;
 8003ca0:	60a3      	str	r3, [r4, #8]
      break;
 8003ca2:	e7cd      	b.n	8003c40 <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 8003ca4:	2b20      	cmp	r3, #32
 8003ca6:	d002      	beq.n	8003cae <HAL_TIM_ConfigClockSource+0xd6>
 8003ca8:	d90a      	bls.n	8003cc0 <HAL_TIM_ConfigClockSource+0xe8>
 8003caa:	2b30      	cmp	r3, #48	; 0x30
 8003cac:	d1c8      	bne.n	8003c40 <HAL_TIM_ConfigClockSource+0x68>
  tmpsmcr = TIMx->SMCR;
 8003cae:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003cb0:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003cb4:	430b      	orrs	r3, r1
 8003cb6:	f043 0307 	orr.w	r3, r3, #7
  HAL_StatusTypeDef status = HAL_OK;
 8003cba:	2000      	movs	r0, #0
  TIMx->SMCR = tmpsmcr;
 8003cbc:	60a3      	str	r3, [r4, #8]
}
 8003cbe:	e7bf      	b.n	8003c40 <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 8003cc0:	f033 0110 	bics.w	r1, r3, #16
 8003cc4:	d1bc      	bne.n	8003c40 <HAL_TIM_ConfigClockSource+0x68>
 8003cc6:	e7f2      	b.n	8003cae <HAL_TIM_ConfigClockSource+0xd6>
  HAL_StatusTypeDef status = HAL_OK;
 8003cc8:	2000      	movs	r0, #0
 8003cca:	e7b9      	b.n	8003c40 <HAL_TIM_ConfigClockSource+0x68>
  __HAL_LOCK(htim);
 8003ccc:	2002      	movs	r0, #2
}
 8003cce:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003cd0:	6a20      	ldr	r0, [r4, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003cd2:	68cb      	ldr	r3, [r1, #12]
 8003cd4:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003cd6:	f020 0010 	bic.w	r0, r0, #16
 8003cda:	6220      	str	r0, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003cdc:	69a1      	ldr	r1, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003cde:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003ce2:	ea41 3103 	orr.w	r1, r1, r3, lsl #12
  tmpccer = TIMx->CCER;
 8003ce6:	6a23      	ldr	r3, [r4, #32]
  TIMx->CCMR1 = tmpccmr1 ;
 8003ce8:	61a1      	str	r1, [r4, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003cea:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8003cee:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCER = tmpccer;
 8003cf2:	6223      	str	r3, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8003cf4:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003cf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003cfa:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  HAL_StatusTypeDef status = HAL_OK;
 8003cfe:	2000      	movs	r0, #0
  TIMx->SMCR = tmpsmcr;
 8003d00:	60a3      	str	r3, [r4, #8]
}
 8003d02:	e79d      	b.n	8003c40 <HAL_TIM_ConfigClockSource+0x68>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d04:	6848      	ldr	r0, [r1, #4]
 8003d06:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8003d08:	6a21      	ldr	r1, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d0a:	6a23      	ldr	r3, [r4, #32]
 8003d0c:	f023 0301 	bic.w	r3, r3, #1
 8003d10:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d12:	69a3      	ldr	r3, [r4, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d14:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d18:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccer |= TIM_ICPolarity;
 8003d1c:	4301      	orrs	r1, r0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003d1e:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8003d22:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8003d24:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8003d26:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003d2c:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  HAL_StatusTypeDef status = HAL_OK;
 8003d30:	2000      	movs	r0, #0
  TIMx->SMCR = tmpsmcr;
 8003d32:	60a3      	str	r3, [r4, #8]
}
 8003d34:	e784      	b.n	8003c40 <HAL_TIM_ConfigClockSource+0x68>
 8003d36:	bf00      	nop

08003d38 <HAL_TIM_OC_DelayElapsedCallback>:
 8003d38:	4770      	bx	lr
 8003d3a:	bf00      	nop

08003d3c <HAL_TIM_IC_CaptureCallback>:
 8003d3c:	4770      	bx	lr
 8003d3e:	bf00      	nop

08003d40 <HAL_TIM_PWM_PulseFinishedCallback>:
 8003d40:	4770      	bx	lr
 8003d42:	bf00      	nop

08003d44 <HAL_TIM_TriggerCallback>:
 8003d44:	4770      	bx	lr
 8003d46:	bf00      	nop

08003d48 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003d48:	6803      	ldr	r3, [r0, #0]
 8003d4a:	691a      	ldr	r2, [r3, #16]
 8003d4c:	0791      	lsls	r1, r2, #30
{
 8003d4e:	b510      	push	{r4, lr}
 8003d50:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003d52:	d502      	bpl.n	8003d5a <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003d54:	68da      	ldr	r2, [r3, #12]
 8003d56:	0792      	lsls	r2, r2, #30
 8003d58:	d45f      	bmi.n	8003e1a <HAL_TIM_IRQHandler+0xd2>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003d5a:	691a      	ldr	r2, [r3, #16]
 8003d5c:	0750      	lsls	r0, r2, #29
 8003d5e:	d502      	bpl.n	8003d66 <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003d60:	68da      	ldr	r2, [r3, #12]
 8003d62:	0751      	lsls	r1, r2, #29
 8003d64:	d446      	bmi.n	8003df4 <HAL_TIM_IRQHandler+0xac>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003d66:	691a      	ldr	r2, [r3, #16]
 8003d68:	0712      	lsls	r2, r2, #28
 8003d6a:	d502      	bpl.n	8003d72 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003d6c:	68da      	ldr	r2, [r3, #12]
 8003d6e:	0710      	lsls	r0, r2, #28
 8003d70:	d42e      	bmi.n	8003dd0 <HAL_TIM_IRQHandler+0x88>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003d72:	691a      	ldr	r2, [r3, #16]
 8003d74:	06d2      	lsls	r2, r2, #27
 8003d76:	d502      	bpl.n	8003d7e <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003d78:	68da      	ldr	r2, [r3, #12]
 8003d7a:	06d0      	lsls	r0, r2, #27
 8003d7c:	d418      	bmi.n	8003db0 <HAL_TIM_IRQHandler+0x68>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003d7e:	691a      	ldr	r2, [r3, #16]
 8003d80:	07d1      	lsls	r1, r2, #31
 8003d82:	d502      	bpl.n	8003d8a <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003d84:	68da      	ldr	r2, [r3, #12]
 8003d86:	07d2      	lsls	r2, r2, #31
 8003d88:	d45d      	bmi.n	8003e46 <HAL_TIM_IRQHandler+0xfe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003d8a:	691a      	ldr	r2, [r3, #16]
 8003d8c:	0610      	lsls	r0, r2, #24
 8003d8e:	d502      	bpl.n	8003d96 <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003d90:	68da      	ldr	r2, [r3, #12]
 8003d92:	0611      	lsls	r1, r2, #24
 8003d94:	d45f      	bmi.n	8003e56 <HAL_TIM_IRQHandler+0x10e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003d96:	691a      	ldr	r2, [r3, #16]
 8003d98:	0652      	lsls	r2, r2, #25
 8003d9a:	d502      	bpl.n	8003da2 <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003d9c:	68da      	ldr	r2, [r3, #12]
 8003d9e:	0650      	lsls	r0, r2, #25
 8003da0:	d461      	bmi.n	8003e66 <HAL_TIM_IRQHandler+0x11e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003da2:	691a      	ldr	r2, [r3, #16]
 8003da4:	0691      	lsls	r1, r2, #26
 8003da6:	d502      	bpl.n	8003dae <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003da8:	68da      	ldr	r2, [r3, #12]
 8003daa:	0692      	lsls	r2, r2, #26
 8003dac:	d443      	bmi.n	8003e36 <HAL_TIM_IRQHandler+0xee>
}
 8003dae:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003db0:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003db4:	2208      	movs	r2, #8
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003db6:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003db8:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003dba:	69db      	ldr	r3, [r3, #28]
 8003dbc:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8003dc0:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003dc2:	d064      	beq.n	8003e8e <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8003dc4:	f7ff ffba 	bl	8003d3c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dc8:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003dca:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dcc:	7722      	strb	r2, [r4, #28]
 8003dce:	e7d6      	b.n	8003d7e <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003dd0:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003dd4:	2204      	movs	r2, #4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003dd6:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003dd8:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003dda:	69db      	ldr	r3, [r3, #28]
 8003ddc:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8003dde:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003de0:	d152      	bne.n	8003e88 <HAL_TIM_IRQHandler+0x140>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003de2:	f7ff ffa9 	bl	8003d38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003de6:	4620      	mov	r0, r4
 8003de8:	f7ff ffaa 	bl	8003d40 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dec:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003dee:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003df0:	7722      	strb	r2, [r4, #28]
 8003df2:	e7be      	b.n	8003d72 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003df4:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003df8:	2202      	movs	r2, #2
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003dfa:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003dfc:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003dfe:	699b      	ldr	r3, [r3, #24]
 8003e00:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8003e04:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003e06:	d13c      	bne.n	8003e82 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e08:	f7ff ff96 	bl	8003d38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e0c:	4620      	mov	r0, r4
 8003e0e:	f7ff ff97 	bl	8003d40 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e12:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003e14:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e16:	7722      	strb	r2, [r4, #28]
 8003e18:	e7a5      	b.n	8003d66 <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003e1a:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e1e:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003e20:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e22:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003e24:	699b      	ldr	r3, [r3, #24]
 8003e26:	079b      	lsls	r3, r3, #30
 8003e28:	d025      	beq.n	8003e76 <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 8003e2a:	f7ff ff87 	bl	8003d3c <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e2e:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003e30:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e32:	7722      	strb	r2, [r4, #28]
 8003e34:	e791      	b.n	8003d5a <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003e36:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8003e3a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003e3c:	611a      	str	r2, [r3, #16]
}
 8003e3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8003e42:	f000 b86b 	b.w	8003f1c <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003e46:	f06f 0201 	mvn.w	r2, #1
 8003e4a:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8003e4c:	4620      	mov	r0, r4
 8003e4e:	f7fd fcd7 	bl	8001800 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003e52:	6823      	ldr	r3, [r4, #0]
 8003e54:	e799      	b.n	8003d8a <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003e56:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003e5a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8003e5c:	4620      	mov	r0, r4
 8003e5e:	f000 f85f 	bl	8003f20 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003e62:	6823      	ldr	r3, [r4, #0]
 8003e64:	e797      	b.n	8003d96 <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003e66:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003e6a:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8003e6c:	4620      	mov	r0, r4
 8003e6e:	f7ff ff69 	bl	8003d44 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003e72:	6823      	ldr	r3, [r4, #0]
 8003e74:	e795      	b.n	8003da2 <HAL_TIM_IRQHandler+0x5a>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e76:	f7ff ff5f 	bl	8003d38 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e7a:	4620      	mov	r0, r4
 8003e7c:	f7ff ff60 	bl	8003d40 <HAL_TIM_PWM_PulseFinishedCallback>
 8003e80:	e7d5      	b.n	8003e2e <HAL_TIM_IRQHandler+0xe6>
        HAL_TIM_IC_CaptureCallback(htim);
 8003e82:	f7ff ff5b 	bl	8003d3c <HAL_TIM_IC_CaptureCallback>
 8003e86:	e7c4      	b.n	8003e12 <HAL_TIM_IRQHandler+0xca>
        HAL_TIM_IC_CaptureCallback(htim);
 8003e88:	f7ff ff58 	bl	8003d3c <HAL_TIM_IC_CaptureCallback>
 8003e8c:	e7ae      	b.n	8003dec <HAL_TIM_IRQHandler+0xa4>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e8e:	f7ff ff53 	bl	8003d38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e92:	4620      	mov	r0, r4
 8003e94:	f7ff ff54 	bl	8003d40 <HAL_TIM_PWM_PulseFinishedCallback>
 8003e98:	e796      	b.n	8003dc8 <HAL_TIM_IRQHandler+0x80>
 8003e9a:	bf00      	nop

08003e9c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e9c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	d037      	beq.n	8003f14 <HAL_TIMEx_MasterConfigSynchronization+0x78>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ea4:	6803      	ldr	r3, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8003ea6:	2202      	movs	r2, #2
{
 8003ea8:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 8003eaa:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8003eae:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003eb0:	680d      	ldr	r5, [r1, #0]
  tmpsmcr = htim->Instance->SMCR;
 8003eb2:	689c      	ldr	r4, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8003eb4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003eb8:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003eba:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ebc:	4a16      	ldr	r2, [pc, #88]	; (8003f18 <HAL_TIMEx_MasterConfigSynchronization+0x7c>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d01a      	beq.n	8003ef8 <HAL_TIMEx_MasterConfigSynchronization+0x5c>
 8003ec2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ec6:	d017      	beq.n	8003ef8 <HAL_TIMEx_MasterConfigSynchronization+0x5c>
 8003ec8:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d013      	beq.n	8003ef8 <HAL_TIMEx_MasterConfigSynchronization+0x5c>
 8003ed0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d00f      	beq.n	8003ef8 <HAL_TIMEx_MasterConfigSynchronization+0x5c>
 8003ed8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d00b      	beq.n	8003ef8 <HAL_TIMEx_MasterConfigSynchronization+0x5c>
 8003ee0:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d007      	beq.n	8003ef8 <HAL_TIMEx_MasterConfigSynchronization+0x5c>
 8003ee8:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d003      	beq.n	8003ef8 <HAL_TIMEx_MasterConfigSynchronization+0x5c>
 8003ef0:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d104      	bne.n	8003f02 <HAL_TIMEx_MasterConfigSynchronization+0x66>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ef8:	684a      	ldr	r2, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003efa:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003efe:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f00:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8003f02:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8003f04:	2201      	movs	r2, #1
 8003f06:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8003f0a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 8003f0e:	bc30      	pop	{r4, r5}
  return HAL_OK;
 8003f10:	4618      	mov	r0, r3
}
 8003f12:	4770      	bx	lr
  __HAL_LOCK(htim);
 8003f14:	2002      	movs	r0, #2
}
 8003f16:	4770      	bx	lr
 8003f18:	40010000 	.word	0x40010000

08003f1c <HAL_TIMEx_CommutCallback>:
 8003f1c:	4770      	bx	lr
 8003f1e:	bf00      	nop

08003f20 <HAL_TIMEx_BreakCallback>:
 8003f20:	4770      	bx	lr
 8003f22:	bf00      	nop

08003f24 <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f24:	2800      	cmp	r0, #0
 8003f26:	f000 808f 	beq.w	8004048 <HAL_UART_Init+0x124>
{
 8003f2a:	b538      	push	{r3, r4, r5, lr}
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f2c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003f30:	4604      	mov	r4, r0
 8003f32:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	f000 8081 	beq.w	800403e <HAL_UART_Init+0x11a>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003f3c:	6823      	ldr	r3, [r4, #0]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f3e:	68e0      	ldr	r0, [r4, #12]
  huart->gState = HAL_UART_STATE_BUSY;
 8003f40:	2224      	movs	r2, #36	; 0x24
 8003f42:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 8003f46:	68da      	ldr	r2, [r3, #12]
 8003f48:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f4c:	60da      	str	r2, [r3, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f4e:	6919      	ldr	r1, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003f50:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f52:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8003f56:	4301      	orrs	r1, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003f58:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f5a:	6119      	str	r1, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003f5c:	4302      	orrs	r2, r0
 8003f5e:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8003f60:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003f62:	4302      	orrs	r2, r0
 8003f64:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1,
 8003f66:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
 8003f6a:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003f6e:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8003f70:	430a      	orrs	r2, r1
 8003f72:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f74:	695a      	ldr	r2, [r3, #20]
 8003f76:	69a0      	ldr	r0, [r4, #24]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003f78:	4934      	ldr	r1, [pc, #208]	; (800404c <HAL_UART_Init+0x128>)
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f7a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003f7e:	4302      	orrs	r2, r0
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003f80:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f82:	615a      	str	r2, [r3, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003f84:	d035      	beq.n	8003ff2 <HAL_UART_Init+0xce>
 8003f86:	4a32      	ldr	r2, [pc, #200]	; (8004050 <HAL_UART_Init+0x12c>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d032      	beq.n	8003ff2 <HAL_UART_Init+0xce>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003f8c:	f7fe ff80 	bl	8002e90 <HAL_RCC_GetPCLK1Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f90:	69e3      	ldr	r3, [r4, #28]
 8003f92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f96:	d032      	beq.n	8003ffe <HAL_UART_Init+0xda>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f98:	6863      	ldr	r3, [r4, #4]
 8003f9a:	2119      	movs	r1, #25
 8003f9c:	009a      	lsls	r2, r3, #2
 8003f9e:	fba0 0101 	umull	r0, r1, r0, r1
 8003fa2:	0f9b      	lsrs	r3, r3, #30
 8003fa4:	f7fc fe70 	bl	8000c88 <__aeabi_uldivmod>
 8003fa8:	492a      	ldr	r1, [pc, #168]	; (8004054 <HAL_UART_Init+0x130>)
 8003faa:	fba1 3200 	umull	r3, r2, r1, r0
 8003fae:	0952      	lsrs	r2, r2, #5
 8003fb0:	2564      	movs	r5, #100	; 0x64
 8003fb2:	fb05 0012 	mls	r0, r5, r2, r0
 8003fb6:	0100      	lsls	r0, r0, #4
 8003fb8:	3032      	adds	r0, #50	; 0x32
 8003fba:	6823      	ldr	r3, [r4, #0]
 8003fbc:	fba1 1000 	umull	r1, r0, r1, r0
 8003fc0:	0112      	lsls	r2, r2, #4
 8003fc2:	eb02 1050 	add.w	r0, r2, r0, lsr #5
 8003fc6:	6098      	str	r0, [r3, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003fc8:	691a      	ldr	r2, [r3, #16]
 8003fca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003fce:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003fd0:	695a      	ldr	r2, [r3, #20]
 8003fd2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003fd6:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8003fd8:	68da      	ldr	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fda:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_READY;
 8003fdc:	2120      	movs	r1, #32
  __HAL_UART_ENABLE(huart);
 8003fde:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003fe2:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fe4:	6425      	str	r5, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003fe6:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003fea:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
  return HAL_OK;
 8003fee:	4628      	mov	r0, r5
}
 8003ff0:	bd38      	pop	{r3, r4, r5, pc}
      pclk = HAL_RCC_GetPCLK2Freq();
 8003ff2:	f7fe ff5d 	bl	8002eb0 <HAL_RCC_GetPCLK2Freq>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ff6:	69e3      	ldr	r3, [r4, #28]
 8003ff8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ffc:	d1cc      	bne.n	8003f98 <HAL_UART_Init+0x74>
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003ffe:	6862      	ldr	r2, [r4, #4]
 8004000:	2119      	movs	r1, #25
 8004002:	1892      	adds	r2, r2, r2
 8004004:	f04f 0300 	mov.w	r3, #0
 8004008:	415b      	adcs	r3, r3
 800400a:	fba0 0101 	umull	r0, r1, r0, r1
 800400e:	f7fc fe3b 	bl	8000c88 <__aeabi_uldivmod>
 8004012:	4b10      	ldr	r3, [pc, #64]	; (8004054 <HAL_UART_Init+0x130>)
 8004014:	fba3 2100 	umull	r2, r1, r3, r0
 8004018:	094d      	lsrs	r5, r1, #5
 800401a:	2264      	movs	r2, #100	; 0x64
 800401c:	fb02 0215 	mls	r2, r2, r5, r0
 8004020:	00d2      	lsls	r2, r2, #3
 8004022:	3232      	adds	r2, #50	; 0x32
 8004024:	fba3 3202 	umull	r3, r2, r3, r2
 8004028:	f3c2 1142 	ubfx	r1, r2, #5, #3
 800402c:	0912      	lsrs	r2, r2, #4
 800402e:	6823      	ldr	r3, [r4, #0]
 8004030:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 8004034:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 8004038:	440a      	add	r2, r1
 800403a:	609a      	str	r2, [r3, #8]
 800403c:	e7c4      	b.n	8003fc8 <HAL_UART_Init+0xa4>
    huart->Lock = HAL_UNLOCKED;
 800403e:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 8004042:	f7fd fddf 	bl	8001c04 <HAL_UART_MspInit>
 8004046:	e779      	b.n	8003f3c <HAL_UART_Init+0x18>
    return HAL_ERROR;
 8004048:	2001      	movs	r0, #1
}
 800404a:	4770      	bx	lr
 800404c:	40011000 	.word	0x40011000
 8004050:	40011400 	.word	0x40011400
 8004054:	51eb851f 	.word	0x51eb851f

08004058 <HAL_UART_Transmit>:
{
 8004058:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800405c:	4605      	mov	r5, r0
  if (huart->gState == HAL_UART_STATE_READY)
 800405e:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
 8004062:	2820      	cmp	r0, #32
 8004064:	d177      	bne.n	8004156 <HAL_UART_Transmit+0xfe>
    if ((pData == NULL) || (Size == 0U))
 8004066:	4689      	mov	r9, r1
 8004068:	2900      	cmp	r1, #0
 800406a:	d040      	beq.n	80040ee <HAL_UART_Transmit+0x96>
 800406c:	4614      	mov	r4, r2
 800406e:	2a00      	cmp	r2, #0
 8004070:	d03d      	beq.n	80040ee <HAL_UART_Transmit+0x96>
 8004072:	461e      	mov	r6, r3
    __HAL_LOCK(huart);
 8004074:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 8004078:	2b01      	cmp	r3, #1
 800407a:	d06c      	beq.n	8004156 <HAL_UART_Transmit+0xfe>
 800407c:	2301      	movs	r3, #1
 800407e:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004082:	f04f 0800 	mov.w	r8, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004086:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004088:	f8c5 8040 	str.w	r8, [r5, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800408c:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
    tickstart = HAL_GetTick();
 8004090:	f7fd fe6a 	bl	8001d68 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004094:	68ab      	ldr	r3, [r5, #8]
    huart->TxXferSize = Size;
 8004096:	84ac      	strh	r4, [r5, #36]	; 0x24
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004098:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferCount = Size;
 800409c:	84ec      	strh	r4, [r5, #38]	; 0x26
    tickstart = HAL_GetTick();
 800409e:	4607      	mov	r7, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040a0:	d05c      	beq.n	800415c <HAL_UART_Transmit+0x104>
    while (huart->TxXferCount > 0U)
 80040a2:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
    __HAL_UNLOCK(huart);
 80040a4:	2200      	movs	r2, #0
    while (huart->TxXferCount > 0U)
 80040a6:	b29b      	uxth	r3, r3
    __HAL_UNLOCK(huart);
 80040a8:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
    while (huart->TxXferCount > 0U)
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d07e      	beq.n	80041ae <HAL_UART_Transmit+0x156>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040b0:	682c      	ldr	r4, [r5, #0]
 80040b2:	1c72      	adds	r2, r6, #1
 80040b4:	d11e      	bne.n	80040f4 <HAL_UART_Transmit+0x9c>
 80040b6:	6822      	ldr	r2, [r4, #0]
 80040b8:	0613      	lsls	r3, r2, #24
 80040ba:	d5fc      	bpl.n	80040b6 <HAL_UART_Transmit+0x5e>
      if (pdata8bits == NULL)
 80040bc:	f1b9 0f00 	cmp.w	r9, #0
 80040c0:	d044      	beq.n	800414c <HAL_UART_Transmit+0xf4>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80040c2:	f819 3b01 	ldrb.w	r3, [r9], #1
 80040c6:	6063      	str	r3, [r4, #4]
      huart->TxXferCount--;
 80040c8:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
 80040ca:	3b01      	subs	r3, #1
 80040cc:	b29b      	uxth	r3, r3
 80040ce:	84eb      	strh	r3, [r5, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80040d0:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
 80040d2:	b29b      	uxth	r3, r3
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d1ec      	bne.n	80040b2 <HAL_UART_Transmit+0x5a>
 80040d8:	1c71      	adds	r1, r6, #1
 80040da:	d145      	bne.n	8004168 <HAL_UART_Transmit+0x110>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040dc:	6823      	ldr	r3, [r4, #0]
 80040de:	065a      	lsls	r2, r3, #25
 80040e0:	d5fc      	bpl.n	80040dc <HAL_UART_Transmit+0x84>
    huart->gState = HAL_UART_STATE_READY;
 80040e2:	2320      	movs	r3, #32
 80040e4:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
    return HAL_OK;
 80040e8:	2000      	movs	r0, #0
}
 80040ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      return  HAL_ERROR;
 80040ee:	2001      	movs	r0, #1
}
 80040f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040f4:	6823      	ldr	r3, [r4, #0]
 80040f6:	0618      	lsls	r0, r3, #24
 80040f8:	d4e0      	bmi.n	80040bc <HAL_UART_Transmit+0x64>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80040fa:	b12e      	cbz	r6, 8004108 <HAL_UART_Transmit+0xb0>
 80040fc:	f7fd fe34 	bl	8001d68 <HAL_GetTick>
 8004100:	1bc0      	subs	r0, r0, r7
 8004102:	4286      	cmp	r6, r0
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004104:	682c      	ldr	r4, [r5, #0]
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004106:	d2d4      	bcs.n	80040b2 <HAL_UART_Transmit+0x5a>
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004108:	f104 030c 	add.w	r3, r4, #12
 800410c:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004110:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004114:	f104 010c 	add.w	r1, r4, #12
 8004118:	e841 3200 	strex	r2, r3, [r1]
 800411c:	2a00      	cmp	r2, #0
 800411e:	d1f3      	bne.n	8004108 <HAL_UART_Transmit+0xb0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004120:	f104 0314 	add.w	r3, r4, #20
 8004124:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004128:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800412c:	f104 0114 	add.w	r1, r4, #20
 8004130:	e841 3200 	strex	r2, r3, [r1]
 8004134:	2a00      	cmp	r2, #0
 8004136:	d1f3      	bne.n	8004120 <HAL_UART_Transmit+0xc8>
        huart->gState  = HAL_UART_STATE_READY;
 8004138:	2320      	movs	r3, #32
 800413a:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        __HAL_UNLOCK(huart);
 800413e:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        huart->RxState = HAL_UART_STATE_READY;
 8004142:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      return HAL_TIMEOUT;
 8004146:	2003      	movs	r0, #3
}
 8004148:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800414c:	f838 3b02 	ldrh.w	r3, [r8], #2
 8004150:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004154:	e7b7      	b.n	80040c6 <HAL_UART_Transmit+0x6e>
    return HAL_BUSY;
 8004156:	2002      	movs	r0, #2
}
 8004158:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800415c:	692b      	ldr	r3, [r5, #16]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d19f      	bne.n	80040a2 <HAL_UART_Transmit+0x4a>
 8004162:	46c8      	mov	r8, r9
      pdata8bits  = NULL;
 8004164:	4699      	mov	r9, r3
 8004166:	e79c      	b.n	80040a2 <HAL_UART_Transmit+0x4a>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004168:	6823      	ldr	r3, [r4, #0]
 800416a:	065b      	lsls	r3, r3, #25
 800416c:	d4b9      	bmi.n	80040e2 <HAL_UART_Transmit+0x8a>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800416e:	b12e      	cbz	r6, 800417c <HAL_UART_Transmit+0x124>
 8004170:	f7fd fdfa 	bl	8001d68 <HAL_GetTick>
 8004174:	1bc0      	subs	r0, r0, r7
 8004176:	4286      	cmp	r6, r0
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004178:	682c      	ldr	r4, [r5, #0]
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800417a:	d2ad      	bcs.n	80040d8 <HAL_UART_Transmit+0x80>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800417c:	f104 030c 	add.w	r3, r4, #12
 8004180:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004184:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004188:	f104 010c 	add.w	r1, r4, #12
 800418c:	e841 3200 	strex	r2, r3, [r1]
 8004190:	2a00      	cmp	r2, #0
 8004192:	d1f3      	bne.n	800417c <HAL_UART_Transmit+0x124>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004194:	f104 0314 	add.w	r3, r4, #20
 8004198:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800419c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041a0:	f104 0114 	add.w	r1, r4, #20
 80041a4:	e841 3200 	strex	r2, r3, [r1]
 80041a8:	2a00      	cmp	r2, #0
 80041aa:	d1f3      	bne.n	8004194 <HAL_UART_Transmit+0x13c>
 80041ac:	e7c4      	b.n	8004138 <HAL_UART_Transmit+0xe0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041ae:	682c      	ldr	r4, [r5, #0]
 80041b0:	e792      	b.n	80040d8 <HAL_UART_Transmit+0x80>
 80041b2:	bf00      	nop

080041b4 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 80041b4:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 80041b8:	2b20      	cmp	r3, #32
 80041ba:	d11f      	bne.n	80041fc <HAL_UART_Receive_IT+0x48>
    if ((pData == NULL) || (Size == 0U))
 80041bc:	b1e1      	cbz	r1, 80041f8 <HAL_UART_Receive_IT+0x44>
 80041be:	b1da      	cbz	r2, 80041f8 <HAL_UART_Receive_IT+0x44>
    __HAL_LOCK(huart);
 80041c0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d019      	beq.n	80041fc <HAL_UART_Receive_IT+0x48>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041c8:	2300      	movs	r3, #0
 80041ca:	6303      	str	r3, [r0, #48]	; 0x30
  __HAL_UNLOCK(huart);
 80041cc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  huart->RxXferCount = Size;
 80041d0:	85c2      	strh	r2, [r0, #46]	; 0x2e
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041d2:	6403      	str	r3, [r0, #64]	; 0x40
  if (huart->Init.Parity != UART_PARITY_NONE)
 80041d4:	6903      	ldr	r3, [r0, #16]
  huart->pRxBuffPtr = pData;
 80041d6:	6281      	str	r1, [r0, #40]	; 0x28
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80041d8:	2122      	movs	r1, #34	; 0x22
  huart->RxXferSize = Size;
 80041da:	8582      	strh	r2, [r0, #44]	; 0x2c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80041dc:	f880 103e 	strb.w	r1, [r0, #62]	; 0x3e
  if (huart->Init.Parity != UART_PARITY_NONE)
 80041e0:	b973      	cbnz	r3, 8004200 <HAL_UART_Receive_IT+0x4c>
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80041e2:	6803      	ldr	r3, [r0, #0]
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80041e4:	695a      	ldr	r2, [r3, #20]
 80041e6:	f042 0201 	orr.w	r2, r2, #1
 80041ea:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80041ec:	68da      	ldr	r2, [r3, #12]
 80041ee:	f042 0220 	orr.w	r2, r2, #32
    return (UART_Start_Receive_IT(huart, pData, Size));
 80041f2:	2000      	movs	r0, #0
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80041f4:	60da      	str	r2, [r3, #12]
    return (UART_Start_Receive_IT(huart, pData, Size));
 80041f6:	4770      	bx	lr
      return HAL_ERROR;
 80041f8:	2001      	movs	r0, #1
 80041fa:	4770      	bx	lr
    return HAL_BUSY;
 80041fc:	2002      	movs	r0, #2
}
 80041fe:	4770      	bx	lr
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004200:	6803      	ldr	r3, [r0, #0]
 8004202:	68da      	ldr	r2, [r3, #12]
 8004204:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004208:	60da      	str	r2, [r3, #12]
 800420a:	e7eb      	b.n	80041e4 <HAL_UART_Receive_IT+0x30>

0800420c <HAL_UART_TxCpltCallback>:
 800420c:	4770      	bx	lr
 800420e:	bf00      	nop

08004210 <UART_DMAAbortOnError>:
{
 8004210:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004212:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 8004214:	2300      	movs	r3, #0
 8004216:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004218:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 800421a:	f7fd fb07 	bl	800182c <HAL_UART_ErrorCallback>
}
 800421e:	bd08      	pop	{r3, pc}

08004220 <HAL_UARTEx_RxEventCallback>:
}
 8004220:	4770      	bx	lr
 8004222:	bf00      	nop

08004224 <UART_Receive_IT.part.0.isra.0>:
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004224:	6883      	ldr	r3, [r0, #8]
 8004226:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800422a:	d044      	beq.n	80042b6 <UART_Receive_IT.part.0.isra.0+0x92>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800422c:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800422e:	2b00      	cmp	r3, #0
 8004230:	d039      	beq.n	80042a6 <UART_Receive_IT.part.0.isra.0+0x82>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004232:	6803      	ldr	r3, [r0, #0]
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800423a:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 800423c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800423e:	3301      	adds	r3, #1
 8004240:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 8004242:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8004244:	3b01      	subs	r3, #1
 8004246:	b29b      	uxth	r3, r3
 8004248:	85c3      	strh	r3, [r0, #46]	; 0x2e
 800424a:	2b00      	cmp	r3, #0
 800424c:	d132      	bne.n	80042b4 <UART_Receive_IT.part.0.isra.0+0x90>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800424e:	6802      	ldr	r2, [r0, #0]
 8004250:	68d1      	ldr	r1, [r2, #12]
 8004252:	f021 0120 	bic.w	r1, r1, #32
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 8004256:	b500      	push	{lr}
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004258:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800425a:	68d1      	ldr	r1, [r2, #12]
 800425c:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8004260:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004262:	6951      	ldr	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8004264:	f04f 0c20 	mov.w	ip, #32
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004268:	f021 0101 	bic.w	r1, r1, #1
 800426c:	6151      	str	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 800426e:	f880 c03e 	strb.w	ip, [r0, #62]	; 0x3e
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004272:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8004274:	2901      	cmp	r1, #1
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 8004276:	b083      	sub	sp, #12
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004278:	d128      	bne.n	80042cc <UART_Receive_IT.part.0.isra.0+0xa8>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800427a:	6303      	str	r3, [r0, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800427c:	f102 030c 	add.w	r3, r2, #12
 8004280:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004284:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004288:	f102 0c0c 	add.w	ip, r2, #12
 800428c:	e84c 3100 	strex	r1, r3, [ip]
 8004290:	2900      	cmp	r1, #0
 8004292:	d1f3      	bne.n	800427c <UART_Receive_IT.part.0.isra.0+0x58>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004294:	6813      	ldr	r3, [r2, #0]
 8004296:	06db      	lsls	r3, r3, #27
 8004298:	d422      	bmi.n	80042e0 <UART_Receive_IT.part.0.isra.0+0xbc>
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800429a:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 800429c:	f7ff ffc0 	bl	8004220 <HAL_UARTEx_RxEventCallback>
}
 80042a0:	b003      	add	sp, #12
 80042a2:	f85d fb04 	ldr.w	pc, [sp], #4
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80042a6:	6903      	ldr	r3, [r0, #16]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d1c2      	bne.n	8004232 <UART_Receive_IT.part.0.isra.0+0xe>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80042ac:	6803      	ldr	r3, [r0, #0]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	7013      	strb	r3, [r2, #0]
 80042b2:	e7c3      	b.n	800423c <UART_Receive_IT.part.0.isra.0+0x18>
 80042b4:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042b6:	6903      	ldr	r3, [r0, #16]
 80042b8:	b96b      	cbnz	r3, 80042d6 <UART_Receive_IT.part.0.isra.0+0xb2>
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80042ba:	6802      	ldr	r2, [r0, #0]
 80042bc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80042be:	6852      	ldr	r2, [r2, #4]
 80042c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80042c4:	f823 2b02 	strh.w	r2, [r3], #2
      huart->pRxBuffPtr += 2U;
 80042c8:	6283      	str	r3, [r0, #40]	; 0x28
 80042ca:	e7ba      	b.n	8004242 <UART_Receive_IT.part.0.isra.0+0x1e>
        HAL_UART_RxCpltCallback(huart);
 80042cc:	f7fd faa0 	bl	8001810 <HAL_UART_RxCpltCallback>
}
 80042d0:	b003      	add	sp, #12
 80042d2:	f85d fb04 	ldr.w	pc, [sp], #4
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80042d6:	6803      	ldr	r3, [r0, #0]
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80042d8:	6a82      	ldr	r2, [r0, #40]	; 0x28
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	7013      	strb	r3, [r2, #0]
 80042de:	e7ad      	b.n	800423c <UART_Receive_IT.part.0.isra.0+0x18>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80042e0:	2300      	movs	r3, #0
 80042e2:	9301      	str	r3, [sp, #4]
 80042e4:	6813      	ldr	r3, [r2, #0]
 80042e6:	9301      	str	r3, [sp, #4]
 80042e8:	6853      	ldr	r3, [r2, #4]
 80042ea:	9301      	str	r3, [sp, #4]
 80042ec:	9b01      	ldr	r3, [sp, #4]
 80042ee:	e7d4      	b.n	800429a <UART_Receive_IT.part.0.isra.0+0x76>

080042f0 <HAL_UART_IRQHandler>:
{
 80042f0:	b530      	push	{r4, r5, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80042f2:	6803      	ldr	r3, [r0, #0]
 80042f4:	681a      	ldr	r2, [r3, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80042f6:	68d9      	ldr	r1, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80042f8:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 80042fa:	f012 0f0f 	tst.w	r2, #15
{
 80042fe:	b083      	sub	sp, #12
 8004300:	4604      	mov	r4, r0
  if (errorflags == RESET)
 8004302:	d16e      	bne.n	80043e2 <HAL_UART_IRQHandler+0xf2>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004304:	0695      	lsls	r5, r2, #26
 8004306:	d502      	bpl.n	800430e <HAL_UART_IRQHandler+0x1e>
 8004308:	068d      	lsls	r5, r1, #26
 800430a:	f100 80b1 	bmi.w	8004470 <HAL_UART_IRQHandler+0x180>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800430e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8004310:	2801      	cmp	r0, #1
 8004312:	d00b      	beq.n	800432c <HAL_UART_IRQHandler+0x3c>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004314:	0610      	lsls	r0, r2, #24
 8004316:	d502      	bpl.n	800431e <HAL_UART_IRQHandler+0x2e>
 8004318:	060d      	lsls	r5, r1, #24
 800431a:	f100 80b3 	bmi.w	8004484 <HAL_UART_IRQHandler+0x194>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800431e:	0650      	lsls	r0, r2, #25
 8004320:	d502      	bpl.n	8004328 <HAL_UART_IRQHandler+0x38>
 8004322:	064a      	lsls	r2, r1, #25
 8004324:	f100 80cd 	bmi.w	80044c2 <HAL_UART_IRQHandler+0x1d2>
}
 8004328:	b003      	add	sp, #12
 800432a:	bd30      	pop	{r4, r5, pc}
      && ((isrflags & USART_SR_IDLE) != 0U)
 800432c:	06d5      	lsls	r5, r2, #27
 800432e:	d5f1      	bpl.n	8004314 <HAL_UART_IRQHandler+0x24>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004330:	06c8      	lsls	r0, r1, #27
 8004332:	d5ef      	bpl.n	8004314 <HAL_UART_IRQHandler+0x24>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004334:	2200      	movs	r2, #0
 8004336:	9201      	str	r2, [sp, #4]
 8004338:	681a      	ldr	r2, [r3, #0]
 800433a:	9201      	str	r2, [sp, #4]
 800433c:	685a      	ldr	r2, [r3, #4]
 800433e:	9201      	str	r2, [sp, #4]
 8004340:	9a01      	ldr	r2, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004342:	695a      	ldr	r2, [r3, #20]
 8004344:	0655      	lsls	r5, r2, #25
 8004346:	f140 8116 	bpl.w	8004576 <HAL_UART_IRQHandler+0x286>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800434a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800434c:	6802      	ldr	r2, [r0, #0]
 800434e:	6852      	ldr	r2, [r2, #4]
 8004350:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 8004352:	2a00      	cmp	r2, #0
 8004354:	d0e8      	beq.n	8004328 <HAL_UART_IRQHandler+0x38>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004356:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8004358:	4291      	cmp	r1, r2
 800435a:	d9e5      	bls.n	8004328 <HAL_UART_IRQHandler+0x38>
        huart->RxXferCount = nb_remaining_rx_data;
 800435c:	85e2      	strh	r2, [r4, #46]	; 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800435e:	69c2      	ldr	r2, [r0, #28]
 8004360:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8004364:	d036      	beq.n	80043d4 <HAL_UART_IRQHandler+0xe4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004366:	f103 020c 	add.w	r2, r3, #12
 800436a:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800436e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004372:	f103 050c 	add.w	r5, r3, #12
 8004376:	e845 2100 	strex	r1, r2, [r5]
 800437a:	2900      	cmp	r1, #0
 800437c:	d1f3      	bne.n	8004366 <HAL_UART_IRQHandler+0x76>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800437e:	f103 0214 	add.w	r2, r3, #20
 8004382:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004386:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800438a:	f103 0514 	add.w	r5, r3, #20
 800438e:	e845 2100 	strex	r1, r2, [r5]
 8004392:	2900      	cmp	r1, #0
 8004394:	d1f3      	bne.n	800437e <HAL_UART_IRQHandler+0x8e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004396:	f103 0214 	add.w	r2, r3, #20
 800439a:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800439e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043a2:	f103 0514 	add.w	r5, r3, #20
 80043a6:	e845 2100 	strex	r1, r2, [r5]
 80043aa:	2900      	cmp	r1, #0
 80043ac:	d1f3      	bne.n	8004396 <HAL_UART_IRQHandler+0xa6>
          huart->RxState = HAL_UART_STATE_READY;
 80043ae:	2220      	movs	r2, #32
 80043b0:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043b4:	6321      	str	r1, [r4, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043b6:	f103 020c 	add.w	r2, r3, #12
 80043ba:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043be:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043c2:	f103 050c 	add.w	r5, r3, #12
 80043c6:	e845 2100 	strex	r1, r2, [r5]
 80043ca:	2900      	cmp	r1, #0
 80043cc:	d1f3      	bne.n	80043b6 <HAL_UART_IRQHandler+0xc6>
          (void)HAL_DMA_Abort(huart->hdmarx);
 80043ce:	f7fd fd5b 	bl	8001e88 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80043d2:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 80043d4:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 80043d6:	1ac9      	subs	r1, r1, r3
 80043d8:	4620      	mov	r0, r4
 80043da:	b289      	uxth	r1, r1
 80043dc:	f7ff ff20 	bl	8004220 <HAL_UARTEx_RxEventCallback>
 80043e0:	e7a2      	b.n	8004328 <HAL_UART_IRQHandler+0x38>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80043e2:	f005 0501 	and.w	r5, r5, #1
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80043e6:	f401 7090 	and.w	r0, r1, #288	; 0x120
 80043ea:	4328      	orrs	r0, r5
 80043ec:	d08f      	beq.n	800430e <HAL_UART_IRQHandler+0x1e>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80043ee:	07d0      	lsls	r0, r2, #31
 80043f0:	d505      	bpl.n	80043fe <HAL_UART_IRQHandler+0x10e>
 80043f2:	05c8      	lsls	r0, r1, #23
 80043f4:	d503      	bpl.n	80043fe <HAL_UART_IRQHandler+0x10e>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80043f6:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80043f8:	f040 0001 	orr.w	r0, r0, #1
 80043fc:	6420      	str	r0, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80043fe:	0750      	lsls	r0, r2, #29
 8004400:	d531      	bpl.n	8004466 <HAL_UART_IRQHandler+0x176>
 8004402:	b14d      	cbz	r5, 8004418 <HAL_UART_IRQHandler+0x128>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004404:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8004406:	f040 0002 	orr.w	r0, r0, #2
 800440a:	6420      	str	r0, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800440c:	0790      	lsls	r0, r2, #30
 800440e:	d503      	bpl.n	8004418 <HAL_UART_IRQHandler+0x128>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004410:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8004412:	f040 0004 	orr.w	r0, r0, #4
 8004416:	6420      	str	r0, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004418:	0710      	lsls	r0, r2, #28
 800441a:	d507      	bpl.n	800442c <HAL_UART_IRQHandler+0x13c>
 800441c:	f001 0020 	and.w	r0, r1, #32
 8004420:	4328      	orrs	r0, r5
 8004422:	d003      	beq.n	800442c <HAL_UART_IRQHandler+0x13c>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004424:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8004426:	f040 0008 	orr.w	r0, r0, #8
 800442a:	6420      	str	r0, [r4, #64]	; 0x40
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800442c:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800442e:	2800      	cmp	r0, #0
 8004430:	f43f af7a 	beq.w	8004328 <HAL_UART_IRQHandler+0x38>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004434:	0690      	lsls	r0, r2, #26
 8004436:	d509      	bpl.n	800444c <HAL_UART_IRQHandler+0x15c>
 8004438:	0689      	lsls	r1, r1, #26
 800443a:	d507      	bpl.n	800444c <HAL_UART_IRQHandler+0x15c>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800443c:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8004440:	2a22      	cmp	r2, #34	; 0x22
 8004442:	d103      	bne.n	800444c <HAL_UART_IRQHandler+0x15c>
 8004444:	4620      	mov	r0, r4
 8004446:	f7ff feed 	bl	8004224 <UART_Receive_IT.part.0.isra.0>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800444a:	6823      	ldr	r3, [r4, #0]
 800444c:	695a      	ldr	r2, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800444e:	6c25      	ldr	r5, [r4, #64]	; 0x40
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004450:	f002 0240 	and.w	r2, r2, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004454:	f005 0508 	and.w	r5, r5, #8
 8004458:	4315      	orrs	r5, r2
 800445a:	d13d      	bne.n	80044d8 <HAL_UART_IRQHandler+0x1e8>
        HAL_UART_ErrorCallback(huart);
 800445c:	4620      	mov	r0, r4
 800445e:	f7fd f9e5 	bl	800182c <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004462:	6425      	str	r5, [r4, #64]	; 0x40
 8004464:	e760      	b.n	8004328 <HAL_UART_IRQHandler+0x38>
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004466:	0790      	lsls	r0, r2, #30
 8004468:	d5d6      	bpl.n	8004418 <HAL_UART_IRQHandler+0x128>
 800446a:	2d00      	cmp	r5, #0
 800446c:	d1d0      	bne.n	8004410 <HAL_UART_IRQHandler+0x120>
 800446e:	e7d3      	b.n	8004418 <HAL_UART_IRQHandler+0x128>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004470:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8004474:	2b22      	cmp	r3, #34	; 0x22
 8004476:	f47f af57 	bne.w	8004328 <HAL_UART_IRQHandler+0x38>
}
 800447a:	b003      	add	sp, #12
 800447c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004480:	f7ff bed0 	b.w	8004224 <UART_Receive_IT.part.0.isra.0>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004484:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8004488:	2a21      	cmp	r2, #33	; 0x21
 800448a:	f47f af4d 	bne.w	8004328 <HAL_UART_IRQHandler+0x38>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800448e:	68a2      	ldr	r2, [r4, #8]
 8004490:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8004494:	f000 80a8 	beq.w	80045e8 <HAL_UART_IRQHandler+0x2f8>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004498:	6a22      	ldr	r2, [r4, #32]
 800449a:	1c51      	adds	r1, r2, #1
 800449c:	6221      	str	r1, [r4, #32]
 800449e:	7812      	ldrb	r2, [r2, #0]
 80044a0:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 80044a2:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 80044a4:	3a01      	subs	r2, #1
 80044a6:	b292      	uxth	r2, r2
 80044a8:	84e2      	strh	r2, [r4, #38]	; 0x26
 80044aa:	2a00      	cmp	r2, #0
 80044ac:	f47f af3c 	bne.w	8004328 <HAL_UART_IRQHandler+0x38>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80044b0:	68da      	ldr	r2, [r3, #12]
 80044b2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80044b6:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80044b8:	68da      	ldr	r2, [r3, #12]
 80044ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80044be:	60da      	str	r2, [r3, #12]
 80044c0:	e732      	b.n	8004328 <HAL_UART_IRQHandler+0x38>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80044c2:	68da      	ldr	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 80044c4:	2120      	movs	r1, #32
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80044c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044ca:	60da      	str	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 80044cc:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_READY;
 80044ce:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  HAL_UART_TxCpltCallback(huart);
 80044d2:	f7ff fe9b 	bl	800420c <HAL_UART_TxCpltCallback>
    return;
 80044d6:	e727      	b.n	8004328 <HAL_UART_IRQHandler+0x38>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044d8:	f103 020c 	add.w	r2, r3, #12
 80044dc:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044e0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044e4:	f103 000c 	add.w	r0, r3, #12
 80044e8:	e840 2100 	strex	r1, r2, [r0]
 80044ec:	2900      	cmp	r1, #0
 80044ee:	d1f3      	bne.n	80044d8 <HAL_UART_IRQHandler+0x1e8>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044f0:	f103 0214 	add.w	r2, r3, #20
 80044f4:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044f8:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044fc:	f103 0014 	add.w	r0, r3, #20
 8004500:	e840 2100 	strex	r1, r2, [r0]
 8004504:	2900      	cmp	r1, #0
 8004506:	d1f3      	bne.n	80044f0 <HAL_UART_IRQHandler+0x200>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004508:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800450a:	2a01      	cmp	r2, #1
 800450c:	d022      	beq.n	8004554 <HAL_UART_IRQHandler+0x264>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800450e:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8004510:	2120      	movs	r1, #32
 8004512:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004516:	6322      	str	r2, [r4, #48]	; 0x30
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004518:	695a      	ldr	r2, [r3, #20]
 800451a:	0652      	lsls	r2, r2, #25
 800451c:	d527      	bpl.n	800456e <HAL_UART_IRQHandler+0x27e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800451e:	f103 0214 	add.w	r2, r3, #20
 8004522:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004526:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800452a:	f103 0014 	add.w	r0, r3, #20
 800452e:	e840 2100 	strex	r1, r2, [r0]
 8004532:	2900      	cmp	r1, #0
 8004534:	d1f3      	bne.n	800451e <HAL_UART_IRQHandler+0x22e>
          if (huart->hdmarx != NULL)
 8004536:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004538:	b1c8      	cbz	r0, 800456e <HAL_UART_IRQHandler+0x27e>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800453a:	4b31      	ldr	r3, [pc, #196]	; (8004600 <HAL_UART_IRQHandler+0x310>)
 800453c:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800453e:	f7fd fceb 	bl	8001f18 <HAL_DMA_Abort_IT>
 8004542:	2800      	cmp	r0, #0
 8004544:	f43f aef0 	beq.w	8004328 <HAL_UART_IRQHandler+0x38>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004548:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800454a:	6d03      	ldr	r3, [r0, #80]	; 0x50
}
 800454c:	b003      	add	sp, #12
 800454e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004552:	4718      	bx	r3
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004554:	f103 020c 	add.w	r2, r3, #12
 8004558:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800455c:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004560:	f103 000c 	add.w	r0, r3, #12
 8004564:	e840 2100 	strex	r1, r2, [r0]
 8004568:	2900      	cmp	r1, #0
 800456a:	d1f3      	bne.n	8004554 <HAL_UART_IRQHandler+0x264>
 800456c:	e7cf      	b.n	800450e <HAL_UART_IRQHandler+0x21e>
            HAL_UART_ErrorCallback(huart);
 800456e:	4620      	mov	r0, r4
 8004570:	f7fd f95c 	bl	800182c <HAL_UART_ErrorCallback>
 8004574:	e6d8      	b.n	8004328 <HAL_UART_IRQHandler+0x38>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004576:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
      if ((huart->RxXferCount > 0U)
 8004578:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 800457a:	b292      	uxth	r2, r2
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800457c:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 800457e:	2a00      	cmp	r2, #0
 8004580:	f43f aed2 	beq.w	8004328 <HAL_UART_IRQHandler+0x38>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004584:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8004586:	1a51      	subs	r1, r2, r1
 8004588:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 800458a:	2900      	cmp	r1, #0
 800458c:	f43f aecc 	beq.w	8004328 <HAL_UART_IRQHandler+0x38>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004590:	f103 020c 	add.w	r2, r3, #12
 8004594:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004598:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800459c:	f103 050c 	add.w	r5, r3, #12
 80045a0:	e845 2000 	strex	r0, r2, [r5]
 80045a4:	2800      	cmp	r0, #0
 80045a6:	d1f3      	bne.n	8004590 <HAL_UART_IRQHandler+0x2a0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045a8:	f103 0214 	add.w	r2, r3, #20
 80045ac:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045b0:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045b4:	f103 0514 	add.w	r5, r3, #20
 80045b8:	e845 2000 	strex	r0, r2, [r5]
 80045bc:	2800      	cmp	r0, #0
 80045be:	d1f3      	bne.n	80045a8 <HAL_UART_IRQHandler+0x2b8>
        huart->RxState = HAL_UART_STATE_READY;
 80045c0:	2220      	movs	r2, #32
 80045c2:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045c6:	6320      	str	r0, [r4, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045c8:	f103 020c 	add.w	r2, r3, #12
 80045cc:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045d0:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045d4:	f103 050c 	add.w	r5, r3, #12
 80045d8:	e845 2000 	strex	r0, r2, [r5]
 80045dc:	2800      	cmp	r0, #0
 80045de:	d1f3      	bne.n	80045c8 <HAL_UART_IRQHandler+0x2d8>
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80045e0:	4620      	mov	r0, r4
 80045e2:	f7ff fe1d 	bl	8004220 <HAL_UARTEx_RxEventCallback>
 80045e6:	e69f      	b.n	8004328 <HAL_UART_IRQHandler+0x38>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045e8:	6922      	ldr	r2, [r4, #16]
 80045ea:	2a00      	cmp	r2, #0
 80045ec:	f47f af54 	bne.w	8004498 <HAL_UART_IRQHandler+0x1a8>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80045f0:	6a22      	ldr	r2, [r4, #32]
 80045f2:	f832 1b02 	ldrh.w	r1, [r2], #2
 80045f6:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80045fa:	6059      	str	r1, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80045fc:	6222      	str	r2, [r4, #32]
 80045fe:	e750      	b.n	80044a2 <HAL_UART_IRQHandler+0x1b2>
 8004600:	08004211 	.word	0x08004211

08004604 <__errno>:
 8004604:	4b01      	ldr	r3, [pc, #4]	; (800460c <__errno+0x8>)
 8004606:	6818      	ldr	r0, [r3, #0]
 8004608:	4770      	bx	lr
 800460a:	bf00      	nop
 800460c:	2000000c 	.word	0x2000000c

08004610 <__libc_init_array>:
 8004610:	b570      	push	{r4, r5, r6, lr}
 8004612:	4d0d      	ldr	r5, [pc, #52]	; (8004648 <__libc_init_array+0x38>)
 8004614:	4c0d      	ldr	r4, [pc, #52]	; (800464c <__libc_init_array+0x3c>)
 8004616:	1b64      	subs	r4, r4, r5
 8004618:	10a4      	asrs	r4, r4, #2
 800461a:	2600      	movs	r6, #0
 800461c:	42a6      	cmp	r6, r4
 800461e:	d109      	bne.n	8004634 <__libc_init_array+0x24>
 8004620:	4d0b      	ldr	r5, [pc, #44]	; (8004650 <__libc_init_array+0x40>)
 8004622:	4c0c      	ldr	r4, [pc, #48]	; (8004654 <__libc_init_array+0x44>)
 8004624:	f002 fe8a 	bl	800733c <_init>
 8004628:	1b64      	subs	r4, r4, r5
 800462a:	10a4      	asrs	r4, r4, #2
 800462c:	2600      	movs	r6, #0
 800462e:	42a6      	cmp	r6, r4
 8004630:	d105      	bne.n	800463e <__libc_init_array+0x2e>
 8004632:	bd70      	pop	{r4, r5, r6, pc}
 8004634:	f855 3b04 	ldr.w	r3, [r5], #4
 8004638:	4798      	blx	r3
 800463a:	3601      	adds	r6, #1
 800463c:	e7ee      	b.n	800461c <__libc_init_array+0xc>
 800463e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004642:	4798      	blx	r3
 8004644:	3601      	adds	r6, #1
 8004646:	e7f2      	b.n	800462e <__libc_init_array+0x1e>
 8004648:	080077fc 	.word	0x080077fc
 800464c:	080077fc 	.word	0x080077fc
 8004650:	080077fc 	.word	0x080077fc
 8004654:	08007800 	.word	0x08007800

08004658 <memset>:
 8004658:	4402      	add	r2, r0
 800465a:	4603      	mov	r3, r0
 800465c:	4293      	cmp	r3, r2
 800465e:	d100      	bne.n	8004662 <memset+0xa>
 8004660:	4770      	bx	lr
 8004662:	f803 1b01 	strb.w	r1, [r3], #1
 8004666:	e7f9      	b.n	800465c <memset+0x4>

08004668 <__cvt>:
 8004668:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800466c:	ec55 4b10 	vmov	r4, r5, d0
 8004670:	2d00      	cmp	r5, #0
 8004672:	460e      	mov	r6, r1
 8004674:	4619      	mov	r1, r3
 8004676:	462b      	mov	r3, r5
 8004678:	bfbb      	ittet	lt
 800467a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800467e:	461d      	movlt	r5, r3
 8004680:	2300      	movge	r3, #0
 8004682:	232d      	movlt	r3, #45	; 0x2d
 8004684:	700b      	strb	r3, [r1, #0]
 8004686:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004688:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800468c:	4691      	mov	r9, r2
 800468e:	f023 0820 	bic.w	r8, r3, #32
 8004692:	bfbc      	itt	lt
 8004694:	4622      	movlt	r2, r4
 8004696:	4614      	movlt	r4, r2
 8004698:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800469c:	d005      	beq.n	80046aa <__cvt+0x42>
 800469e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80046a2:	d100      	bne.n	80046a6 <__cvt+0x3e>
 80046a4:	3601      	adds	r6, #1
 80046a6:	2102      	movs	r1, #2
 80046a8:	e000      	b.n	80046ac <__cvt+0x44>
 80046aa:	2103      	movs	r1, #3
 80046ac:	ab03      	add	r3, sp, #12
 80046ae:	9301      	str	r3, [sp, #4]
 80046b0:	ab02      	add	r3, sp, #8
 80046b2:	9300      	str	r3, [sp, #0]
 80046b4:	ec45 4b10 	vmov	d0, r4, r5
 80046b8:	4653      	mov	r3, sl
 80046ba:	4632      	mov	r2, r6
 80046bc:	f000 fee0 	bl	8005480 <_dtoa_r>
 80046c0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80046c4:	4607      	mov	r7, r0
 80046c6:	d102      	bne.n	80046ce <__cvt+0x66>
 80046c8:	f019 0f01 	tst.w	r9, #1
 80046cc:	d022      	beq.n	8004714 <__cvt+0xac>
 80046ce:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80046d2:	eb07 0906 	add.w	r9, r7, r6
 80046d6:	d110      	bne.n	80046fa <__cvt+0x92>
 80046d8:	783b      	ldrb	r3, [r7, #0]
 80046da:	2b30      	cmp	r3, #48	; 0x30
 80046dc:	d10a      	bne.n	80046f4 <__cvt+0x8c>
 80046de:	2200      	movs	r2, #0
 80046e0:	2300      	movs	r3, #0
 80046e2:	4620      	mov	r0, r4
 80046e4:	4629      	mov	r1, r5
 80046e6:	f7fc fa0f 	bl	8000b08 <__aeabi_dcmpeq>
 80046ea:	b918      	cbnz	r0, 80046f4 <__cvt+0x8c>
 80046ec:	f1c6 0601 	rsb	r6, r6, #1
 80046f0:	f8ca 6000 	str.w	r6, [sl]
 80046f4:	f8da 3000 	ldr.w	r3, [sl]
 80046f8:	4499      	add	r9, r3
 80046fa:	2200      	movs	r2, #0
 80046fc:	2300      	movs	r3, #0
 80046fe:	4620      	mov	r0, r4
 8004700:	4629      	mov	r1, r5
 8004702:	f7fc fa01 	bl	8000b08 <__aeabi_dcmpeq>
 8004706:	b108      	cbz	r0, 800470c <__cvt+0xa4>
 8004708:	f8cd 900c 	str.w	r9, [sp, #12]
 800470c:	2230      	movs	r2, #48	; 0x30
 800470e:	9b03      	ldr	r3, [sp, #12]
 8004710:	454b      	cmp	r3, r9
 8004712:	d307      	bcc.n	8004724 <__cvt+0xbc>
 8004714:	9b03      	ldr	r3, [sp, #12]
 8004716:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004718:	1bdb      	subs	r3, r3, r7
 800471a:	4638      	mov	r0, r7
 800471c:	6013      	str	r3, [r2, #0]
 800471e:	b004      	add	sp, #16
 8004720:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004724:	1c59      	adds	r1, r3, #1
 8004726:	9103      	str	r1, [sp, #12]
 8004728:	701a      	strb	r2, [r3, #0]
 800472a:	e7f0      	b.n	800470e <__cvt+0xa6>

0800472c <__exponent>:
 800472c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800472e:	4603      	mov	r3, r0
 8004730:	2900      	cmp	r1, #0
 8004732:	bfb8      	it	lt
 8004734:	4249      	neglt	r1, r1
 8004736:	f803 2b02 	strb.w	r2, [r3], #2
 800473a:	bfb4      	ite	lt
 800473c:	222d      	movlt	r2, #45	; 0x2d
 800473e:	222b      	movge	r2, #43	; 0x2b
 8004740:	2909      	cmp	r1, #9
 8004742:	7042      	strb	r2, [r0, #1]
 8004744:	dd2a      	ble.n	800479c <__exponent+0x70>
 8004746:	f10d 0407 	add.w	r4, sp, #7
 800474a:	46a4      	mov	ip, r4
 800474c:	270a      	movs	r7, #10
 800474e:	46a6      	mov	lr, r4
 8004750:	460a      	mov	r2, r1
 8004752:	fb91 f6f7 	sdiv	r6, r1, r7
 8004756:	fb07 1516 	mls	r5, r7, r6, r1
 800475a:	3530      	adds	r5, #48	; 0x30
 800475c:	2a63      	cmp	r2, #99	; 0x63
 800475e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8004762:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004766:	4631      	mov	r1, r6
 8004768:	dcf1      	bgt.n	800474e <__exponent+0x22>
 800476a:	3130      	adds	r1, #48	; 0x30
 800476c:	f1ae 0502 	sub.w	r5, lr, #2
 8004770:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004774:	1c44      	adds	r4, r0, #1
 8004776:	4629      	mov	r1, r5
 8004778:	4561      	cmp	r1, ip
 800477a:	d30a      	bcc.n	8004792 <__exponent+0x66>
 800477c:	f10d 0209 	add.w	r2, sp, #9
 8004780:	eba2 020e 	sub.w	r2, r2, lr
 8004784:	4565      	cmp	r5, ip
 8004786:	bf88      	it	hi
 8004788:	2200      	movhi	r2, #0
 800478a:	4413      	add	r3, r2
 800478c:	1a18      	subs	r0, r3, r0
 800478e:	b003      	add	sp, #12
 8004790:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004792:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004796:	f804 2f01 	strb.w	r2, [r4, #1]!
 800479a:	e7ed      	b.n	8004778 <__exponent+0x4c>
 800479c:	2330      	movs	r3, #48	; 0x30
 800479e:	3130      	adds	r1, #48	; 0x30
 80047a0:	7083      	strb	r3, [r0, #2]
 80047a2:	70c1      	strb	r1, [r0, #3]
 80047a4:	1d03      	adds	r3, r0, #4
 80047a6:	e7f1      	b.n	800478c <__exponent+0x60>

080047a8 <_printf_float>:
 80047a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047ac:	ed2d 8b02 	vpush	{d8}
 80047b0:	b08d      	sub	sp, #52	; 0x34
 80047b2:	460c      	mov	r4, r1
 80047b4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80047b8:	4616      	mov	r6, r2
 80047ba:	461f      	mov	r7, r3
 80047bc:	4605      	mov	r5, r0
 80047be:	f001 fe05 	bl	80063cc <_localeconv_r>
 80047c2:	f8d0 a000 	ldr.w	sl, [r0]
 80047c6:	4650      	mov	r0, sl
 80047c8:	f7fb fd22 	bl	8000210 <strlen>
 80047cc:	2300      	movs	r3, #0
 80047ce:	930a      	str	r3, [sp, #40]	; 0x28
 80047d0:	6823      	ldr	r3, [r4, #0]
 80047d2:	9305      	str	r3, [sp, #20]
 80047d4:	f8d8 3000 	ldr.w	r3, [r8]
 80047d8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80047dc:	3307      	adds	r3, #7
 80047de:	f023 0307 	bic.w	r3, r3, #7
 80047e2:	f103 0208 	add.w	r2, r3, #8
 80047e6:	f8c8 2000 	str.w	r2, [r8]
 80047ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047ee:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80047f2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80047f6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80047fa:	9307      	str	r3, [sp, #28]
 80047fc:	f8cd 8018 	str.w	r8, [sp, #24]
 8004800:	ee08 0a10 	vmov	s16, r0
 8004804:	4b9f      	ldr	r3, [pc, #636]	; (8004a84 <_printf_float+0x2dc>)
 8004806:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800480a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800480e:	f7fc f9ad 	bl	8000b6c <__aeabi_dcmpun>
 8004812:	bb88      	cbnz	r0, 8004878 <_printf_float+0xd0>
 8004814:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004818:	4b9a      	ldr	r3, [pc, #616]	; (8004a84 <_printf_float+0x2dc>)
 800481a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800481e:	f7fc f987 	bl	8000b30 <__aeabi_dcmple>
 8004822:	bb48      	cbnz	r0, 8004878 <_printf_float+0xd0>
 8004824:	2200      	movs	r2, #0
 8004826:	2300      	movs	r3, #0
 8004828:	4640      	mov	r0, r8
 800482a:	4649      	mov	r1, r9
 800482c:	f7fc f976 	bl	8000b1c <__aeabi_dcmplt>
 8004830:	b110      	cbz	r0, 8004838 <_printf_float+0x90>
 8004832:	232d      	movs	r3, #45	; 0x2d
 8004834:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004838:	4b93      	ldr	r3, [pc, #588]	; (8004a88 <_printf_float+0x2e0>)
 800483a:	4894      	ldr	r0, [pc, #592]	; (8004a8c <_printf_float+0x2e4>)
 800483c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004840:	bf94      	ite	ls
 8004842:	4698      	movls	r8, r3
 8004844:	4680      	movhi	r8, r0
 8004846:	2303      	movs	r3, #3
 8004848:	6123      	str	r3, [r4, #16]
 800484a:	9b05      	ldr	r3, [sp, #20]
 800484c:	f023 0204 	bic.w	r2, r3, #4
 8004850:	6022      	str	r2, [r4, #0]
 8004852:	f04f 0900 	mov.w	r9, #0
 8004856:	9700      	str	r7, [sp, #0]
 8004858:	4633      	mov	r3, r6
 800485a:	aa0b      	add	r2, sp, #44	; 0x2c
 800485c:	4621      	mov	r1, r4
 800485e:	4628      	mov	r0, r5
 8004860:	f000 f9d8 	bl	8004c14 <_printf_common>
 8004864:	3001      	adds	r0, #1
 8004866:	f040 8090 	bne.w	800498a <_printf_float+0x1e2>
 800486a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800486e:	b00d      	add	sp, #52	; 0x34
 8004870:	ecbd 8b02 	vpop	{d8}
 8004874:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004878:	4642      	mov	r2, r8
 800487a:	464b      	mov	r3, r9
 800487c:	4640      	mov	r0, r8
 800487e:	4649      	mov	r1, r9
 8004880:	f7fc f974 	bl	8000b6c <__aeabi_dcmpun>
 8004884:	b140      	cbz	r0, 8004898 <_printf_float+0xf0>
 8004886:	464b      	mov	r3, r9
 8004888:	2b00      	cmp	r3, #0
 800488a:	bfbc      	itt	lt
 800488c:	232d      	movlt	r3, #45	; 0x2d
 800488e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004892:	487f      	ldr	r0, [pc, #508]	; (8004a90 <_printf_float+0x2e8>)
 8004894:	4b7f      	ldr	r3, [pc, #508]	; (8004a94 <_printf_float+0x2ec>)
 8004896:	e7d1      	b.n	800483c <_printf_float+0x94>
 8004898:	6863      	ldr	r3, [r4, #4]
 800489a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800489e:	9206      	str	r2, [sp, #24]
 80048a0:	1c5a      	adds	r2, r3, #1
 80048a2:	d13f      	bne.n	8004924 <_printf_float+0x17c>
 80048a4:	2306      	movs	r3, #6
 80048a6:	6063      	str	r3, [r4, #4]
 80048a8:	9b05      	ldr	r3, [sp, #20]
 80048aa:	6861      	ldr	r1, [r4, #4]
 80048ac:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80048b0:	2300      	movs	r3, #0
 80048b2:	9303      	str	r3, [sp, #12]
 80048b4:	ab0a      	add	r3, sp, #40	; 0x28
 80048b6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80048ba:	ab09      	add	r3, sp, #36	; 0x24
 80048bc:	ec49 8b10 	vmov	d0, r8, r9
 80048c0:	9300      	str	r3, [sp, #0]
 80048c2:	6022      	str	r2, [r4, #0]
 80048c4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80048c8:	4628      	mov	r0, r5
 80048ca:	f7ff fecd 	bl	8004668 <__cvt>
 80048ce:	9b06      	ldr	r3, [sp, #24]
 80048d0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80048d2:	2b47      	cmp	r3, #71	; 0x47
 80048d4:	4680      	mov	r8, r0
 80048d6:	d108      	bne.n	80048ea <_printf_float+0x142>
 80048d8:	1cc8      	adds	r0, r1, #3
 80048da:	db02      	blt.n	80048e2 <_printf_float+0x13a>
 80048dc:	6863      	ldr	r3, [r4, #4]
 80048de:	4299      	cmp	r1, r3
 80048e0:	dd41      	ble.n	8004966 <_printf_float+0x1be>
 80048e2:	f1ab 0b02 	sub.w	fp, fp, #2
 80048e6:	fa5f fb8b 	uxtb.w	fp, fp
 80048ea:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80048ee:	d820      	bhi.n	8004932 <_printf_float+0x18a>
 80048f0:	3901      	subs	r1, #1
 80048f2:	465a      	mov	r2, fp
 80048f4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80048f8:	9109      	str	r1, [sp, #36]	; 0x24
 80048fa:	f7ff ff17 	bl	800472c <__exponent>
 80048fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004900:	1813      	adds	r3, r2, r0
 8004902:	2a01      	cmp	r2, #1
 8004904:	4681      	mov	r9, r0
 8004906:	6123      	str	r3, [r4, #16]
 8004908:	dc02      	bgt.n	8004910 <_printf_float+0x168>
 800490a:	6822      	ldr	r2, [r4, #0]
 800490c:	07d2      	lsls	r2, r2, #31
 800490e:	d501      	bpl.n	8004914 <_printf_float+0x16c>
 8004910:	3301      	adds	r3, #1
 8004912:	6123      	str	r3, [r4, #16]
 8004914:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004918:	2b00      	cmp	r3, #0
 800491a:	d09c      	beq.n	8004856 <_printf_float+0xae>
 800491c:	232d      	movs	r3, #45	; 0x2d
 800491e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004922:	e798      	b.n	8004856 <_printf_float+0xae>
 8004924:	9a06      	ldr	r2, [sp, #24]
 8004926:	2a47      	cmp	r2, #71	; 0x47
 8004928:	d1be      	bne.n	80048a8 <_printf_float+0x100>
 800492a:	2b00      	cmp	r3, #0
 800492c:	d1bc      	bne.n	80048a8 <_printf_float+0x100>
 800492e:	2301      	movs	r3, #1
 8004930:	e7b9      	b.n	80048a6 <_printf_float+0xfe>
 8004932:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004936:	d118      	bne.n	800496a <_printf_float+0x1c2>
 8004938:	2900      	cmp	r1, #0
 800493a:	6863      	ldr	r3, [r4, #4]
 800493c:	dd0b      	ble.n	8004956 <_printf_float+0x1ae>
 800493e:	6121      	str	r1, [r4, #16]
 8004940:	b913      	cbnz	r3, 8004948 <_printf_float+0x1a0>
 8004942:	6822      	ldr	r2, [r4, #0]
 8004944:	07d0      	lsls	r0, r2, #31
 8004946:	d502      	bpl.n	800494e <_printf_float+0x1a6>
 8004948:	3301      	adds	r3, #1
 800494a:	440b      	add	r3, r1
 800494c:	6123      	str	r3, [r4, #16]
 800494e:	65a1      	str	r1, [r4, #88]	; 0x58
 8004950:	f04f 0900 	mov.w	r9, #0
 8004954:	e7de      	b.n	8004914 <_printf_float+0x16c>
 8004956:	b913      	cbnz	r3, 800495e <_printf_float+0x1b6>
 8004958:	6822      	ldr	r2, [r4, #0]
 800495a:	07d2      	lsls	r2, r2, #31
 800495c:	d501      	bpl.n	8004962 <_printf_float+0x1ba>
 800495e:	3302      	adds	r3, #2
 8004960:	e7f4      	b.n	800494c <_printf_float+0x1a4>
 8004962:	2301      	movs	r3, #1
 8004964:	e7f2      	b.n	800494c <_printf_float+0x1a4>
 8004966:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800496a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800496c:	4299      	cmp	r1, r3
 800496e:	db05      	blt.n	800497c <_printf_float+0x1d4>
 8004970:	6823      	ldr	r3, [r4, #0]
 8004972:	6121      	str	r1, [r4, #16]
 8004974:	07d8      	lsls	r0, r3, #31
 8004976:	d5ea      	bpl.n	800494e <_printf_float+0x1a6>
 8004978:	1c4b      	adds	r3, r1, #1
 800497a:	e7e7      	b.n	800494c <_printf_float+0x1a4>
 800497c:	2900      	cmp	r1, #0
 800497e:	bfd4      	ite	le
 8004980:	f1c1 0202 	rsble	r2, r1, #2
 8004984:	2201      	movgt	r2, #1
 8004986:	4413      	add	r3, r2
 8004988:	e7e0      	b.n	800494c <_printf_float+0x1a4>
 800498a:	6823      	ldr	r3, [r4, #0]
 800498c:	055a      	lsls	r2, r3, #21
 800498e:	d407      	bmi.n	80049a0 <_printf_float+0x1f8>
 8004990:	6923      	ldr	r3, [r4, #16]
 8004992:	4642      	mov	r2, r8
 8004994:	4631      	mov	r1, r6
 8004996:	4628      	mov	r0, r5
 8004998:	47b8      	blx	r7
 800499a:	3001      	adds	r0, #1
 800499c:	d12c      	bne.n	80049f8 <_printf_float+0x250>
 800499e:	e764      	b.n	800486a <_printf_float+0xc2>
 80049a0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80049a4:	f240 80e0 	bls.w	8004b68 <_printf_float+0x3c0>
 80049a8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80049ac:	2200      	movs	r2, #0
 80049ae:	2300      	movs	r3, #0
 80049b0:	f7fc f8aa 	bl	8000b08 <__aeabi_dcmpeq>
 80049b4:	2800      	cmp	r0, #0
 80049b6:	d034      	beq.n	8004a22 <_printf_float+0x27a>
 80049b8:	4a37      	ldr	r2, [pc, #220]	; (8004a98 <_printf_float+0x2f0>)
 80049ba:	2301      	movs	r3, #1
 80049bc:	4631      	mov	r1, r6
 80049be:	4628      	mov	r0, r5
 80049c0:	47b8      	blx	r7
 80049c2:	3001      	adds	r0, #1
 80049c4:	f43f af51 	beq.w	800486a <_printf_float+0xc2>
 80049c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80049cc:	429a      	cmp	r2, r3
 80049ce:	db02      	blt.n	80049d6 <_printf_float+0x22e>
 80049d0:	6823      	ldr	r3, [r4, #0]
 80049d2:	07d8      	lsls	r0, r3, #31
 80049d4:	d510      	bpl.n	80049f8 <_printf_float+0x250>
 80049d6:	ee18 3a10 	vmov	r3, s16
 80049da:	4652      	mov	r2, sl
 80049dc:	4631      	mov	r1, r6
 80049de:	4628      	mov	r0, r5
 80049e0:	47b8      	blx	r7
 80049e2:	3001      	adds	r0, #1
 80049e4:	f43f af41 	beq.w	800486a <_printf_float+0xc2>
 80049e8:	f04f 0800 	mov.w	r8, #0
 80049ec:	f104 091a 	add.w	r9, r4, #26
 80049f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80049f2:	3b01      	subs	r3, #1
 80049f4:	4543      	cmp	r3, r8
 80049f6:	dc09      	bgt.n	8004a0c <_printf_float+0x264>
 80049f8:	6823      	ldr	r3, [r4, #0]
 80049fa:	079b      	lsls	r3, r3, #30
 80049fc:	f100 8105 	bmi.w	8004c0a <_printf_float+0x462>
 8004a00:	68e0      	ldr	r0, [r4, #12]
 8004a02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004a04:	4298      	cmp	r0, r3
 8004a06:	bfb8      	it	lt
 8004a08:	4618      	movlt	r0, r3
 8004a0a:	e730      	b.n	800486e <_printf_float+0xc6>
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	464a      	mov	r2, r9
 8004a10:	4631      	mov	r1, r6
 8004a12:	4628      	mov	r0, r5
 8004a14:	47b8      	blx	r7
 8004a16:	3001      	adds	r0, #1
 8004a18:	f43f af27 	beq.w	800486a <_printf_float+0xc2>
 8004a1c:	f108 0801 	add.w	r8, r8, #1
 8004a20:	e7e6      	b.n	80049f0 <_printf_float+0x248>
 8004a22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	dc39      	bgt.n	8004a9c <_printf_float+0x2f4>
 8004a28:	4a1b      	ldr	r2, [pc, #108]	; (8004a98 <_printf_float+0x2f0>)
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	4631      	mov	r1, r6
 8004a2e:	4628      	mov	r0, r5
 8004a30:	47b8      	blx	r7
 8004a32:	3001      	adds	r0, #1
 8004a34:	f43f af19 	beq.w	800486a <_printf_float+0xc2>
 8004a38:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	d102      	bne.n	8004a46 <_printf_float+0x29e>
 8004a40:	6823      	ldr	r3, [r4, #0]
 8004a42:	07d9      	lsls	r1, r3, #31
 8004a44:	d5d8      	bpl.n	80049f8 <_printf_float+0x250>
 8004a46:	ee18 3a10 	vmov	r3, s16
 8004a4a:	4652      	mov	r2, sl
 8004a4c:	4631      	mov	r1, r6
 8004a4e:	4628      	mov	r0, r5
 8004a50:	47b8      	blx	r7
 8004a52:	3001      	adds	r0, #1
 8004a54:	f43f af09 	beq.w	800486a <_printf_float+0xc2>
 8004a58:	f04f 0900 	mov.w	r9, #0
 8004a5c:	f104 0a1a 	add.w	sl, r4, #26
 8004a60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a62:	425b      	negs	r3, r3
 8004a64:	454b      	cmp	r3, r9
 8004a66:	dc01      	bgt.n	8004a6c <_printf_float+0x2c4>
 8004a68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a6a:	e792      	b.n	8004992 <_printf_float+0x1ea>
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	4652      	mov	r2, sl
 8004a70:	4631      	mov	r1, r6
 8004a72:	4628      	mov	r0, r5
 8004a74:	47b8      	blx	r7
 8004a76:	3001      	adds	r0, #1
 8004a78:	f43f aef7 	beq.w	800486a <_printf_float+0xc2>
 8004a7c:	f109 0901 	add.w	r9, r9, #1
 8004a80:	e7ee      	b.n	8004a60 <_printf_float+0x2b8>
 8004a82:	bf00      	nop
 8004a84:	7fefffff 	.word	0x7fefffff
 8004a88:	08007420 	.word	0x08007420
 8004a8c:	08007424 	.word	0x08007424
 8004a90:	0800742c 	.word	0x0800742c
 8004a94:	08007428 	.word	0x08007428
 8004a98:	08007430 	.word	0x08007430
 8004a9c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004a9e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004aa0:	429a      	cmp	r2, r3
 8004aa2:	bfa8      	it	ge
 8004aa4:	461a      	movge	r2, r3
 8004aa6:	2a00      	cmp	r2, #0
 8004aa8:	4691      	mov	r9, r2
 8004aaa:	dc37      	bgt.n	8004b1c <_printf_float+0x374>
 8004aac:	f04f 0b00 	mov.w	fp, #0
 8004ab0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004ab4:	f104 021a 	add.w	r2, r4, #26
 8004ab8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004aba:	9305      	str	r3, [sp, #20]
 8004abc:	eba3 0309 	sub.w	r3, r3, r9
 8004ac0:	455b      	cmp	r3, fp
 8004ac2:	dc33      	bgt.n	8004b2c <_printf_float+0x384>
 8004ac4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004ac8:	429a      	cmp	r2, r3
 8004aca:	db3b      	blt.n	8004b44 <_printf_float+0x39c>
 8004acc:	6823      	ldr	r3, [r4, #0]
 8004ace:	07da      	lsls	r2, r3, #31
 8004ad0:	d438      	bmi.n	8004b44 <_printf_float+0x39c>
 8004ad2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ad4:	9a05      	ldr	r2, [sp, #20]
 8004ad6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004ad8:	1a9a      	subs	r2, r3, r2
 8004ada:	eba3 0901 	sub.w	r9, r3, r1
 8004ade:	4591      	cmp	r9, r2
 8004ae0:	bfa8      	it	ge
 8004ae2:	4691      	movge	r9, r2
 8004ae4:	f1b9 0f00 	cmp.w	r9, #0
 8004ae8:	dc35      	bgt.n	8004b56 <_printf_float+0x3ae>
 8004aea:	f04f 0800 	mov.w	r8, #0
 8004aee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004af2:	f104 0a1a 	add.w	sl, r4, #26
 8004af6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004afa:	1a9b      	subs	r3, r3, r2
 8004afc:	eba3 0309 	sub.w	r3, r3, r9
 8004b00:	4543      	cmp	r3, r8
 8004b02:	f77f af79 	ble.w	80049f8 <_printf_float+0x250>
 8004b06:	2301      	movs	r3, #1
 8004b08:	4652      	mov	r2, sl
 8004b0a:	4631      	mov	r1, r6
 8004b0c:	4628      	mov	r0, r5
 8004b0e:	47b8      	blx	r7
 8004b10:	3001      	adds	r0, #1
 8004b12:	f43f aeaa 	beq.w	800486a <_printf_float+0xc2>
 8004b16:	f108 0801 	add.w	r8, r8, #1
 8004b1a:	e7ec      	b.n	8004af6 <_printf_float+0x34e>
 8004b1c:	4613      	mov	r3, r2
 8004b1e:	4631      	mov	r1, r6
 8004b20:	4642      	mov	r2, r8
 8004b22:	4628      	mov	r0, r5
 8004b24:	47b8      	blx	r7
 8004b26:	3001      	adds	r0, #1
 8004b28:	d1c0      	bne.n	8004aac <_printf_float+0x304>
 8004b2a:	e69e      	b.n	800486a <_printf_float+0xc2>
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	4631      	mov	r1, r6
 8004b30:	4628      	mov	r0, r5
 8004b32:	9205      	str	r2, [sp, #20]
 8004b34:	47b8      	blx	r7
 8004b36:	3001      	adds	r0, #1
 8004b38:	f43f ae97 	beq.w	800486a <_printf_float+0xc2>
 8004b3c:	9a05      	ldr	r2, [sp, #20]
 8004b3e:	f10b 0b01 	add.w	fp, fp, #1
 8004b42:	e7b9      	b.n	8004ab8 <_printf_float+0x310>
 8004b44:	ee18 3a10 	vmov	r3, s16
 8004b48:	4652      	mov	r2, sl
 8004b4a:	4631      	mov	r1, r6
 8004b4c:	4628      	mov	r0, r5
 8004b4e:	47b8      	blx	r7
 8004b50:	3001      	adds	r0, #1
 8004b52:	d1be      	bne.n	8004ad2 <_printf_float+0x32a>
 8004b54:	e689      	b.n	800486a <_printf_float+0xc2>
 8004b56:	9a05      	ldr	r2, [sp, #20]
 8004b58:	464b      	mov	r3, r9
 8004b5a:	4442      	add	r2, r8
 8004b5c:	4631      	mov	r1, r6
 8004b5e:	4628      	mov	r0, r5
 8004b60:	47b8      	blx	r7
 8004b62:	3001      	adds	r0, #1
 8004b64:	d1c1      	bne.n	8004aea <_printf_float+0x342>
 8004b66:	e680      	b.n	800486a <_printf_float+0xc2>
 8004b68:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004b6a:	2a01      	cmp	r2, #1
 8004b6c:	dc01      	bgt.n	8004b72 <_printf_float+0x3ca>
 8004b6e:	07db      	lsls	r3, r3, #31
 8004b70:	d538      	bpl.n	8004be4 <_printf_float+0x43c>
 8004b72:	2301      	movs	r3, #1
 8004b74:	4642      	mov	r2, r8
 8004b76:	4631      	mov	r1, r6
 8004b78:	4628      	mov	r0, r5
 8004b7a:	47b8      	blx	r7
 8004b7c:	3001      	adds	r0, #1
 8004b7e:	f43f ae74 	beq.w	800486a <_printf_float+0xc2>
 8004b82:	ee18 3a10 	vmov	r3, s16
 8004b86:	4652      	mov	r2, sl
 8004b88:	4631      	mov	r1, r6
 8004b8a:	4628      	mov	r0, r5
 8004b8c:	47b8      	blx	r7
 8004b8e:	3001      	adds	r0, #1
 8004b90:	f43f ae6b 	beq.w	800486a <_printf_float+0xc2>
 8004b94:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004b98:	2200      	movs	r2, #0
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	f7fb ffb4 	bl	8000b08 <__aeabi_dcmpeq>
 8004ba0:	b9d8      	cbnz	r0, 8004bda <_printf_float+0x432>
 8004ba2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ba4:	f108 0201 	add.w	r2, r8, #1
 8004ba8:	3b01      	subs	r3, #1
 8004baa:	4631      	mov	r1, r6
 8004bac:	4628      	mov	r0, r5
 8004bae:	47b8      	blx	r7
 8004bb0:	3001      	adds	r0, #1
 8004bb2:	d10e      	bne.n	8004bd2 <_printf_float+0x42a>
 8004bb4:	e659      	b.n	800486a <_printf_float+0xc2>
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	4652      	mov	r2, sl
 8004bba:	4631      	mov	r1, r6
 8004bbc:	4628      	mov	r0, r5
 8004bbe:	47b8      	blx	r7
 8004bc0:	3001      	adds	r0, #1
 8004bc2:	f43f ae52 	beq.w	800486a <_printf_float+0xc2>
 8004bc6:	f108 0801 	add.w	r8, r8, #1
 8004bca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004bcc:	3b01      	subs	r3, #1
 8004bce:	4543      	cmp	r3, r8
 8004bd0:	dcf1      	bgt.n	8004bb6 <_printf_float+0x40e>
 8004bd2:	464b      	mov	r3, r9
 8004bd4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004bd8:	e6dc      	b.n	8004994 <_printf_float+0x1ec>
 8004bda:	f04f 0800 	mov.w	r8, #0
 8004bde:	f104 0a1a 	add.w	sl, r4, #26
 8004be2:	e7f2      	b.n	8004bca <_printf_float+0x422>
 8004be4:	2301      	movs	r3, #1
 8004be6:	4642      	mov	r2, r8
 8004be8:	e7df      	b.n	8004baa <_printf_float+0x402>
 8004bea:	2301      	movs	r3, #1
 8004bec:	464a      	mov	r2, r9
 8004bee:	4631      	mov	r1, r6
 8004bf0:	4628      	mov	r0, r5
 8004bf2:	47b8      	blx	r7
 8004bf4:	3001      	adds	r0, #1
 8004bf6:	f43f ae38 	beq.w	800486a <_printf_float+0xc2>
 8004bfa:	f108 0801 	add.w	r8, r8, #1
 8004bfe:	68e3      	ldr	r3, [r4, #12]
 8004c00:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004c02:	1a5b      	subs	r3, r3, r1
 8004c04:	4543      	cmp	r3, r8
 8004c06:	dcf0      	bgt.n	8004bea <_printf_float+0x442>
 8004c08:	e6fa      	b.n	8004a00 <_printf_float+0x258>
 8004c0a:	f04f 0800 	mov.w	r8, #0
 8004c0e:	f104 0919 	add.w	r9, r4, #25
 8004c12:	e7f4      	b.n	8004bfe <_printf_float+0x456>

08004c14 <_printf_common>:
 8004c14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c18:	4616      	mov	r6, r2
 8004c1a:	4699      	mov	r9, r3
 8004c1c:	688a      	ldr	r2, [r1, #8]
 8004c1e:	690b      	ldr	r3, [r1, #16]
 8004c20:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004c24:	4293      	cmp	r3, r2
 8004c26:	bfb8      	it	lt
 8004c28:	4613      	movlt	r3, r2
 8004c2a:	6033      	str	r3, [r6, #0]
 8004c2c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004c30:	4607      	mov	r7, r0
 8004c32:	460c      	mov	r4, r1
 8004c34:	b10a      	cbz	r2, 8004c3a <_printf_common+0x26>
 8004c36:	3301      	adds	r3, #1
 8004c38:	6033      	str	r3, [r6, #0]
 8004c3a:	6823      	ldr	r3, [r4, #0]
 8004c3c:	0699      	lsls	r1, r3, #26
 8004c3e:	bf42      	ittt	mi
 8004c40:	6833      	ldrmi	r3, [r6, #0]
 8004c42:	3302      	addmi	r3, #2
 8004c44:	6033      	strmi	r3, [r6, #0]
 8004c46:	6825      	ldr	r5, [r4, #0]
 8004c48:	f015 0506 	ands.w	r5, r5, #6
 8004c4c:	d106      	bne.n	8004c5c <_printf_common+0x48>
 8004c4e:	f104 0a19 	add.w	sl, r4, #25
 8004c52:	68e3      	ldr	r3, [r4, #12]
 8004c54:	6832      	ldr	r2, [r6, #0]
 8004c56:	1a9b      	subs	r3, r3, r2
 8004c58:	42ab      	cmp	r3, r5
 8004c5a:	dc26      	bgt.n	8004caa <_printf_common+0x96>
 8004c5c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004c60:	1e13      	subs	r3, r2, #0
 8004c62:	6822      	ldr	r2, [r4, #0]
 8004c64:	bf18      	it	ne
 8004c66:	2301      	movne	r3, #1
 8004c68:	0692      	lsls	r2, r2, #26
 8004c6a:	d42b      	bmi.n	8004cc4 <_printf_common+0xb0>
 8004c6c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004c70:	4649      	mov	r1, r9
 8004c72:	4638      	mov	r0, r7
 8004c74:	47c0      	blx	r8
 8004c76:	3001      	adds	r0, #1
 8004c78:	d01e      	beq.n	8004cb8 <_printf_common+0xa4>
 8004c7a:	6823      	ldr	r3, [r4, #0]
 8004c7c:	68e5      	ldr	r5, [r4, #12]
 8004c7e:	6832      	ldr	r2, [r6, #0]
 8004c80:	f003 0306 	and.w	r3, r3, #6
 8004c84:	2b04      	cmp	r3, #4
 8004c86:	bf08      	it	eq
 8004c88:	1aad      	subeq	r5, r5, r2
 8004c8a:	68a3      	ldr	r3, [r4, #8]
 8004c8c:	6922      	ldr	r2, [r4, #16]
 8004c8e:	bf0c      	ite	eq
 8004c90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004c94:	2500      	movne	r5, #0
 8004c96:	4293      	cmp	r3, r2
 8004c98:	bfc4      	itt	gt
 8004c9a:	1a9b      	subgt	r3, r3, r2
 8004c9c:	18ed      	addgt	r5, r5, r3
 8004c9e:	2600      	movs	r6, #0
 8004ca0:	341a      	adds	r4, #26
 8004ca2:	42b5      	cmp	r5, r6
 8004ca4:	d11a      	bne.n	8004cdc <_printf_common+0xc8>
 8004ca6:	2000      	movs	r0, #0
 8004ca8:	e008      	b.n	8004cbc <_printf_common+0xa8>
 8004caa:	2301      	movs	r3, #1
 8004cac:	4652      	mov	r2, sl
 8004cae:	4649      	mov	r1, r9
 8004cb0:	4638      	mov	r0, r7
 8004cb2:	47c0      	blx	r8
 8004cb4:	3001      	adds	r0, #1
 8004cb6:	d103      	bne.n	8004cc0 <_printf_common+0xac>
 8004cb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004cbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cc0:	3501      	adds	r5, #1
 8004cc2:	e7c6      	b.n	8004c52 <_printf_common+0x3e>
 8004cc4:	18e1      	adds	r1, r4, r3
 8004cc6:	1c5a      	adds	r2, r3, #1
 8004cc8:	2030      	movs	r0, #48	; 0x30
 8004cca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004cce:	4422      	add	r2, r4
 8004cd0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004cd4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004cd8:	3302      	adds	r3, #2
 8004cda:	e7c7      	b.n	8004c6c <_printf_common+0x58>
 8004cdc:	2301      	movs	r3, #1
 8004cde:	4622      	mov	r2, r4
 8004ce0:	4649      	mov	r1, r9
 8004ce2:	4638      	mov	r0, r7
 8004ce4:	47c0      	blx	r8
 8004ce6:	3001      	adds	r0, #1
 8004ce8:	d0e6      	beq.n	8004cb8 <_printf_common+0xa4>
 8004cea:	3601      	adds	r6, #1
 8004cec:	e7d9      	b.n	8004ca2 <_printf_common+0x8e>
	...

08004cf0 <_printf_i>:
 8004cf0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004cf4:	7e0f      	ldrb	r7, [r1, #24]
 8004cf6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004cf8:	2f78      	cmp	r7, #120	; 0x78
 8004cfa:	4691      	mov	r9, r2
 8004cfc:	4680      	mov	r8, r0
 8004cfe:	460c      	mov	r4, r1
 8004d00:	469a      	mov	sl, r3
 8004d02:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004d06:	d807      	bhi.n	8004d18 <_printf_i+0x28>
 8004d08:	2f62      	cmp	r7, #98	; 0x62
 8004d0a:	d80a      	bhi.n	8004d22 <_printf_i+0x32>
 8004d0c:	2f00      	cmp	r7, #0
 8004d0e:	f000 80d8 	beq.w	8004ec2 <_printf_i+0x1d2>
 8004d12:	2f58      	cmp	r7, #88	; 0x58
 8004d14:	f000 80a3 	beq.w	8004e5e <_printf_i+0x16e>
 8004d18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d1c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004d20:	e03a      	b.n	8004d98 <_printf_i+0xa8>
 8004d22:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004d26:	2b15      	cmp	r3, #21
 8004d28:	d8f6      	bhi.n	8004d18 <_printf_i+0x28>
 8004d2a:	a101      	add	r1, pc, #4	; (adr r1, 8004d30 <_printf_i+0x40>)
 8004d2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004d30:	08004d89 	.word	0x08004d89
 8004d34:	08004d9d 	.word	0x08004d9d
 8004d38:	08004d19 	.word	0x08004d19
 8004d3c:	08004d19 	.word	0x08004d19
 8004d40:	08004d19 	.word	0x08004d19
 8004d44:	08004d19 	.word	0x08004d19
 8004d48:	08004d9d 	.word	0x08004d9d
 8004d4c:	08004d19 	.word	0x08004d19
 8004d50:	08004d19 	.word	0x08004d19
 8004d54:	08004d19 	.word	0x08004d19
 8004d58:	08004d19 	.word	0x08004d19
 8004d5c:	08004ea9 	.word	0x08004ea9
 8004d60:	08004dcd 	.word	0x08004dcd
 8004d64:	08004e8b 	.word	0x08004e8b
 8004d68:	08004d19 	.word	0x08004d19
 8004d6c:	08004d19 	.word	0x08004d19
 8004d70:	08004ecb 	.word	0x08004ecb
 8004d74:	08004d19 	.word	0x08004d19
 8004d78:	08004dcd 	.word	0x08004dcd
 8004d7c:	08004d19 	.word	0x08004d19
 8004d80:	08004d19 	.word	0x08004d19
 8004d84:	08004e93 	.word	0x08004e93
 8004d88:	682b      	ldr	r3, [r5, #0]
 8004d8a:	1d1a      	adds	r2, r3, #4
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	602a      	str	r2, [r5, #0]
 8004d90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004d98:	2301      	movs	r3, #1
 8004d9a:	e0a3      	b.n	8004ee4 <_printf_i+0x1f4>
 8004d9c:	6820      	ldr	r0, [r4, #0]
 8004d9e:	6829      	ldr	r1, [r5, #0]
 8004da0:	0606      	lsls	r6, r0, #24
 8004da2:	f101 0304 	add.w	r3, r1, #4
 8004da6:	d50a      	bpl.n	8004dbe <_printf_i+0xce>
 8004da8:	680e      	ldr	r6, [r1, #0]
 8004daa:	602b      	str	r3, [r5, #0]
 8004dac:	2e00      	cmp	r6, #0
 8004dae:	da03      	bge.n	8004db8 <_printf_i+0xc8>
 8004db0:	232d      	movs	r3, #45	; 0x2d
 8004db2:	4276      	negs	r6, r6
 8004db4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004db8:	485e      	ldr	r0, [pc, #376]	; (8004f34 <_printf_i+0x244>)
 8004dba:	230a      	movs	r3, #10
 8004dbc:	e019      	b.n	8004df2 <_printf_i+0x102>
 8004dbe:	680e      	ldr	r6, [r1, #0]
 8004dc0:	602b      	str	r3, [r5, #0]
 8004dc2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004dc6:	bf18      	it	ne
 8004dc8:	b236      	sxthne	r6, r6
 8004dca:	e7ef      	b.n	8004dac <_printf_i+0xbc>
 8004dcc:	682b      	ldr	r3, [r5, #0]
 8004dce:	6820      	ldr	r0, [r4, #0]
 8004dd0:	1d19      	adds	r1, r3, #4
 8004dd2:	6029      	str	r1, [r5, #0]
 8004dd4:	0601      	lsls	r1, r0, #24
 8004dd6:	d501      	bpl.n	8004ddc <_printf_i+0xec>
 8004dd8:	681e      	ldr	r6, [r3, #0]
 8004dda:	e002      	b.n	8004de2 <_printf_i+0xf2>
 8004ddc:	0646      	lsls	r6, r0, #25
 8004dde:	d5fb      	bpl.n	8004dd8 <_printf_i+0xe8>
 8004de0:	881e      	ldrh	r6, [r3, #0]
 8004de2:	4854      	ldr	r0, [pc, #336]	; (8004f34 <_printf_i+0x244>)
 8004de4:	2f6f      	cmp	r7, #111	; 0x6f
 8004de6:	bf0c      	ite	eq
 8004de8:	2308      	moveq	r3, #8
 8004dea:	230a      	movne	r3, #10
 8004dec:	2100      	movs	r1, #0
 8004dee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004df2:	6865      	ldr	r5, [r4, #4]
 8004df4:	60a5      	str	r5, [r4, #8]
 8004df6:	2d00      	cmp	r5, #0
 8004df8:	bfa2      	ittt	ge
 8004dfa:	6821      	ldrge	r1, [r4, #0]
 8004dfc:	f021 0104 	bicge.w	r1, r1, #4
 8004e00:	6021      	strge	r1, [r4, #0]
 8004e02:	b90e      	cbnz	r6, 8004e08 <_printf_i+0x118>
 8004e04:	2d00      	cmp	r5, #0
 8004e06:	d04d      	beq.n	8004ea4 <_printf_i+0x1b4>
 8004e08:	4615      	mov	r5, r2
 8004e0a:	fbb6 f1f3 	udiv	r1, r6, r3
 8004e0e:	fb03 6711 	mls	r7, r3, r1, r6
 8004e12:	5dc7      	ldrb	r7, [r0, r7]
 8004e14:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004e18:	4637      	mov	r7, r6
 8004e1a:	42bb      	cmp	r3, r7
 8004e1c:	460e      	mov	r6, r1
 8004e1e:	d9f4      	bls.n	8004e0a <_printf_i+0x11a>
 8004e20:	2b08      	cmp	r3, #8
 8004e22:	d10b      	bne.n	8004e3c <_printf_i+0x14c>
 8004e24:	6823      	ldr	r3, [r4, #0]
 8004e26:	07de      	lsls	r6, r3, #31
 8004e28:	d508      	bpl.n	8004e3c <_printf_i+0x14c>
 8004e2a:	6923      	ldr	r3, [r4, #16]
 8004e2c:	6861      	ldr	r1, [r4, #4]
 8004e2e:	4299      	cmp	r1, r3
 8004e30:	bfde      	ittt	le
 8004e32:	2330      	movle	r3, #48	; 0x30
 8004e34:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004e38:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004e3c:	1b52      	subs	r2, r2, r5
 8004e3e:	6122      	str	r2, [r4, #16]
 8004e40:	f8cd a000 	str.w	sl, [sp]
 8004e44:	464b      	mov	r3, r9
 8004e46:	aa03      	add	r2, sp, #12
 8004e48:	4621      	mov	r1, r4
 8004e4a:	4640      	mov	r0, r8
 8004e4c:	f7ff fee2 	bl	8004c14 <_printf_common>
 8004e50:	3001      	adds	r0, #1
 8004e52:	d14c      	bne.n	8004eee <_printf_i+0x1fe>
 8004e54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004e58:	b004      	add	sp, #16
 8004e5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e5e:	4835      	ldr	r0, [pc, #212]	; (8004f34 <_printf_i+0x244>)
 8004e60:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004e64:	6829      	ldr	r1, [r5, #0]
 8004e66:	6823      	ldr	r3, [r4, #0]
 8004e68:	f851 6b04 	ldr.w	r6, [r1], #4
 8004e6c:	6029      	str	r1, [r5, #0]
 8004e6e:	061d      	lsls	r5, r3, #24
 8004e70:	d514      	bpl.n	8004e9c <_printf_i+0x1ac>
 8004e72:	07df      	lsls	r7, r3, #31
 8004e74:	bf44      	itt	mi
 8004e76:	f043 0320 	orrmi.w	r3, r3, #32
 8004e7a:	6023      	strmi	r3, [r4, #0]
 8004e7c:	b91e      	cbnz	r6, 8004e86 <_printf_i+0x196>
 8004e7e:	6823      	ldr	r3, [r4, #0]
 8004e80:	f023 0320 	bic.w	r3, r3, #32
 8004e84:	6023      	str	r3, [r4, #0]
 8004e86:	2310      	movs	r3, #16
 8004e88:	e7b0      	b.n	8004dec <_printf_i+0xfc>
 8004e8a:	6823      	ldr	r3, [r4, #0]
 8004e8c:	f043 0320 	orr.w	r3, r3, #32
 8004e90:	6023      	str	r3, [r4, #0]
 8004e92:	2378      	movs	r3, #120	; 0x78
 8004e94:	4828      	ldr	r0, [pc, #160]	; (8004f38 <_printf_i+0x248>)
 8004e96:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004e9a:	e7e3      	b.n	8004e64 <_printf_i+0x174>
 8004e9c:	0659      	lsls	r1, r3, #25
 8004e9e:	bf48      	it	mi
 8004ea0:	b2b6      	uxthmi	r6, r6
 8004ea2:	e7e6      	b.n	8004e72 <_printf_i+0x182>
 8004ea4:	4615      	mov	r5, r2
 8004ea6:	e7bb      	b.n	8004e20 <_printf_i+0x130>
 8004ea8:	682b      	ldr	r3, [r5, #0]
 8004eaa:	6826      	ldr	r6, [r4, #0]
 8004eac:	6961      	ldr	r1, [r4, #20]
 8004eae:	1d18      	adds	r0, r3, #4
 8004eb0:	6028      	str	r0, [r5, #0]
 8004eb2:	0635      	lsls	r5, r6, #24
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	d501      	bpl.n	8004ebc <_printf_i+0x1cc>
 8004eb8:	6019      	str	r1, [r3, #0]
 8004eba:	e002      	b.n	8004ec2 <_printf_i+0x1d2>
 8004ebc:	0670      	lsls	r0, r6, #25
 8004ebe:	d5fb      	bpl.n	8004eb8 <_printf_i+0x1c8>
 8004ec0:	8019      	strh	r1, [r3, #0]
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	6123      	str	r3, [r4, #16]
 8004ec6:	4615      	mov	r5, r2
 8004ec8:	e7ba      	b.n	8004e40 <_printf_i+0x150>
 8004eca:	682b      	ldr	r3, [r5, #0]
 8004ecc:	1d1a      	adds	r2, r3, #4
 8004ece:	602a      	str	r2, [r5, #0]
 8004ed0:	681d      	ldr	r5, [r3, #0]
 8004ed2:	6862      	ldr	r2, [r4, #4]
 8004ed4:	2100      	movs	r1, #0
 8004ed6:	4628      	mov	r0, r5
 8004ed8:	f7fb f9a2 	bl	8000220 <memchr>
 8004edc:	b108      	cbz	r0, 8004ee2 <_printf_i+0x1f2>
 8004ede:	1b40      	subs	r0, r0, r5
 8004ee0:	6060      	str	r0, [r4, #4]
 8004ee2:	6863      	ldr	r3, [r4, #4]
 8004ee4:	6123      	str	r3, [r4, #16]
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004eec:	e7a8      	b.n	8004e40 <_printf_i+0x150>
 8004eee:	6923      	ldr	r3, [r4, #16]
 8004ef0:	462a      	mov	r2, r5
 8004ef2:	4649      	mov	r1, r9
 8004ef4:	4640      	mov	r0, r8
 8004ef6:	47d0      	blx	sl
 8004ef8:	3001      	adds	r0, #1
 8004efa:	d0ab      	beq.n	8004e54 <_printf_i+0x164>
 8004efc:	6823      	ldr	r3, [r4, #0]
 8004efe:	079b      	lsls	r3, r3, #30
 8004f00:	d413      	bmi.n	8004f2a <_printf_i+0x23a>
 8004f02:	68e0      	ldr	r0, [r4, #12]
 8004f04:	9b03      	ldr	r3, [sp, #12]
 8004f06:	4298      	cmp	r0, r3
 8004f08:	bfb8      	it	lt
 8004f0a:	4618      	movlt	r0, r3
 8004f0c:	e7a4      	b.n	8004e58 <_printf_i+0x168>
 8004f0e:	2301      	movs	r3, #1
 8004f10:	4632      	mov	r2, r6
 8004f12:	4649      	mov	r1, r9
 8004f14:	4640      	mov	r0, r8
 8004f16:	47d0      	blx	sl
 8004f18:	3001      	adds	r0, #1
 8004f1a:	d09b      	beq.n	8004e54 <_printf_i+0x164>
 8004f1c:	3501      	adds	r5, #1
 8004f1e:	68e3      	ldr	r3, [r4, #12]
 8004f20:	9903      	ldr	r1, [sp, #12]
 8004f22:	1a5b      	subs	r3, r3, r1
 8004f24:	42ab      	cmp	r3, r5
 8004f26:	dcf2      	bgt.n	8004f0e <_printf_i+0x21e>
 8004f28:	e7eb      	b.n	8004f02 <_printf_i+0x212>
 8004f2a:	2500      	movs	r5, #0
 8004f2c:	f104 0619 	add.w	r6, r4, #25
 8004f30:	e7f5      	b.n	8004f1e <_printf_i+0x22e>
 8004f32:	bf00      	nop
 8004f34:	08007432 	.word	0x08007432
 8004f38:	08007443 	.word	0x08007443

08004f3c <iprintf>:
 8004f3c:	b40f      	push	{r0, r1, r2, r3}
 8004f3e:	4b0a      	ldr	r3, [pc, #40]	; (8004f68 <iprintf+0x2c>)
 8004f40:	b513      	push	{r0, r1, r4, lr}
 8004f42:	681c      	ldr	r4, [r3, #0]
 8004f44:	b124      	cbz	r4, 8004f50 <iprintf+0x14>
 8004f46:	69a3      	ldr	r3, [r4, #24]
 8004f48:	b913      	cbnz	r3, 8004f50 <iprintf+0x14>
 8004f4a:	4620      	mov	r0, r4
 8004f4c:	f001 f9a0 	bl	8006290 <__sinit>
 8004f50:	ab05      	add	r3, sp, #20
 8004f52:	9a04      	ldr	r2, [sp, #16]
 8004f54:	68a1      	ldr	r1, [r4, #8]
 8004f56:	9301      	str	r3, [sp, #4]
 8004f58:	4620      	mov	r0, r4
 8004f5a:	f001 ff5d 	bl	8006e18 <_vfiprintf_r>
 8004f5e:	b002      	add	sp, #8
 8004f60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f64:	b004      	add	sp, #16
 8004f66:	4770      	bx	lr
 8004f68:	2000000c 	.word	0x2000000c

08004f6c <_puts_r>:
 8004f6c:	b570      	push	{r4, r5, r6, lr}
 8004f6e:	460e      	mov	r6, r1
 8004f70:	4605      	mov	r5, r0
 8004f72:	b118      	cbz	r0, 8004f7c <_puts_r+0x10>
 8004f74:	6983      	ldr	r3, [r0, #24]
 8004f76:	b90b      	cbnz	r3, 8004f7c <_puts_r+0x10>
 8004f78:	f001 f98a 	bl	8006290 <__sinit>
 8004f7c:	69ab      	ldr	r3, [r5, #24]
 8004f7e:	68ac      	ldr	r4, [r5, #8]
 8004f80:	b913      	cbnz	r3, 8004f88 <_puts_r+0x1c>
 8004f82:	4628      	mov	r0, r5
 8004f84:	f001 f984 	bl	8006290 <__sinit>
 8004f88:	4b2c      	ldr	r3, [pc, #176]	; (800503c <_puts_r+0xd0>)
 8004f8a:	429c      	cmp	r4, r3
 8004f8c:	d120      	bne.n	8004fd0 <_puts_r+0x64>
 8004f8e:	686c      	ldr	r4, [r5, #4]
 8004f90:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004f92:	07db      	lsls	r3, r3, #31
 8004f94:	d405      	bmi.n	8004fa2 <_puts_r+0x36>
 8004f96:	89a3      	ldrh	r3, [r4, #12]
 8004f98:	0598      	lsls	r0, r3, #22
 8004f9a:	d402      	bmi.n	8004fa2 <_puts_r+0x36>
 8004f9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004f9e:	f001 fa1a 	bl	80063d6 <__retarget_lock_acquire_recursive>
 8004fa2:	89a3      	ldrh	r3, [r4, #12]
 8004fa4:	0719      	lsls	r1, r3, #28
 8004fa6:	d51d      	bpl.n	8004fe4 <_puts_r+0x78>
 8004fa8:	6923      	ldr	r3, [r4, #16]
 8004faa:	b1db      	cbz	r3, 8004fe4 <_puts_r+0x78>
 8004fac:	3e01      	subs	r6, #1
 8004fae:	68a3      	ldr	r3, [r4, #8]
 8004fb0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004fb4:	3b01      	subs	r3, #1
 8004fb6:	60a3      	str	r3, [r4, #8]
 8004fb8:	bb39      	cbnz	r1, 800500a <_puts_r+0x9e>
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	da38      	bge.n	8005030 <_puts_r+0xc4>
 8004fbe:	4622      	mov	r2, r4
 8004fc0:	210a      	movs	r1, #10
 8004fc2:	4628      	mov	r0, r5
 8004fc4:	f000 f90e 	bl	80051e4 <__swbuf_r>
 8004fc8:	3001      	adds	r0, #1
 8004fca:	d011      	beq.n	8004ff0 <_puts_r+0x84>
 8004fcc:	250a      	movs	r5, #10
 8004fce:	e011      	b.n	8004ff4 <_puts_r+0x88>
 8004fd0:	4b1b      	ldr	r3, [pc, #108]	; (8005040 <_puts_r+0xd4>)
 8004fd2:	429c      	cmp	r4, r3
 8004fd4:	d101      	bne.n	8004fda <_puts_r+0x6e>
 8004fd6:	68ac      	ldr	r4, [r5, #8]
 8004fd8:	e7da      	b.n	8004f90 <_puts_r+0x24>
 8004fda:	4b1a      	ldr	r3, [pc, #104]	; (8005044 <_puts_r+0xd8>)
 8004fdc:	429c      	cmp	r4, r3
 8004fde:	bf08      	it	eq
 8004fe0:	68ec      	ldreq	r4, [r5, #12]
 8004fe2:	e7d5      	b.n	8004f90 <_puts_r+0x24>
 8004fe4:	4621      	mov	r1, r4
 8004fe6:	4628      	mov	r0, r5
 8004fe8:	f000 f94e 	bl	8005288 <__swsetup_r>
 8004fec:	2800      	cmp	r0, #0
 8004fee:	d0dd      	beq.n	8004fac <_puts_r+0x40>
 8004ff0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8004ff4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004ff6:	07da      	lsls	r2, r3, #31
 8004ff8:	d405      	bmi.n	8005006 <_puts_r+0x9a>
 8004ffa:	89a3      	ldrh	r3, [r4, #12]
 8004ffc:	059b      	lsls	r3, r3, #22
 8004ffe:	d402      	bmi.n	8005006 <_puts_r+0x9a>
 8005000:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005002:	f001 f9e9 	bl	80063d8 <__retarget_lock_release_recursive>
 8005006:	4628      	mov	r0, r5
 8005008:	bd70      	pop	{r4, r5, r6, pc}
 800500a:	2b00      	cmp	r3, #0
 800500c:	da04      	bge.n	8005018 <_puts_r+0xac>
 800500e:	69a2      	ldr	r2, [r4, #24]
 8005010:	429a      	cmp	r2, r3
 8005012:	dc06      	bgt.n	8005022 <_puts_r+0xb6>
 8005014:	290a      	cmp	r1, #10
 8005016:	d004      	beq.n	8005022 <_puts_r+0xb6>
 8005018:	6823      	ldr	r3, [r4, #0]
 800501a:	1c5a      	adds	r2, r3, #1
 800501c:	6022      	str	r2, [r4, #0]
 800501e:	7019      	strb	r1, [r3, #0]
 8005020:	e7c5      	b.n	8004fae <_puts_r+0x42>
 8005022:	4622      	mov	r2, r4
 8005024:	4628      	mov	r0, r5
 8005026:	f000 f8dd 	bl	80051e4 <__swbuf_r>
 800502a:	3001      	adds	r0, #1
 800502c:	d1bf      	bne.n	8004fae <_puts_r+0x42>
 800502e:	e7df      	b.n	8004ff0 <_puts_r+0x84>
 8005030:	6823      	ldr	r3, [r4, #0]
 8005032:	250a      	movs	r5, #10
 8005034:	1c5a      	adds	r2, r3, #1
 8005036:	6022      	str	r2, [r4, #0]
 8005038:	701d      	strb	r5, [r3, #0]
 800503a:	e7db      	b.n	8004ff4 <_puts_r+0x88>
 800503c:	08007504 	.word	0x08007504
 8005040:	08007524 	.word	0x08007524
 8005044:	080074e4 	.word	0x080074e4

08005048 <puts>:
 8005048:	4b02      	ldr	r3, [pc, #8]	; (8005054 <puts+0xc>)
 800504a:	4601      	mov	r1, r0
 800504c:	6818      	ldr	r0, [r3, #0]
 800504e:	f7ff bf8d 	b.w	8004f6c <_puts_r>
 8005052:	bf00      	nop
 8005054:	2000000c 	.word	0x2000000c

08005058 <setvbuf>:
 8005058:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800505c:	461d      	mov	r5, r3
 800505e:	4b5d      	ldr	r3, [pc, #372]	; (80051d4 <setvbuf+0x17c>)
 8005060:	681f      	ldr	r7, [r3, #0]
 8005062:	4604      	mov	r4, r0
 8005064:	460e      	mov	r6, r1
 8005066:	4690      	mov	r8, r2
 8005068:	b127      	cbz	r7, 8005074 <setvbuf+0x1c>
 800506a:	69bb      	ldr	r3, [r7, #24]
 800506c:	b913      	cbnz	r3, 8005074 <setvbuf+0x1c>
 800506e:	4638      	mov	r0, r7
 8005070:	f001 f90e 	bl	8006290 <__sinit>
 8005074:	4b58      	ldr	r3, [pc, #352]	; (80051d8 <setvbuf+0x180>)
 8005076:	429c      	cmp	r4, r3
 8005078:	d167      	bne.n	800514a <setvbuf+0xf2>
 800507a:	687c      	ldr	r4, [r7, #4]
 800507c:	f1b8 0f02 	cmp.w	r8, #2
 8005080:	d006      	beq.n	8005090 <setvbuf+0x38>
 8005082:	f1b8 0f01 	cmp.w	r8, #1
 8005086:	f200 809f 	bhi.w	80051c8 <setvbuf+0x170>
 800508a:	2d00      	cmp	r5, #0
 800508c:	f2c0 809c 	blt.w	80051c8 <setvbuf+0x170>
 8005090:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005092:	07db      	lsls	r3, r3, #31
 8005094:	d405      	bmi.n	80050a2 <setvbuf+0x4a>
 8005096:	89a3      	ldrh	r3, [r4, #12]
 8005098:	0598      	lsls	r0, r3, #22
 800509a:	d402      	bmi.n	80050a2 <setvbuf+0x4a>
 800509c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800509e:	f001 f99a 	bl	80063d6 <__retarget_lock_acquire_recursive>
 80050a2:	4621      	mov	r1, r4
 80050a4:	4638      	mov	r0, r7
 80050a6:	f001 f85f 	bl	8006168 <_fflush_r>
 80050aa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80050ac:	b141      	cbz	r1, 80050c0 <setvbuf+0x68>
 80050ae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80050b2:	4299      	cmp	r1, r3
 80050b4:	d002      	beq.n	80050bc <setvbuf+0x64>
 80050b6:	4638      	mov	r0, r7
 80050b8:	f001 fda4 	bl	8006c04 <_free_r>
 80050bc:	2300      	movs	r3, #0
 80050be:	6363      	str	r3, [r4, #52]	; 0x34
 80050c0:	2300      	movs	r3, #0
 80050c2:	61a3      	str	r3, [r4, #24]
 80050c4:	6063      	str	r3, [r4, #4]
 80050c6:	89a3      	ldrh	r3, [r4, #12]
 80050c8:	0619      	lsls	r1, r3, #24
 80050ca:	d503      	bpl.n	80050d4 <setvbuf+0x7c>
 80050cc:	6921      	ldr	r1, [r4, #16]
 80050ce:	4638      	mov	r0, r7
 80050d0:	f001 fd98 	bl	8006c04 <_free_r>
 80050d4:	89a3      	ldrh	r3, [r4, #12]
 80050d6:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80050da:	f023 0303 	bic.w	r3, r3, #3
 80050de:	f1b8 0f02 	cmp.w	r8, #2
 80050e2:	81a3      	strh	r3, [r4, #12]
 80050e4:	d06c      	beq.n	80051c0 <setvbuf+0x168>
 80050e6:	ab01      	add	r3, sp, #4
 80050e8:	466a      	mov	r2, sp
 80050ea:	4621      	mov	r1, r4
 80050ec:	4638      	mov	r0, r7
 80050ee:	f001 f974 	bl	80063da <__swhatbuf_r>
 80050f2:	89a3      	ldrh	r3, [r4, #12]
 80050f4:	4318      	orrs	r0, r3
 80050f6:	81a0      	strh	r0, [r4, #12]
 80050f8:	2d00      	cmp	r5, #0
 80050fa:	d130      	bne.n	800515e <setvbuf+0x106>
 80050fc:	9d00      	ldr	r5, [sp, #0]
 80050fe:	4628      	mov	r0, r5
 8005100:	f001 f9d0 	bl	80064a4 <malloc>
 8005104:	4606      	mov	r6, r0
 8005106:	2800      	cmp	r0, #0
 8005108:	d155      	bne.n	80051b6 <setvbuf+0x15e>
 800510a:	f8dd 9000 	ldr.w	r9, [sp]
 800510e:	45a9      	cmp	r9, r5
 8005110:	d14a      	bne.n	80051a8 <setvbuf+0x150>
 8005112:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8005116:	2200      	movs	r2, #0
 8005118:	60a2      	str	r2, [r4, #8]
 800511a:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800511e:	6022      	str	r2, [r4, #0]
 8005120:	6122      	str	r2, [r4, #16]
 8005122:	2201      	movs	r2, #1
 8005124:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005128:	6162      	str	r2, [r4, #20]
 800512a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800512c:	f043 0302 	orr.w	r3, r3, #2
 8005130:	07d2      	lsls	r2, r2, #31
 8005132:	81a3      	strh	r3, [r4, #12]
 8005134:	d405      	bmi.n	8005142 <setvbuf+0xea>
 8005136:	f413 7f00 	tst.w	r3, #512	; 0x200
 800513a:	d102      	bne.n	8005142 <setvbuf+0xea>
 800513c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800513e:	f001 f94b 	bl	80063d8 <__retarget_lock_release_recursive>
 8005142:	4628      	mov	r0, r5
 8005144:	b003      	add	sp, #12
 8005146:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800514a:	4b24      	ldr	r3, [pc, #144]	; (80051dc <setvbuf+0x184>)
 800514c:	429c      	cmp	r4, r3
 800514e:	d101      	bne.n	8005154 <setvbuf+0xfc>
 8005150:	68bc      	ldr	r4, [r7, #8]
 8005152:	e793      	b.n	800507c <setvbuf+0x24>
 8005154:	4b22      	ldr	r3, [pc, #136]	; (80051e0 <setvbuf+0x188>)
 8005156:	429c      	cmp	r4, r3
 8005158:	bf08      	it	eq
 800515a:	68fc      	ldreq	r4, [r7, #12]
 800515c:	e78e      	b.n	800507c <setvbuf+0x24>
 800515e:	2e00      	cmp	r6, #0
 8005160:	d0cd      	beq.n	80050fe <setvbuf+0xa6>
 8005162:	69bb      	ldr	r3, [r7, #24]
 8005164:	b913      	cbnz	r3, 800516c <setvbuf+0x114>
 8005166:	4638      	mov	r0, r7
 8005168:	f001 f892 	bl	8006290 <__sinit>
 800516c:	f1b8 0f01 	cmp.w	r8, #1
 8005170:	bf08      	it	eq
 8005172:	89a3      	ldrheq	r3, [r4, #12]
 8005174:	6026      	str	r6, [r4, #0]
 8005176:	bf04      	itt	eq
 8005178:	f043 0301 	orreq.w	r3, r3, #1
 800517c:	81a3      	strheq	r3, [r4, #12]
 800517e:	89a2      	ldrh	r2, [r4, #12]
 8005180:	f012 0308 	ands.w	r3, r2, #8
 8005184:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8005188:	d01c      	beq.n	80051c4 <setvbuf+0x16c>
 800518a:	07d3      	lsls	r3, r2, #31
 800518c:	bf41      	itttt	mi
 800518e:	2300      	movmi	r3, #0
 8005190:	426d      	negmi	r5, r5
 8005192:	60a3      	strmi	r3, [r4, #8]
 8005194:	61a5      	strmi	r5, [r4, #24]
 8005196:	bf58      	it	pl
 8005198:	60a5      	strpl	r5, [r4, #8]
 800519a:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800519c:	f015 0501 	ands.w	r5, r5, #1
 80051a0:	d115      	bne.n	80051ce <setvbuf+0x176>
 80051a2:	f412 7f00 	tst.w	r2, #512	; 0x200
 80051a6:	e7c8      	b.n	800513a <setvbuf+0xe2>
 80051a8:	4648      	mov	r0, r9
 80051aa:	f001 f97b 	bl	80064a4 <malloc>
 80051ae:	4606      	mov	r6, r0
 80051b0:	2800      	cmp	r0, #0
 80051b2:	d0ae      	beq.n	8005112 <setvbuf+0xba>
 80051b4:	464d      	mov	r5, r9
 80051b6:	89a3      	ldrh	r3, [r4, #12]
 80051b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051bc:	81a3      	strh	r3, [r4, #12]
 80051be:	e7d0      	b.n	8005162 <setvbuf+0x10a>
 80051c0:	2500      	movs	r5, #0
 80051c2:	e7a8      	b.n	8005116 <setvbuf+0xbe>
 80051c4:	60a3      	str	r3, [r4, #8]
 80051c6:	e7e8      	b.n	800519a <setvbuf+0x142>
 80051c8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80051cc:	e7b9      	b.n	8005142 <setvbuf+0xea>
 80051ce:	2500      	movs	r5, #0
 80051d0:	e7b7      	b.n	8005142 <setvbuf+0xea>
 80051d2:	bf00      	nop
 80051d4:	2000000c 	.word	0x2000000c
 80051d8:	08007504 	.word	0x08007504
 80051dc:	08007524 	.word	0x08007524
 80051e0:	080074e4 	.word	0x080074e4

080051e4 <__swbuf_r>:
 80051e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051e6:	460e      	mov	r6, r1
 80051e8:	4614      	mov	r4, r2
 80051ea:	4605      	mov	r5, r0
 80051ec:	b118      	cbz	r0, 80051f6 <__swbuf_r+0x12>
 80051ee:	6983      	ldr	r3, [r0, #24]
 80051f0:	b90b      	cbnz	r3, 80051f6 <__swbuf_r+0x12>
 80051f2:	f001 f84d 	bl	8006290 <__sinit>
 80051f6:	4b21      	ldr	r3, [pc, #132]	; (800527c <__swbuf_r+0x98>)
 80051f8:	429c      	cmp	r4, r3
 80051fa:	d12b      	bne.n	8005254 <__swbuf_r+0x70>
 80051fc:	686c      	ldr	r4, [r5, #4]
 80051fe:	69a3      	ldr	r3, [r4, #24]
 8005200:	60a3      	str	r3, [r4, #8]
 8005202:	89a3      	ldrh	r3, [r4, #12]
 8005204:	071a      	lsls	r2, r3, #28
 8005206:	d52f      	bpl.n	8005268 <__swbuf_r+0x84>
 8005208:	6923      	ldr	r3, [r4, #16]
 800520a:	b36b      	cbz	r3, 8005268 <__swbuf_r+0x84>
 800520c:	6923      	ldr	r3, [r4, #16]
 800520e:	6820      	ldr	r0, [r4, #0]
 8005210:	1ac0      	subs	r0, r0, r3
 8005212:	6963      	ldr	r3, [r4, #20]
 8005214:	b2f6      	uxtb	r6, r6
 8005216:	4283      	cmp	r3, r0
 8005218:	4637      	mov	r7, r6
 800521a:	dc04      	bgt.n	8005226 <__swbuf_r+0x42>
 800521c:	4621      	mov	r1, r4
 800521e:	4628      	mov	r0, r5
 8005220:	f000 ffa2 	bl	8006168 <_fflush_r>
 8005224:	bb30      	cbnz	r0, 8005274 <__swbuf_r+0x90>
 8005226:	68a3      	ldr	r3, [r4, #8]
 8005228:	3b01      	subs	r3, #1
 800522a:	60a3      	str	r3, [r4, #8]
 800522c:	6823      	ldr	r3, [r4, #0]
 800522e:	1c5a      	adds	r2, r3, #1
 8005230:	6022      	str	r2, [r4, #0]
 8005232:	701e      	strb	r6, [r3, #0]
 8005234:	6963      	ldr	r3, [r4, #20]
 8005236:	3001      	adds	r0, #1
 8005238:	4283      	cmp	r3, r0
 800523a:	d004      	beq.n	8005246 <__swbuf_r+0x62>
 800523c:	89a3      	ldrh	r3, [r4, #12]
 800523e:	07db      	lsls	r3, r3, #31
 8005240:	d506      	bpl.n	8005250 <__swbuf_r+0x6c>
 8005242:	2e0a      	cmp	r6, #10
 8005244:	d104      	bne.n	8005250 <__swbuf_r+0x6c>
 8005246:	4621      	mov	r1, r4
 8005248:	4628      	mov	r0, r5
 800524a:	f000 ff8d 	bl	8006168 <_fflush_r>
 800524e:	b988      	cbnz	r0, 8005274 <__swbuf_r+0x90>
 8005250:	4638      	mov	r0, r7
 8005252:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005254:	4b0a      	ldr	r3, [pc, #40]	; (8005280 <__swbuf_r+0x9c>)
 8005256:	429c      	cmp	r4, r3
 8005258:	d101      	bne.n	800525e <__swbuf_r+0x7a>
 800525a:	68ac      	ldr	r4, [r5, #8]
 800525c:	e7cf      	b.n	80051fe <__swbuf_r+0x1a>
 800525e:	4b09      	ldr	r3, [pc, #36]	; (8005284 <__swbuf_r+0xa0>)
 8005260:	429c      	cmp	r4, r3
 8005262:	bf08      	it	eq
 8005264:	68ec      	ldreq	r4, [r5, #12]
 8005266:	e7ca      	b.n	80051fe <__swbuf_r+0x1a>
 8005268:	4621      	mov	r1, r4
 800526a:	4628      	mov	r0, r5
 800526c:	f000 f80c 	bl	8005288 <__swsetup_r>
 8005270:	2800      	cmp	r0, #0
 8005272:	d0cb      	beq.n	800520c <__swbuf_r+0x28>
 8005274:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005278:	e7ea      	b.n	8005250 <__swbuf_r+0x6c>
 800527a:	bf00      	nop
 800527c:	08007504 	.word	0x08007504
 8005280:	08007524 	.word	0x08007524
 8005284:	080074e4 	.word	0x080074e4

08005288 <__swsetup_r>:
 8005288:	4b32      	ldr	r3, [pc, #200]	; (8005354 <__swsetup_r+0xcc>)
 800528a:	b570      	push	{r4, r5, r6, lr}
 800528c:	681d      	ldr	r5, [r3, #0]
 800528e:	4606      	mov	r6, r0
 8005290:	460c      	mov	r4, r1
 8005292:	b125      	cbz	r5, 800529e <__swsetup_r+0x16>
 8005294:	69ab      	ldr	r3, [r5, #24]
 8005296:	b913      	cbnz	r3, 800529e <__swsetup_r+0x16>
 8005298:	4628      	mov	r0, r5
 800529a:	f000 fff9 	bl	8006290 <__sinit>
 800529e:	4b2e      	ldr	r3, [pc, #184]	; (8005358 <__swsetup_r+0xd0>)
 80052a0:	429c      	cmp	r4, r3
 80052a2:	d10f      	bne.n	80052c4 <__swsetup_r+0x3c>
 80052a4:	686c      	ldr	r4, [r5, #4]
 80052a6:	89a3      	ldrh	r3, [r4, #12]
 80052a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80052ac:	0719      	lsls	r1, r3, #28
 80052ae:	d42c      	bmi.n	800530a <__swsetup_r+0x82>
 80052b0:	06dd      	lsls	r5, r3, #27
 80052b2:	d411      	bmi.n	80052d8 <__swsetup_r+0x50>
 80052b4:	2309      	movs	r3, #9
 80052b6:	6033      	str	r3, [r6, #0]
 80052b8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80052bc:	81a3      	strh	r3, [r4, #12]
 80052be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80052c2:	e03e      	b.n	8005342 <__swsetup_r+0xba>
 80052c4:	4b25      	ldr	r3, [pc, #148]	; (800535c <__swsetup_r+0xd4>)
 80052c6:	429c      	cmp	r4, r3
 80052c8:	d101      	bne.n	80052ce <__swsetup_r+0x46>
 80052ca:	68ac      	ldr	r4, [r5, #8]
 80052cc:	e7eb      	b.n	80052a6 <__swsetup_r+0x1e>
 80052ce:	4b24      	ldr	r3, [pc, #144]	; (8005360 <__swsetup_r+0xd8>)
 80052d0:	429c      	cmp	r4, r3
 80052d2:	bf08      	it	eq
 80052d4:	68ec      	ldreq	r4, [r5, #12]
 80052d6:	e7e6      	b.n	80052a6 <__swsetup_r+0x1e>
 80052d8:	0758      	lsls	r0, r3, #29
 80052da:	d512      	bpl.n	8005302 <__swsetup_r+0x7a>
 80052dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80052de:	b141      	cbz	r1, 80052f2 <__swsetup_r+0x6a>
 80052e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80052e4:	4299      	cmp	r1, r3
 80052e6:	d002      	beq.n	80052ee <__swsetup_r+0x66>
 80052e8:	4630      	mov	r0, r6
 80052ea:	f001 fc8b 	bl	8006c04 <_free_r>
 80052ee:	2300      	movs	r3, #0
 80052f0:	6363      	str	r3, [r4, #52]	; 0x34
 80052f2:	89a3      	ldrh	r3, [r4, #12]
 80052f4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80052f8:	81a3      	strh	r3, [r4, #12]
 80052fa:	2300      	movs	r3, #0
 80052fc:	6063      	str	r3, [r4, #4]
 80052fe:	6923      	ldr	r3, [r4, #16]
 8005300:	6023      	str	r3, [r4, #0]
 8005302:	89a3      	ldrh	r3, [r4, #12]
 8005304:	f043 0308 	orr.w	r3, r3, #8
 8005308:	81a3      	strh	r3, [r4, #12]
 800530a:	6923      	ldr	r3, [r4, #16]
 800530c:	b94b      	cbnz	r3, 8005322 <__swsetup_r+0x9a>
 800530e:	89a3      	ldrh	r3, [r4, #12]
 8005310:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005314:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005318:	d003      	beq.n	8005322 <__swsetup_r+0x9a>
 800531a:	4621      	mov	r1, r4
 800531c:	4630      	mov	r0, r6
 800531e:	f001 f881 	bl	8006424 <__smakebuf_r>
 8005322:	89a0      	ldrh	r0, [r4, #12]
 8005324:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005328:	f010 0301 	ands.w	r3, r0, #1
 800532c:	d00a      	beq.n	8005344 <__swsetup_r+0xbc>
 800532e:	2300      	movs	r3, #0
 8005330:	60a3      	str	r3, [r4, #8]
 8005332:	6963      	ldr	r3, [r4, #20]
 8005334:	425b      	negs	r3, r3
 8005336:	61a3      	str	r3, [r4, #24]
 8005338:	6923      	ldr	r3, [r4, #16]
 800533a:	b943      	cbnz	r3, 800534e <__swsetup_r+0xc6>
 800533c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005340:	d1ba      	bne.n	80052b8 <__swsetup_r+0x30>
 8005342:	bd70      	pop	{r4, r5, r6, pc}
 8005344:	0781      	lsls	r1, r0, #30
 8005346:	bf58      	it	pl
 8005348:	6963      	ldrpl	r3, [r4, #20]
 800534a:	60a3      	str	r3, [r4, #8]
 800534c:	e7f4      	b.n	8005338 <__swsetup_r+0xb0>
 800534e:	2000      	movs	r0, #0
 8005350:	e7f7      	b.n	8005342 <__swsetup_r+0xba>
 8005352:	bf00      	nop
 8005354:	2000000c 	.word	0x2000000c
 8005358:	08007504 	.word	0x08007504
 800535c:	08007524 	.word	0x08007524
 8005360:	080074e4 	.word	0x080074e4

08005364 <quorem>:
 8005364:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005368:	6903      	ldr	r3, [r0, #16]
 800536a:	690c      	ldr	r4, [r1, #16]
 800536c:	42a3      	cmp	r3, r4
 800536e:	4607      	mov	r7, r0
 8005370:	f2c0 8081 	blt.w	8005476 <quorem+0x112>
 8005374:	3c01      	subs	r4, #1
 8005376:	f101 0814 	add.w	r8, r1, #20
 800537a:	f100 0514 	add.w	r5, r0, #20
 800537e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005382:	9301      	str	r3, [sp, #4]
 8005384:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005388:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800538c:	3301      	adds	r3, #1
 800538e:	429a      	cmp	r2, r3
 8005390:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005394:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005398:	fbb2 f6f3 	udiv	r6, r2, r3
 800539c:	d331      	bcc.n	8005402 <quorem+0x9e>
 800539e:	f04f 0e00 	mov.w	lr, #0
 80053a2:	4640      	mov	r0, r8
 80053a4:	46ac      	mov	ip, r5
 80053a6:	46f2      	mov	sl, lr
 80053a8:	f850 2b04 	ldr.w	r2, [r0], #4
 80053ac:	b293      	uxth	r3, r2
 80053ae:	fb06 e303 	mla	r3, r6, r3, lr
 80053b2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80053b6:	b29b      	uxth	r3, r3
 80053b8:	ebaa 0303 	sub.w	r3, sl, r3
 80053bc:	f8dc a000 	ldr.w	sl, [ip]
 80053c0:	0c12      	lsrs	r2, r2, #16
 80053c2:	fa13 f38a 	uxtah	r3, r3, sl
 80053c6:	fb06 e202 	mla	r2, r6, r2, lr
 80053ca:	9300      	str	r3, [sp, #0]
 80053cc:	9b00      	ldr	r3, [sp, #0]
 80053ce:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80053d2:	b292      	uxth	r2, r2
 80053d4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80053d8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80053dc:	f8bd 3000 	ldrh.w	r3, [sp]
 80053e0:	4581      	cmp	r9, r0
 80053e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80053e6:	f84c 3b04 	str.w	r3, [ip], #4
 80053ea:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80053ee:	d2db      	bcs.n	80053a8 <quorem+0x44>
 80053f0:	f855 300b 	ldr.w	r3, [r5, fp]
 80053f4:	b92b      	cbnz	r3, 8005402 <quorem+0x9e>
 80053f6:	9b01      	ldr	r3, [sp, #4]
 80053f8:	3b04      	subs	r3, #4
 80053fa:	429d      	cmp	r5, r3
 80053fc:	461a      	mov	r2, r3
 80053fe:	d32e      	bcc.n	800545e <quorem+0xfa>
 8005400:	613c      	str	r4, [r7, #16]
 8005402:	4638      	mov	r0, r7
 8005404:	f001 fae6 	bl	80069d4 <__mcmp>
 8005408:	2800      	cmp	r0, #0
 800540a:	db24      	blt.n	8005456 <quorem+0xf2>
 800540c:	3601      	adds	r6, #1
 800540e:	4628      	mov	r0, r5
 8005410:	f04f 0c00 	mov.w	ip, #0
 8005414:	f858 2b04 	ldr.w	r2, [r8], #4
 8005418:	f8d0 e000 	ldr.w	lr, [r0]
 800541c:	b293      	uxth	r3, r2
 800541e:	ebac 0303 	sub.w	r3, ip, r3
 8005422:	0c12      	lsrs	r2, r2, #16
 8005424:	fa13 f38e 	uxtah	r3, r3, lr
 8005428:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800542c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005430:	b29b      	uxth	r3, r3
 8005432:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005436:	45c1      	cmp	r9, r8
 8005438:	f840 3b04 	str.w	r3, [r0], #4
 800543c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005440:	d2e8      	bcs.n	8005414 <quorem+0xb0>
 8005442:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005446:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800544a:	b922      	cbnz	r2, 8005456 <quorem+0xf2>
 800544c:	3b04      	subs	r3, #4
 800544e:	429d      	cmp	r5, r3
 8005450:	461a      	mov	r2, r3
 8005452:	d30a      	bcc.n	800546a <quorem+0x106>
 8005454:	613c      	str	r4, [r7, #16]
 8005456:	4630      	mov	r0, r6
 8005458:	b003      	add	sp, #12
 800545a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800545e:	6812      	ldr	r2, [r2, #0]
 8005460:	3b04      	subs	r3, #4
 8005462:	2a00      	cmp	r2, #0
 8005464:	d1cc      	bne.n	8005400 <quorem+0x9c>
 8005466:	3c01      	subs	r4, #1
 8005468:	e7c7      	b.n	80053fa <quorem+0x96>
 800546a:	6812      	ldr	r2, [r2, #0]
 800546c:	3b04      	subs	r3, #4
 800546e:	2a00      	cmp	r2, #0
 8005470:	d1f0      	bne.n	8005454 <quorem+0xf0>
 8005472:	3c01      	subs	r4, #1
 8005474:	e7eb      	b.n	800544e <quorem+0xea>
 8005476:	2000      	movs	r0, #0
 8005478:	e7ee      	b.n	8005458 <quorem+0xf4>
 800547a:	0000      	movs	r0, r0
 800547c:	0000      	movs	r0, r0
	...

08005480 <_dtoa_r>:
 8005480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005484:	ed2d 8b04 	vpush	{d8-d9}
 8005488:	ec57 6b10 	vmov	r6, r7, d0
 800548c:	b093      	sub	sp, #76	; 0x4c
 800548e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005490:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005494:	9106      	str	r1, [sp, #24]
 8005496:	ee10 aa10 	vmov	sl, s0
 800549a:	4604      	mov	r4, r0
 800549c:	9209      	str	r2, [sp, #36]	; 0x24
 800549e:	930c      	str	r3, [sp, #48]	; 0x30
 80054a0:	46bb      	mov	fp, r7
 80054a2:	b975      	cbnz	r5, 80054c2 <_dtoa_r+0x42>
 80054a4:	2010      	movs	r0, #16
 80054a6:	f000 fffd 	bl	80064a4 <malloc>
 80054aa:	4602      	mov	r2, r0
 80054ac:	6260      	str	r0, [r4, #36]	; 0x24
 80054ae:	b920      	cbnz	r0, 80054ba <_dtoa_r+0x3a>
 80054b0:	4ba7      	ldr	r3, [pc, #668]	; (8005750 <_dtoa_r+0x2d0>)
 80054b2:	21ea      	movs	r1, #234	; 0xea
 80054b4:	48a7      	ldr	r0, [pc, #668]	; (8005754 <_dtoa_r+0x2d4>)
 80054b6:	f001 fe45 	bl	8007144 <__assert_func>
 80054ba:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80054be:	6005      	str	r5, [r0, #0]
 80054c0:	60c5      	str	r5, [r0, #12]
 80054c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80054c4:	6819      	ldr	r1, [r3, #0]
 80054c6:	b151      	cbz	r1, 80054de <_dtoa_r+0x5e>
 80054c8:	685a      	ldr	r2, [r3, #4]
 80054ca:	604a      	str	r2, [r1, #4]
 80054cc:	2301      	movs	r3, #1
 80054ce:	4093      	lsls	r3, r2
 80054d0:	608b      	str	r3, [r1, #8]
 80054d2:	4620      	mov	r0, r4
 80054d4:	f001 f83c 	bl	8006550 <_Bfree>
 80054d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80054da:	2200      	movs	r2, #0
 80054dc:	601a      	str	r2, [r3, #0]
 80054de:	1e3b      	subs	r3, r7, #0
 80054e0:	bfaa      	itet	ge
 80054e2:	2300      	movge	r3, #0
 80054e4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80054e8:	f8c8 3000 	strge.w	r3, [r8]
 80054ec:	4b9a      	ldr	r3, [pc, #616]	; (8005758 <_dtoa_r+0x2d8>)
 80054ee:	bfbc      	itt	lt
 80054f0:	2201      	movlt	r2, #1
 80054f2:	f8c8 2000 	strlt.w	r2, [r8]
 80054f6:	ea33 030b 	bics.w	r3, r3, fp
 80054fa:	d11b      	bne.n	8005534 <_dtoa_r+0xb4>
 80054fc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80054fe:	f242 730f 	movw	r3, #9999	; 0x270f
 8005502:	6013      	str	r3, [r2, #0]
 8005504:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005508:	4333      	orrs	r3, r6
 800550a:	f000 8592 	beq.w	8006032 <_dtoa_r+0xbb2>
 800550e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005510:	b963      	cbnz	r3, 800552c <_dtoa_r+0xac>
 8005512:	4b92      	ldr	r3, [pc, #584]	; (800575c <_dtoa_r+0x2dc>)
 8005514:	e022      	b.n	800555c <_dtoa_r+0xdc>
 8005516:	4b92      	ldr	r3, [pc, #584]	; (8005760 <_dtoa_r+0x2e0>)
 8005518:	9301      	str	r3, [sp, #4]
 800551a:	3308      	adds	r3, #8
 800551c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800551e:	6013      	str	r3, [r2, #0]
 8005520:	9801      	ldr	r0, [sp, #4]
 8005522:	b013      	add	sp, #76	; 0x4c
 8005524:	ecbd 8b04 	vpop	{d8-d9}
 8005528:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800552c:	4b8b      	ldr	r3, [pc, #556]	; (800575c <_dtoa_r+0x2dc>)
 800552e:	9301      	str	r3, [sp, #4]
 8005530:	3303      	adds	r3, #3
 8005532:	e7f3      	b.n	800551c <_dtoa_r+0x9c>
 8005534:	2200      	movs	r2, #0
 8005536:	2300      	movs	r3, #0
 8005538:	4650      	mov	r0, sl
 800553a:	4659      	mov	r1, fp
 800553c:	f7fb fae4 	bl	8000b08 <__aeabi_dcmpeq>
 8005540:	ec4b ab19 	vmov	d9, sl, fp
 8005544:	4680      	mov	r8, r0
 8005546:	b158      	cbz	r0, 8005560 <_dtoa_r+0xe0>
 8005548:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800554a:	2301      	movs	r3, #1
 800554c:	6013      	str	r3, [r2, #0]
 800554e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005550:	2b00      	cmp	r3, #0
 8005552:	f000 856b 	beq.w	800602c <_dtoa_r+0xbac>
 8005556:	4883      	ldr	r0, [pc, #524]	; (8005764 <_dtoa_r+0x2e4>)
 8005558:	6018      	str	r0, [r3, #0]
 800555a:	1e43      	subs	r3, r0, #1
 800555c:	9301      	str	r3, [sp, #4]
 800555e:	e7df      	b.n	8005520 <_dtoa_r+0xa0>
 8005560:	ec4b ab10 	vmov	d0, sl, fp
 8005564:	aa10      	add	r2, sp, #64	; 0x40
 8005566:	a911      	add	r1, sp, #68	; 0x44
 8005568:	4620      	mov	r0, r4
 800556a:	f001 fad9 	bl	8006b20 <__d2b>
 800556e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8005572:	ee08 0a10 	vmov	s16, r0
 8005576:	2d00      	cmp	r5, #0
 8005578:	f000 8084 	beq.w	8005684 <_dtoa_r+0x204>
 800557c:	ee19 3a90 	vmov	r3, s19
 8005580:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005584:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005588:	4656      	mov	r6, sl
 800558a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800558e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005592:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8005596:	4b74      	ldr	r3, [pc, #464]	; (8005768 <_dtoa_r+0x2e8>)
 8005598:	2200      	movs	r2, #0
 800559a:	4630      	mov	r0, r6
 800559c:	4639      	mov	r1, r7
 800559e:	f7fa fe93 	bl	80002c8 <__aeabi_dsub>
 80055a2:	a365      	add	r3, pc, #404	; (adr r3, 8005738 <_dtoa_r+0x2b8>)
 80055a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055a8:	f7fb f846 	bl	8000638 <__aeabi_dmul>
 80055ac:	a364      	add	r3, pc, #400	; (adr r3, 8005740 <_dtoa_r+0x2c0>)
 80055ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055b2:	f7fa fe8b 	bl	80002cc <__adddf3>
 80055b6:	4606      	mov	r6, r0
 80055b8:	4628      	mov	r0, r5
 80055ba:	460f      	mov	r7, r1
 80055bc:	f7fa ffd2 	bl	8000564 <__aeabi_i2d>
 80055c0:	a361      	add	r3, pc, #388	; (adr r3, 8005748 <_dtoa_r+0x2c8>)
 80055c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055c6:	f7fb f837 	bl	8000638 <__aeabi_dmul>
 80055ca:	4602      	mov	r2, r0
 80055cc:	460b      	mov	r3, r1
 80055ce:	4630      	mov	r0, r6
 80055d0:	4639      	mov	r1, r7
 80055d2:	f7fa fe7b 	bl	80002cc <__adddf3>
 80055d6:	4606      	mov	r6, r0
 80055d8:	460f      	mov	r7, r1
 80055da:	f7fb fadd 	bl	8000b98 <__aeabi_d2iz>
 80055de:	2200      	movs	r2, #0
 80055e0:	9000      	str	r0, [sp, #0]
 80055e2:	2300      	movs	r3, #0
 80055e4:	4630      	mov	r0, r6
 80055e6:	4639      	mov	r1, r7
 80055e8:	f7fb fa98 	bl	8000b1c <__aeabi_dcmplt>
 80055ec:	b150      	cbz	r0, 8005604 <_dtoa_r+0x184>
 80055ee:	9800      	ldr	r0, [sp, #0]
 80055f0:	f7fa ffb8 	bl	8000564 <__aeabi_i2d>
 80055f4:	4632      	mov	r2, r6
 80055f6:	463b      	mov	r3, r7
 80055f8:	f7fb fa86 	bl	8000b08 <__aeabi_dcmpeq>
 80055fc:	b910      	cbnz	r0, 8005604 <_dtoa_r+0x184>
 80055fe:	9b00      	ldr	r3, [sp, #0]
 8005600:	3b01      	subs	r3, #1
 8005602:	9300      	str	r3, [sp, #0]
 8005604:	9b00      	ldr	r3, [sp, #0]
 8005606:	2b16      	cmp	r3, #22
 8005608:	d85a      	bhi.n	80056c0 <_dtoa_r+0x240>
 800560a:	9a00      	ldr	r2, [sp, #0]
 800560c:	4b57      	ldr	r3, [pc, #348]	; (800576c <_dtoa_r+0x2ec>)
 800560e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005616:	ec51 0b19 	vmov	r0, r1, d9
 800561a:	f7fb fa7f 	bl	8000b1c <__aeabi_dcmplt>
 800561e:	2800      	cmp	r0, #0
 8005620:	d050      	beq.n	80056c4 <_dtoa_r+0x244>
 8005622:	9b00      	ldr	r3, [sp, #0]
 8005624:	3b01      	subs	r3, #1
 8005626:	9300      	str	r3, [sp, #0]
 8005628:	2300      	movs	r3, #0
 800562a:	930b      	str	r3, [sp, #44]	; 0x2c
 800562c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800562e:	1b5d      	subs	r5, r3, r5
 8005630:	1e6b      	subs	r3, r5, #1
 8005632:	9305      	str	r3, [sp, #20]
 8005634:	bf45      	ittet	mi
 8005636:	f1c5 0301 	rsbmi	r3, r5, #1
 800563a:	9304      	strmi	r3, [sp, #16]
 800563c:	2300      	movpl	r3, #0
 800563e:	2300      	movmi	r3, #0
 8005640:	bf4c      	ite	mi
 8005642:	9305      	strmi	r3, [sp, #20]
 8005644:	9304      	strpl	r3, [sp, #16]
 8005646:	9b00      	ldr	r3, [sp, #0]
 8005648:	2b00      	cmp	r3, #0
 800564a:	db3d      	blt.n	80056c8 <_dtoa_r+0x248>
 800564c:	9b05      	ldr	r3, [sp, #20]
 800564e:	9a00      	ldr	r2, [sp, #0]
 8005650:	920a      	str	r2, [sp, #40]	; 0x28
 8005652:	4413      	add	r3, r2
 8005654:	9305      	str	r3, [sp, #20]
 8005656:	2300      	movs	r3, #0
 8005658:	9307      	str	r3, [sp, #28]
 800565a:	9b06      	ldr	r3, [sp, #24]
 800565c:	2b09      	cmp	r3, #9
 800565e:	f200 8089 	bhi.w	8005774 <_dtoa_r+0x2f4>
 8005662:	2b05      	cmp	r3, #5
 8005664:	bfc4      	itt	gt
 8005666:	3b04      	subgt	r3, #4
 8005668:	9306      	strgt	r3, [sp, #24]
 800566a:	9b06      	ldr	r3, [sp, #24]
 800566c:	f1a3 0302 	sub.w	r3, r3, #2
 8005670:	bfcc      	ite	gt
 8005672:	2500      	movgt	r5, #0
 8005674:	2501      	movle	r5, #1
 8005676:	2b03      	cmp	r3, #3
 8005678:	f200 8087 	bhi.w	800578a <_dtoa_r+0x30a>
 800567c:	e8df f003 	tbb	[pc, r3]
 8005680:	59383a2d 	.word	0x59383a2d
 8005684:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005688:	441d      	add	r5, r3
 800568a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800568e:	2b20      	cmp	r3, #32
 8005690:	bfc1      	itttt	gt
 8005692:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005696:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800569a:	fa0b f303 	lslgt.w	r3, fp, r3
 800569e:	fa26 f000 	lsrgt.w	r0, r6, r0
 80056a2:	bfda      	itte	le
 80056a4:	f1c3 0320 	rsble	r3, r3, #32
 80056a8:	fa06 f003 	lslle.w	r0, r6, r3
 80056ac:	4318      	orrgt	r0, r3
 80056ae:	f7fa ff49 	bl	8000544 <__aeabi_ui2d>
 80056b2:	2301      	movs	r3, #1
 80056b4:	4606      	mov	r6, r0
 80056b6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80056ba:	3d01      	subs	r5, #1
 80056bc:	930e      	str	r3, [sp, #56]	; 0x38
 80056be:	e76a      	b.n	8005596 <_dtoa_r+0x116>
 80056c0:	2301      	movs	r3, #1
 80056c2:	e7b2      	b.n	800562a <_dtoa_r+0x1aa>
 80056c4:	900b      	str	r0, [sp, #44]	; 0x2c
 80056c6:	e7b1      	b.n	800562c <_dtoa_r+0x1ac>
 80056c8:	9b04      	ldr	r3, [sp, #16]
 80056ca:	9a00      	ldr	r2, [sp, #0]
 80056cc:	1a9b      	subs	r3, r3, r2
 80056ce:	9304      	str	r3, [sp, #16]
 80056d0:	4253      	negs	r3, r2
 80056d2:	9307      	str	r3, [sp, #28]
 80056d4:	2300      	movs	r3, #0
 80056d6:	930a      	str	r3, [sp, #40]	; 0x28
 80056d8:	e7bf      	b.n	800565a <_dtoa_r+0x1da>
 80056da:	2300      	movs	r3, #0
 80056dc:	9308      	str	r3, [sp, #32]
 80056de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	dc55      	bgt.n	8005790 <_dtoa_r+0x310>
 80056e4:	2301      	movs	r3, #1
 80056e6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80056ea:	461a      	mov	r2, r3
 80056ec:	9209      	str	r2, [sp, #36]	; 0x24
 80056ee:	e00c      	b.n	800570a <_dtoa_r+0x28a>
 80056f0:	2301      	movs	r3, #1
 80056f2:	e7f3      	b.n	80056dc <_dtoa_r+0x25c>
 80056f4:	2300      	movs	r3, #0
 80056f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80056f8:	9308      	str	r3, [sp, #32]
 80056fa:	9b00      	ldr	r3, [sp, #0]
 80056fc:	4413      	add	r3, r2
 80056fe:	9302      	str	r3, [sp, #8]
 8005700:	3301      	adds	r3, #1
 8005702:	2b01      	cmp	r3, #1
 8005704:	9303      	str	r3, [sp, #12]
 8005706:	bfb8      	it	lt
 8005708:	2301      	movlt	r3, #1
 800570a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800570c:	2200      	movs	r2, #0
 800570e:	6042      	str	r2, [r0, #4]
 8005710:	2204      	movs	r2, #4
 8005712:	f102 0614 	add.w	r6, r2, #20
 8005716:	429e      	cmp	r6, r3
 8005718:	6841      	ldr	r1, [r0, #4]
 800571a:	d93d      	bls.n	8005798 <_dtoa_r+0x318>
 800571c:	4620      	mov	r0, r4
 800571e:	f000 fed7 	bl	80064d0 <_Balloc>
 8005722:	9001      	str	r0, [sp, #4]
 8005724:	2800      	cmp	r0, #0
 8005726:	d13b      	bne.n	80057a0 <_dtoa_r+0x320>
 8005728:	4b11      	ldr	r3, [pc, #68]	; (8005770 <_dtoa_r+0x2f0>)
 800572a:	4602      	mov	r2, r0
 800572c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005730:	e6c0      	b.n	80054b4 <_dtoa_r+0x34>
 8005732:	2301      	movs	r3, #1
 8005734:	e7df      	b.n	80056f6 <_dtoa_r+0x276>
 8005736:	bf00      	nop
 8005738:	636f4361 	.word	0x636f4361
 800573c:	3fd287a7 	.word	0x3fd287a7
 8005740:	8b60c8b3 	.word	0x8b60c8b3
 8005744:	3fc68a28 	.word	0x3fc68a28
 8005748:	509f79fb 	.word	0x509f79fb
 800574c:	3fd34413 	.word	0x3fd34413
 8005750:	08007461 	.word	0x08007461
 8005754:	08007478 	.word	0x08007478
 8005758:	7ff00000 	.word	0x7ff00000
 800575c:	0800745d 	.word	0x0800745d
 8005760:	08007454 	.word	0x08007454
 8005764:	08007431 	.word	0x08007431
 8005768:	3ff80000 	.word	0x3ff80000
 800576c:	080075c8 	.word	0x080075c8
 8005770:	080074d3 	.word	0x080074d3
 8005774:	2501      	movs	r5, #1
 8005776:	2300      	movs	r3, #0
 8005778:	9306      	str	r3, [sp, #24]
 800577a:	9508      	str	r5, [sp, #32]
 800577c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005780:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005784:	2200      	movs	r2, #0
 8005786:	2312      	movs	r3, #18
 8005788:	e7b0      	b.n	80056ec <_dtoa_r+0x26c>
 800578a:	2301      	movs	r3, #1
 800578c:	9308      	str	r3, [sp, #32]
 800578e:	e7f5      	b.n	800577c <_dtoa_r+0x2fc>
 8005790:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005792:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005796:	e7b8      	b.n	800570a <_dtoa_r+0x28a>
 8005798:	3101      	adds	r1, #1
 800579a:	6041      	str	r1, [r0, #4]
 800579c:	0052      	lsls	r2, r2, #1
 800579e:	e7b8      	b.n	8005712 <_dtoa_r+0x292>
 80057a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80057a2:	9a01      	ldr	r2, [sp, #4]
 80057a4:	601a      	str	r2, [r3, #0]
 80057a6:	9b03      	ldr	r3, [sp, #12]
 80057a8:	2b0e      	cmp	r3, #14
 80057aa:	f200 809d 	bhi.w	80058e8 <_dtoa_r+0x468>
 80057ae:	2d00      	cmp	r5, #0
 80057b0:	f000 809a 	beq.w	80058e8 <_dtoa_r+0x468>
 80057b4:	9b00      	ldr	r3, [sp, #0]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	dd32      	ble.n	8005820 <_dtoa_r+0x3a0>
 80057ba:	4ab7      	ldr	r2, [pc, #732]	; (8005a98 <_dtoa_r+0x618>)
 80057bc:	f003 030f 	and.w	r3, r3, #15
 80057c0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80057c4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80057c8:	9b00      	ldr	r3, [sp, #0]
 80057ca:	05d8      	lsls	r0, r3, #23
 80057cc:	ea4f 1723 	mov.w	r7, r3, asr #4
 80057d0:	d516      	bpl.n	8005800 <_dtoa_r+0x380>
 80057d2:	4bb2      	ldr	r3, [pc, #712]	; (8005a9c <_dtoa_r+0x61c>)
 80057d4:	ec51 0b19 	vmov	r0, r1, d9
 80057d8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80057dc:	f7fb f856 	bl	800088c <__aeabi_ddiv>
 80057e0:	f007 070f 	and.w	r7, r7, #15
 80057e4:	4682      	mov	sl, r0
 80057e6:	468b      	mov	fp, r1
 80057e8:	2503      	movs	r5, #3
 80057ea:	4eac      	ldr	r6, [pc, #688]	; (8005a9c <_dtoa_r+0x61c>)
 80057ec:	b957      	cbnz	r7, 8005804 <_dtoa_r+0x384>
 80057ee:	4642      	mov	r2, r8
 80057f0:	464b      	mov	r3, r9
 80057f2:	4650      	mov	r0, sl
 80057f4:	4659      	mov	r1, fp
 80057f6:	f7fb f849 	bl	800088c <__aeabi_ddiv>
 80057fa:	4682      	mov	sl, r0
 80057fc:	468b      	mov	fp, r1
 80057fe:	e028      	b.n	8005852 <_dtoa_r+0x3d2>
 8005800:	2502      	movs	r5, #2
 8005802:	e7f2      	b.n	80057ea <_dtoa_r+0x36a>
 8005804:	07f9      	lsls	r1, r7, #31
 8005806:	d508      	bpl.n	800581a <_dtoa_r+0x39a>
 8005808:	4640      	mov	r0, r8
 800580a:	4649      	mov	r1, r9
 800580c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005810:	f7fa ff12 	bl	8000638 <__aeabi_dmul>
 8005814:	3501      	adds	r5, #1
 8005816:	4680      	mov	r8, r0
 8005818:	4689      	mov	r9, r1
 800581a:	107f      	asrs	r7, r7, #1
 800581c:	3608      	adds	r6, #8
 800581e:	e7e5      	b.n	80057ec <_dtoa_r+0x36c>
 8005820:	f000 809b 	beq.w	800595a <_dtoa_r+0x4da>
 8005824:	9b00      	ldr	r3, [sp, #0]
 8005826:	4f9d      	ldr	r7, [pc, #628]	; (8005a9c <_dtoa_r+0x61c>)
 8005828:	425e      	negs	r6, r3
 800582a:	4b9b      	ldr	r3, [pc, #620]	; (8005a98 <_dtoa_r+0x618>)
 800582c:	f006 020f 	and.w	r2, r6, #15
 8005830:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005838:	ec51 0b19 	vmov	r0, r1, d9
 800583c:	f7fa fefc 	bl	8000638 <__aeabi_dmul>
 8005840:	1136      	asrs	r6, r6, #4
 8005842:	4682      	mov	sl, r0
 8005844:	468b      	mov	fp, r1
 8005846:	2300      	movs	r3, #0
 8005848:	2502      	movs	r5, #2
 800584a:	2e00      	cmp	r6, #0
 800584c:	d17a      	bne.n	8005944 <_dtoa_r+0x4c4>
 800584e:	2b00      	cmp	r3, #0
 8005850:	d1d3      	bne.n	80057fa <_dtoa_r+0x37a>
 8005852:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005854:	2b00      	cmp	r3, #0
 8005856:	f000 8082 	beq.w	800595e <_dtoa_r+0x4de>
 800585a:	4b91      	ldr	r3, [pc, #580]	; (8005aa0 <_dtoa_r+0x620>)
 800585c:	2200      	movs	r2, #0
 800585e:	4650      	mov	r0, sl
 8005860:	4659      	mov	r1, fp
 8005862:	f7fb f95b 	bl	8000b1c <__aeabi_dcmplt>
 8005866:	2800      	cmp	r0, #0
 8005868:	d079      	beq.n	800595e <_dtoa_r+0x4de>
 800586a:	9b03      	ldr	r3, [sp, #12]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d076      	beq.n	800595e <_dtoa_r+0x4de>
 8005870:	9b02      	ldr	r3, [sp, #8]
 8005872:	2b00      	cmp	r3, #0
 8005874:	dd36      	ble.n	80058e4 <_dtoa_r+0x464>
 8005876:	9b00      	ldr	r3, [sp, #0]
 8005878:	4650      	mov	r0, sl
 800587a:	4659      	mov	r1, fp
 800587c:	1e5f      	subs	r7, r3, #1
 800587e:	2200      	movs	r2, #0
 8005880:	4b88      	ldr	r3, [pc, #544]	; (8005aa4 <_dtoa_r+0x624>)
 8005882:	f7fa fed9 	bl	8000638 <__aeabi_dmul>
 8005886:	9e02      	ldr	r6, [sp, #8]
 8005888:	4682      	mov	sl, r0
 800588a:	468b      	mov	fp, r1
 800588c:	3501      	adds	r5, #1
 800588e:	4628      	mov	r0, r5
 8005890:	f7fa fe68 	bl	8000564 <__aeabi_i2d>
 8005894:	4652      	mov	r2, sl
 8005896:	465b      	mov	r3, fp
 8005898:	f7fa fece 	bl	8000638 <__aeabi_dmul>
 800589c:	4b82      	ldr	r3, [pc, #520]	; (8005aa8 <_dtoa_r+0x628>)
 800589e:	2200      	movs	r2, #0
 80058a0:	f7fa fd14 	bl	80002cc <__adddf3>
 80058a4:	46d0      	mov	r8, sl
 80058a6:	46d9      	mov	r9, fp
 80058a8:	4682      	mov	sl, r0
 80058aa:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80058ae:	2e00      	cmp	r6, #0
 80058b0:	d158      	bne.n	8005964 <_dtoa_r+0x4e4>
 80058b2:	4b7e      	ldr	r3, [pc, #504]	; (8005aac <_dtoa_r+0x62c>)
 80058b4:	2200      	movs	r2, #0
 80058b6:	4640      	mov	r0, r8
 80058b8:	4649      	mov	r1, r9
 80058ba:	f7fa fd05 	bl	80002c8 <__aeabi_dsub>
 80058be:	4652      	mov	r2, sl
 80058c0:	465b      	mov	r3, fp
 80058c2:	4680      	mov	r8, r0
 80058c4:	4689      	mov	r9, r1
 80058c6:	f7fb f947 	bl	8000b58 <__aeabi_dcmpgt>
 80058ca:	2800      	cmp	r0, #0
 80058cc:	f040 8295 	bne.w	8005dfa <_dtoa_r+0x97a>
 80058d0:	4652      	mov	r2, sl
 80058d2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80058d6:	4640      	mov	r0, r8
 80058d8:	4649      	mov	r1, r9
 80058da:	f7fb f91f 	bl	8000b1c <__aeabi_dcmplt>
 80058de:	2800      	cmp	r0, #0
 80058e0:	f040 8289 	bne.w	8005df6 <_dtoa_r+0x976>
 80058e4:	ec5b ab19 	vmov	sl, fp, d9
 80058e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	f2c0 8148 	blt.w	8005b80 <_dtoa_r+0x700>
 80058f0:	9a00      	ldr	r2, [sp, #0]
 80058f2:	2a0e      	cmp	r2, #14
 80058f4:	f300 8144 	bgt.w	8005b80 <_dtoa_r+0x700>
 80058f8:	4b67      	ldr	r3, [pc, #412]	; (8005a98 <_dtoa_r+0x618>)
 80058fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80058fe:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005902:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005904:	2b00      	cmp	r3, #0
 8005906:	f280 80d5 	bge.w	8005ab4 <_dtoa_r+0x634>
 800590a:	9b03      	ldr	r3, [sp, #12]
 800590c:	2b00      	cmp	r3, #0
 800590e:	f300 80d1 	bgt.w	8005ab4 <_dtoa_r+0x634>
 8005912:	f040 826f 	bne.w	8005df4 <_dtoa_r+0x974>
 8005916:	4b65      	ldr	r3, [pc, #404]	; (8005aac <_dtoa_r+0x62c>)
 8005918:	2200      	movs	r2, #0
 800591a:	4640      	mov	r0, r8
 800591c:	4649      	mov	r1, r9
 800591e:	f7fa fe8b 	bl	8000638 <__aeabi_dmul>
 8005922:	4652      	mov	r2, sl
 8005924:	465b      	mov	r3, fp
 8005926:	f7fb f90d 	bl	8000b44 <__aeabi_dcmpge>
 800592a:	9e03      	ldr	r6, [sp, #12]
 800592c:	4637      	mov	r7, r6
 800592e:	2800      	cmp	r0, #0
 8005930:	f040 8245 	bne.w	8005dbe <_dtoa_r+0x93e>
 8005934:	9d01      	ldr	r5, [sp, #4]
 8005936:	2331      	movs	r3, #49	; 0x31
 8005938:	f805 3b01 	strb.w	r3, [r5], #1
 800593c:	9b00      	ldr	r3, [sp, #0]
 800593e:	3301      	adds	r3, #1
 8005940:	9300      	str	r3, [sp, #0]
 8005942:	e240      	b.n	8005dc6 <_dtoa_r+0x946>
 8005944:	07f2      	lsls	r2, r6, #31
 8005946:	d505      	bpl.n	8005954 <_dtoa_r+0x4d4>
 8005948:	e9d7 2300 	ldrd	r2, r3, [r7]
 800594c:	f7fa fe74 	bl	8000638 <__aeabi_dmul>
 8005950:	3501      	adds	r5, #1
 8005952:	2301      	movs	r3, #1
 8005954:	1076      	asrs	r6, r6, #1
 8005956:	3708      	adds	r7, #8
 8005958:	e777      	b.n	800584a <_dtoa_r+0x3ca>
 800595a:	2502      	movs	r5, #2
 800595c:	e779      	b.n	8005852 <_dtoa_r+0x3d2>
 800595e:	9f00      	ldr	r7, [sp, #0]
 8005960:	9e03      	ldr	r6, [sp, #12]
 8005962:	e794      	b.n	800588e <_dtoa_r+0x40e>
 8005964:	9901      	ldr	r1, [sp, #4]
 8005966:	4b4c      	ldr	r3, [pc, #304]	; (8005a98 <_dtoa_r+0x618>)
 8005968:	4431      	add	r1, r6
 800596a:	910d      	str	r1, [sp, #52]	; 0x34
 800596c:	9908      	ldr	r1, [sp, #32]
 800596e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005972:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005976:	2900      	cmp	r1, #0
 8005978:	d043      	beq.n	8005a02 <_dtoa_r+0x582>
 800597a:	494d      	ldr	r1, [pc, #308]	; (8005ab0 <_dtoa_r+0x630>)
 800597c:	2000      	movs	r0, #0
 800597e:	f7fa ff85 	bl	800088c <__aeabi_ddiv>
 8005982:	4652      	mov	r2, sl
 8005984:	465b      	mov	r3, fp
 8005986:	f7fa fc9f 	bl	80002c8 <__aeabi_dsub>
 800598a:	9d01      	ldr	r5, [sp, #4]
 800598c:	4682      	mov	sl, r0
 800598e:	468b      	mov	fp, r1
 8005990:	4649      	mov	r1, r9
 8005992:	4640      	mov	r0, r8
 8005994:	f7fb f900 	bl	8000b98 <__aeabi_d2iz>
 8005998:	4606      	mov	r6, r0
 800599a:	f7fa fde3 	bl	8000564 <__aeabi_i2d>
 800599e:	4602      	mov	r2, r0
 80059a0:	460b      	mov	r3, r1
 80059a2:	4640      	mov	r0, r8
 80059a4:	4649      	mov	r1, r9
 80059a6:	f7fa fc8f 	bl	80002c8 <__aeabi_dsub>
 80059aa:	3630      	adds	r6, #48	; 0x30
 80059ac:	f805 6b01 	strb.w	r6, [r5], #1
 80059b0:	4652      	mov	r2, sl
 80059b2:	465b      	mov	r3, fp
 80059b4:	4680      	mov	r8, r0
 80059b6:	4689      	mov	r9, r1
 80059b8:	f7fb f8b0 	bl	8000b1c <__aeabi_dcmplt>
 80059bc:	2800      	cmp	r0, #0
 80059be:	d163      	bne.n	8005a88 <_dtoa_r+0x608>
 80059c0:	4642      	mov	r2, r8
 80059c2:	464b      	mov	r3, r9
 80059c4:	4936      	ldr	r1, [pc, #216]	; (8005aa0 <_dtoa_r+0x620>)
 80059c6:	2000      	movs	r0, #0
 80059c8:	f7fa fc7e 	bl	80002c8 <__aeabi_dsub>
 80059cc:	4652      	mov	r2, sl
 80059ce:	465b      	mov	r3, fp
 80059d0:	f7fb f8a4 	bl	8000b1c <__aeabi_dcmplt>
 80059d4:	2800      	cmp	r0, #0
 80059d6:	f040 80b5 	bne.w	8005b44 <_dtoa_r+0x6c4>
 80059da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80059dc:	429d      	cmp	r5, r3
 80059de:	d081      	beq.n	80058e4 <_dtoa_r+0x464>
 80059e0:	4b30      	ldr	r3, [pc, #192]	; (8005aa4 <_dtoa_r+0x624>)
 80059e2:	2200      	movs	r2, #0
 80059e4:	4650      	mov	r0, sl
 80059e6:	4659      	mov	r1, fp
 80059e8:	f7fa fe26 	bl	8000638 <__aeabi_dmul>
 80059ec:	4b2d      	ldr	r3, [pc, #180]	; (8005aa4 <_dtoa_r+0x624>)
 80059ee:	4682      	mov	sl, r0
 80059f0:	468b      	mov	fp, r1
 80059f2:	4640      	mov	r0, r8
 80059f4:	4649      	mov	r1, r9
 80059f6:	2200      	movs	r2, #0
 80059f8:	f7fa fe1e 	bl	8000638 <__aeabi_dmul>
 80059fc:	4680      	mov	r8, r0
 80059fe:	4689      	mov	r9, r1
 8005a00:	e7c6      	b.n	8005990 <_dtoa_r+0x510>
 8005a02:	4650      	mov	r0, sl
 8005a04:	4659      	mov	r1, fp
 8005a06:	f7fa fe17 	bl	8000638 <__aeabi_dmul>
 8005a0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005a0c:	9d01      	ldr	r5, [sp, #4]
 8005a0e:	930f      	str	r3, [sp, #60]	; 0x3c
 8005a10:	4682      	mov	sl, r0
 8005a12:	468b      	mov	fp, r1
 8005a14:	4649      	mov	r1, r9
 8005a16:	4640      	mov	r0, r8
 8005a18:	f7fb f8be 	bl	8000b98 <__aeabi_d2iz>
 8005a1c:	4606      	mov	r6, r0
 8005a1e:	f7fa fda1 	bl	8000564 <__aeabi_i2d>
 8005a22:	3630      	adds	r6, #48	; 0x30
 8005a24:	4602      	mov	r2, r0
 8005a26:	460b      	mov	r3, r1
 8005a28:	4640      	mov	r0, r8
 8005a2a:	4649      	mov	r1, r9
 8005a2c:	f7fa fc4c 	bl	80002c8 <__aeabi_dsub>
 8005a30:	f805 6b01 	strb.w	r6, [r5], #1
 8005a34:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005a36:	429d      	cmp	r5, r3
 8005a38:	4680      	mov	r8, r0
 8005a3a:	4689      	mov	r9, r1
 8005a3c:	f04f 0200 	mov.w	r2, #0
 8005a40:	d124      	bne.n	8005a8c <_dtoa_r+0x60c>
 8005a42:	4b1b      	ldr	r3, [pc, #108]	; (8005ab0 <_dtoa_r+0x630>)
 8005a44:	4650      	mov	r0, sl
 8005a46:	4659      	mov	r1, fp
 8005a48:	f7fa fc40 	bl	80002cc <__adddf3>
 8005a4c:	4602      	mov	r2, r0
 8005a4e:	460b      	mov	r3, r1
 8005a50:	4640      	mov	r0, r8
 8005a52:	4649      	mov	r1, r9
 8005a54:	f7fb f880 	bl	8000b58 <__aeabi_dcmpgt>
 8005a58:	2800      	cmp	r0, #0
 8005a5a:	d173      	bne.n	8005b44 <_dtoa_r+0x6c4>
 8005a5c:	4652      	mov	r2, sl
 8005a5e:	465b      	mov	r3, fp
 8005a60:	4913      	ldr	r1, [pc, #76]	; (8005ab0 <_dtoa_r+0x630>)
 8005a62:	2000      	movs	r0, #0
 8005a64:	f7fa fc30 	bl	80002c8 <__aeabi_dsub>
 8005a68:	4602      	mov	r2, r0
 8005a6a:	460b      	mov	r3, r1
 8005a6c:	4640      	mov	r0, r8
 8005a6e:	4649      	mov	r1, r9
 8005a70:	f7fb f854 	bl	8000b1c <__aeabi_dcmplt>
 8005a74:	2800      	cmp	r0, #0
 8005a76:	f43f af35 	beq.w	80058e4 <_dtoa_r+0x464>
 8005a7a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8005a7c:	1e6b      	subs	r3, r5, #1
 8005a7e:	930f      	str	r3, [sp, #60]	; 0x3c
 8005a80:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005a84:	2b30      	cmp	r3, #48	; 0x30
 8005a86:	d0f8      	beq.n	8005a7a <_dtoa_r+0x5fa>
 8005a88:	9700      	str	r7, [sp, #0]
 8005a8a:	e049      	b.n	8005b20 <_dtoa_r+0x6a0>
 8005a8c:	4b05      	ldr	r3, [pc, #20]	; (8005aa4 <_dtoa_r+0x624>)
 8005a8e:	f7fa fdd3 	bl	8000638 <__aeabi_dmul>
 8005a92:	4680      	mov	r8, r0
 8005a94:	4689      	mov	r9, r1
 8005a96:	e7bd      	b.n	8005a14 <_dtoa_r+0x594>
 8005a98:	080075c8 	.word	0x080075c8
 8005a9c:	080075a0 	.word	0x080075a0
 8005aa0:	3ff00000 	.word	0x3ff00000
 8005aa4:	40240000 	.word	0x40240000
 8005aa8:	401c0000 	.word	0x401c0000
 8005aac:	40140000 	.word	0x40140000
 8005ab0:	3fe00000 	.word	0x3fe00000
 8005ab4:	9d01      	ldr	r5, [sp, #4]
 8005ab6:	4656      	mov	r6, sl
 8005ab8:	465f      	mov	r7, fp
 8005aba:	4642      	mov	r2, r8
 8005abc:	464b      	mov	r3, r9
 8005abe:	4630      	mov	r0, r6
 8005ac0:	4639      	mov	r1, r7
 8005ac2:	f7fa fee3 	bl	800088c <__aeabi_ddiv>
 8005ac6:	f7fb f867 	bl	8000b98 <__aeabi_d2iz>
 8005aca:	4682      	mov	sl, r0
 8005acc:	f7fa fd4a 	bl	8000564 <__aeabi_i2d>
 8005ad0:	4642      	mov	r2, r8
 8005ad2:	464b      	mov	r3, r9
 8005ad4:	f7fa fdb0 	bl	8000638 <__aeabi_dmul>
 8005ad8:	4602      	mov	r2, r0
 8005ada:	460b      	mov	r3, r1
 8005adc:	4630      	mov	r0, r6
 8005ade:	4639      	mov	r1, r7
 8005ae0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8005ae4:	f7fa fbf0 	bl	80002c8 <__aeabi_dsub>
 8005ae8:	f805 6b01 	strb.w	r6, [r5], #1
 8005aec:	9e01      	ldr	r6, [sp, #4]
 8005aee:	9f03      	ldr	r7, [sp, #12]
 8005af0:	1bae      	subs	r6, r5, r6
 8005af2:	42b7      	cmp	r7, r6
 8005af4:	4602      	mov	r2, r0
 8005af6:	460b      	mov	r3, r1
 8005af8:	d135      	bne.n	8005b66 <_dtoa_r+0x6e6>
 8005afa:	f7fa fbe7 	bl	80002cc <__adddf3>
 8005afe:	4642      	mov	r2, r8
 8005b00:	464b      	mov	r3, r9
 8005b02:	4606      	mov	r6, r0
 8005b04:	460f      	mov	r7, r1
 8005b06:	f7fb f827 	bl	8000b58 <__aeabi_dcmpgt>
 8005b0a:	b9d0      	cbnz	r0, 8005b42 <_dtoa_r+0x6c2>
 8005b0c:	4642      	mov	r2, r8
 8005b0e:	464b      	mov	r3, r9
 8005b10:	4630      	mov	r0, r6
 8005b12:	4639      	mov	r1, r7
 8005b14:	f7fa fff8 	bl	8000b08 <__aeabi_dcmpeq>
 8005b18:	b110      	cbz	r0, 8005b20 <_dtoa_r+0x6a0>
 8005b1a:	f01a 0f01 	tst.w	sl, #1
 8005b1e:	d110      	bne.n	8005b42 <_dtoa_r+0x6c2>
 8005b20:	4620      	mov	r0, r4
 8005b22:	ee18 1a10 	vmov	r1, s16
 8005b26:	f000 fd13 	bl	8006550 <_Bfree>
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	9800      	ldr	r0, [sp, #0]
 8005b2e:	702b      	strb	r3, [r5, #0]
 8005b30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005b32:	3001      	adds	r0, #1
 8005b34:	6018      	str	r0, [r3, #0]
 8005b36:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	f43f acf1 	beq.w	8005520 <_dtoa_r+0xa0>
 8005b3e:	601d      	str	r5, [r3, #0]
 8005b40:	e4ee      	b.n	8005520 <_dtoa_r+0xa0>
 8005b42:	9f00      	ldr	r7, [sp, #0]
 8005b44:	462b      	mov	r3, r5
 8005b46:	461d      	mov	r5, r3
 8005b48:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005b4c:	2a39      	cmp	r2, #57	; 0x39
 8005b4e:	d106      	bne.n	8005b5e <_dtoa_r+0x6de>
 8005b50:	9a01      	ldr	r2, [sp, #4]
 8005b52:	429a      	cmp	r2, r3
 8005b54:	d1f7      	bne.n	8005b46 <_dtoa_r+0x6c6>
 8005b56:	9901      	ldr	r1, [sp, #4]
 8005b58:	2230      	movs	r2, #48	; 0x30
 8005b5a:	3701      	adds	r7, #1
 8005b5c:	700a      	strb	r2, [r1, #0]
 8005b5e:	781a      	ldrb	r2, [r3, #0]
 8005b60:	3201      	adds	r2, #1
 8005b62:	701a      	strb	r2, [r3, #0]
 8005b64:	e790      	b.n	8005a88 <_dtoa_r+0x608>
 8005b66:	4ba6      	ldr	r3, [pc, #664]	; (8005e00 <_dtoa_r+0x980>)
 8005b68:	2200      	movs	r2, #0
 8005b6a:	f7fa fd65 	bl	8000638 <__aeabi_dmul>
 8005b6e:	2200      	movs	r2, #0
 8005b70:	2300      	movs	r3, #0
 8005b72:	4606      	mov	r6, r0
 8005b74:	460f      	mov	r7, r1
 8005b76:	f7fa ffc7 	bl	8000b08 <__aeabi_dcmpeq>
 8005b7a:	2800      	cmp	r0, #0
 8005b7c:	d09d      	beq.n	8005aba <_dtoa_r+0x63a>
 8005b7e:	e7cf      	b.n	8005b20 <_dtoa_r+0x6a0>
 8005b80:	9a08      	ldr	r2, [sp, #32]
 8005b82:	2a00      	cmp	r2, #0
 8005b84:	f000 80d7 	beq.w	8005d36 <_dtoa_r+0x8b6>
 8005b88:	9a06      	ldr	r2, [sp, #24]
 8005b8a:	2a01      	cmp	r2, #1
 8005b8c:	f300 80ba 	bgt.w	8005d04 <_dtoa_r+0x884>
 8005b90:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005b92:	2a00      	cmp	r2, #0
 8005b94:	f000 80b2 	beq.w	8005cfc <_dtoa_r+0x87c>
 8005b98:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005b9c:	9e07      	ldr	r6, [sp, #28]
 8005b9e:	9d04      	ldr	r5, [sp, #16]
 8005ba0:	9a04      	ldr	r2, [sp, #16]
 8005ba2:	441a      	add	r2, r3
 8005ba4:	9204      	str	r2, [sp, #16]
 8005ba6:	9a05      	ldr	r2, [sp, #20]
 8005ba8:	2101      	movs	r1, #1
 8005baa:	441a      	add	r2, r3
 8005bac:	4620      	mov	r0, r4
 8005bae:	9205      	str	r2, [sp, #20]
 8005bb0:	f000 fd86 	bl	80066c0 <__i2b>
 8005bb4:	4607      	mov	r7, r0
 8005bb6:	2d00      	cmp	r5, #0
 8005bb8:	dd0c      	ble.n	8005bd4 <_dtoa_r+0x754>
 8005bba:	9b05      	ldr	r3, [sp, #20]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	dd09      	ble.n	8005bd4 <_dtoa_r+0x754>
 8005bc0:	42ab      	cmp	r3, r5
 8005bc2:	9a04      	ldr	r2, [sp, #16]
 8005bc4:	bfa8      	it	ge
 8005bc6:	462b      	movge	r3, r5
 8005bc8:	1ad2      	subs	r2, r2, r3
 8005bca:	9204      	str	r2, [sp, #16]
 8005bcc:	9a05      	ldr	r2, [sp, #20]
 8005bce:	1aed      	subs	r5, r5, r3
 8005bd0:	1ad3      	subs	r3, r2, r3
 8005bd2:	9305      	str	r3, [sp, #20]
 8005bd4:	9b07      	ldr	r3, [sp, #28]
 8005bd6:	b31b      	cbz	r3, 8005c20 <_dtoa_r+0x7a0>
 8005bd8:	9b08      	ldr	r3, [sp, #32]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	f000 80af 	beq.w	8005d3e <_dtoa_r+0x8be>
 8005be0:	2e00      	cmp	r6, #0
 8005be2:	dd13      	ble.n	8005c0c <_dtoa_r+0x78c>
 8005be4:	4639      	mov	r1, r7
 8005be6:	4632      	mov	r2, r6
 8005be8:	4620      	mov	r0, r4
 8005bea:	f000 fe29 	bl	8006840 <__pow5mult>
 8005bee:	ee18 2a10 	vmov	r2, s16
 8005bf2:	4601      	mov	r1, r0
 8005bf4:	4607      	mov	r7, r0
 8005bf6:	4620      	mov	r0, r4
 8005bf8:	f000 fd78 	bl	80066ec <__multiply>
 8005bfc:	ee18 1a10 	vmov	r1, s16
 8005c00:	4680      	mov	r8, r0
 8005c02:	4620      	mov	r0, r4
 8005c04:	f000 fca4 	bl	8006550 <_Bfree>
 8005c08:	ee08 8a10 	vmov	s16, r8
 8005c0c:	9b07      	ldr	r3, [sp, #28]
 8005c0e:	1b9a      	subs	r2, r3, r6
 8005c10:	d006      	beq.n	8005c20 <_dtoa_r+0x7a0>
 8005c12:	ee18 1a10 	vmov	r1, s16
 8005c16:	4620      	mov	r0, r4
 8005c18:	f000 fe12 	bl	8006840 <__pow5mult>
 8005c1c:	ee08 0a10 	vmov	s16, r0
 8005c20:	2101      	movs	r1, #1
 8005c22:	4620      	mov	r0, r4
 8005c24:	f000 fd4c 	bl	80066c0 <__i2b>
 8005c28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	4606      	mov	r6, r0
 8005c2e:	f340 8088 	ble.w	8005d42 <_dtoa_r+0x8c2>
 8005c32:	461a      	mov	r2, r3
 8005c34:	4601      	mov	r1, r0
 8005c36:	4620      	mov	r0, r4
 8005c38:	f000 fe02 	bl	8006840 <__pow5mult>
 8005c3c:	9b06      	ldr	r3, [sp, #24]
 8005c3e:	2b01      	cmp	r3, #1
 8005c40:	4606      	mov	r6, r0
 8005c42:	f340 8081 	ble.w	8005d48 <_dtoa_r+0x8c8>
 8005c46:	f04f 0800 	mov.w	r8, #0
 8005c4a:	6933      	ldr	r3, [r6, #16]
 8005c4c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005c50:	6918      	ldr	r0, [r3, #16]
 8005c52:	f000 fce5 	bl	8006620 <__hi0bits>
 8005c56:	f1c0 0020 	rsb	r0, r0, #32
 8005c5a:	9b05      	ldr	r3, [sp, #20]
 8005c5c:	4418      	add	r0, r3
 8005c5e:	f010 001f 	ands.w	r0, r0, #31
 8005c62:	f000 8092 	beq.w	8005d8a <_dtoa_r+0x90a>
 8005c66:	f1c0 0320 	rsb	r3, r0, #32
 8005c6a:	2b04      	cmp	r3, #4
 8005c6c:	f340 808a 	ble.w	8005d84 <_dtoa_r+0x904>
 8005c70:	f1c0 001c 	rsb	r0, r0, #28
 8005c74:	9b04      	ldr	r3, [sp, #16]
 8005c76:	4403      	add	r3, r0
 8005c78:	9304      	str	r3, [sp, #16]
 8005c7a:	9b05      	ldr	r3, [sp, #20]
 8005c7c:	4403      	add	r3, r0
 8005c7e:	4405      	add	r5, r0
 8005c80:	9305      	str	r3, [sp, #20]
 8005c82:	9b04      	ldr	r3, [sp, #16]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	dd07      	ble.n	8005c98 <_dtoa_r+0x818>
 8005c88:	ee18 1a10 	vmov	r1, s16
 8005c8c:	461a      	mov	r2, r3
 8005c8e:	4620      	mov	r0, r4
 8005c90:	f000 fe30 	bl	80068f4 <__lshift>
 8005c94:	ee08 0a10 	vmov	s16, r0
 8005c98:	9b05      	ldr	r3, [sp, #20]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	dd05      	ble.n	8005caa <_dtoa_r+0x82a>
 8005c9e:	4631      	mov	r1, r6
 8005ca0:	461a      	mov	r2, r3
 8005ca2:	4620      	mov	r0, r4
 8005ca4:	f000 fe26 	bl	80068f4 <__lshift>
 8005ca8:	4606      	mov	r6, r0
 8005caa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d06e      	beq.n	8005d8e <_dtoa_r+0x90e>
 8005cb0:	ee18 0a10 	vmov	r0, s16
 8005cb4:	4631      	mov	r1, r6
 8005cb6:	f000 fe8d 	bl	80069d4 <__mcmp>
 8005cba:	2800      	cmp	r0, #0
 8005cbc:	da67      	bge.n	8005d8e <_dtoa_r+0x90e>
 8005cbe:	9b00      	ldr	r3, [sp, #0]
 8005cc0:	3b01      	subs	r3, #1
 8005cc2:	ee18 1a10 	vmov	r1, s16
 8005cc6:	9300      	str	r3, [sp, #0]
 8005cc8:	220a      	movs	r2, #10
 8005cca:	2300      	movs	r3, #0
 8005ccc:	4620      	mov	r0, r4
 8005cce:	f000 fc61 	bl	8006594 <__multadd>
 8005cd2:	9b08      	ldr	r3, [sp, #32]
 8005cd4:	ee08 0a10 	vmov	s16, r0
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	f000 81b1 	beq.w	8006040 <_dtoa_r+0xbc0>
 8005cde:	2300      	movs	r3, #0
 8005ce0:	4639      	mov	r1, r7
 8005ce2:	220a      	movs	r2, #10
 8005ce4:	4620      	mov	r0, r4
 8005ce6:	f000 fc55 	bl	8006594 <__multadd>
 8005cea:	9b02      	ldr	r3, [sp, #8]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	4607      	mov	r7, r0
 8005cf0:	f300 808e 	bgt.w	8005e10 <_dtoa_r+0x990>
 8005cf4:	9b06      	ldr	r3, [sp, #24]
 8005cf6:	2b02      	cmp	r3, #2
 8005cf8:	dc51      	bgt.n	8005d9e <_dtoa_r+0x91e>
 8005cfa:	e089      	b.n	8005e10 <_dtoa_r+0x990>
 8005cfc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005cfe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005d02:	e74b      	b.n	8005b9c <_dtoa_r+0x71c>
 8005d04:	9b03      	ldr	r3, [sp, #12]
 8005d06:	1e5e      	subs	r6, r3, #1
 8005d08:	9b07      	ldr	r3, [sp, #28]
 8005d0a:	42b3      	cmp	r3, r6
 8005d0c:	bfbf      	itttt	lt
 8005d0e:	9b07      	ldrlt	r3, [sp, #28]
 8005d10:	9607      	strlt	r6, [sp, #28]
 8005d12:	1af2      	sublt	r2, r6, r3
 8005d14:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005d16:	bfb6      	itet	lt
 8005d18:	189b      	addlt	r3, r3, r2
 8005d1a:	1b9e      	subge	r6, r3, r6
 8005d1c:	930a      	strlt	r3, [sp, #40]	; 0x28
 8005d1e:	9b03      	ldr	r3, [sp, #12]
 8005d20:	bfb8      	it	lt
 8005d22:	2600      	movlt	r6, #0
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	bfb7      	itett	lt
 8005d28:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8005d2c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8005d30:	1a9d      	sublt	r5, r3, r2
 8005d32:	2300      	movlt	r3, #0
 8005d34:	e734      	b.n	8005ba0 <_dtoa_r+0x720>
 8005d36:	9e07      	ldr	r6, [sp, #28]
 8005d38:	9d04      	ldr	r5, [sp, #16]
 8005d3a:	9f08      	ldr	r7, [sp, #32]
 8005d3c:	e73b      	b.n	8005bb6 <_dtoa_r+0x736>
 8005d3e:	9a07      	ldr	r2, [sp, #28]
 8005d40:	e767      	b.n	8005c12 <_dtoa_r+0x792>
 8005d42:	9b06      	ldr	r3, [sp, #24]
 8005d44:	2b01      	cmp	r3, #1
 8005d46:	dc18      	bgt.n	8005d7a <_dtoa_r+0x8fa>
 8005d48:	f1ba 0f00 	cmp.w	sl, #0
 8005d4c:	d115      	bne.n	8005d7a <_dtoa_r+0x8fa>
 8005d4e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005d52:	b993      	cbnz	r3, 8005d7a <_dtoa_r+0x8fa>
 8005d54:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005d58:	0d1b      	lsrs	r3, r3, #20
 8005d5a:	051b      	lsls	r3, r3, #20
 8005d5c:	b183      	cbz	r3, 8005d80 <_dtoa_r+0x900>
 8005d5e:	9b04      	ldr	r3, [sp, #16]
 8005d60:	3301      	adds	r3, #1
 8005d62:	9304      	str	r3, [sp, #16]
 8005d64:	9b05      	ldr	r3, [sp, #20]
 8005d66:	3301      	adds	r3, #1
 8005d68:	9305      	str	r3, [sp, #20]
 8005d6a:	f04f 0801 	mov.w	r8, #1
 8005d6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	f47f af6a 	bne.w	8005c4a <_dtoa_r+0x7ca>
 8005d76:	2001      	movs	r0, #1
 8005d78:	e76f      	b.n	8005c5a <_dtoa_r+0x7da>
 8005d7a:	f04f 0800 	mov.w	r8, #0
 8005d7e:	e7f6      	b.n	8005d6e <_dtoa_r+0x8ee>
 8005d80:	4698      	mov	r8, r3
 8005d82:	e7f4      	b.n	8005d6e <_dtoa_r+0x8ee>
 8005d84:	f43f af7d 	beq.w	8005c82 <_dtoa_r+0x802>
 8005d88:	4618      	mov	r0, r3
 8005d8a:	301c      	adds	r0, #28
 8005d8c:	e772      	b.n	8005c74 <_dtoa_r+0x7f4>
 8005d8e:	9b03      	ldr	r3, [sp, #12]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	dc37      	bgt.n	8005e04 <_dtoa_r+0x984>
 8005d94:	9b06      	ldr	r3, [sp, #24]
 8005d96:	2b02      	cmp	r3, #2
 8005d98:	dd34      	ble.n	8005e04 <_dtoa_r+0x984>
 8005d9a:	9b03      	ldr	r3, [sp, #12]
 8005d9c:	9302      	str	r3, [sp, #8]
 8005d9e:	9b02      	ldr	r3, [sp, #8]
 8005da0:	b96b      	cbnz	r3, 8005dbe <_dtoa_r+0x93e>
 8005da2:	4631      	mov	r1, r6
 8005da4:	2205      	movs	r2, #5
 8005da6:	4620      	mov	r0, r4
 8005da8:	f000 fbf4 	bl	8006594 <__multadd>
 8005dac:	4601      	mov	r1, r0
 8005dae:	4606      	mov	r6, r0
 8005db0:	ee18 0a10 	vmov	r0, s16
 8005db4:	f000 fe0e 	bl	80069d4 <__mcmp>
 8005db8:	2800      	cmp	r0, #0
 8005dba:	f73f adbb 	bgt.w	8005934 <_dtoa_r+0x4b4>
 8005dbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005dc0:	9d01      	ldr	r5, [sp, #4]
 8005dc2:	43db      	mvns	r3, r3
 8005dc4:	9300      	str	r3, [sp, #0]
 8005dc6:	f04f 0800 	mov.w	r8, #0
 8005dca:	4631      	mov	r1, r6
 8005dcc:	4620      	mov	r0, r4
 8005dce:	f000 fbbf 	bl	8006550 <_Bfree>
 8005dd2:	2f00      	cmp	r7, #0
 8005dd4:	f43f aea4 	beq.w	8005b20 <_dtoa_r+0x6a0>
 8005dd8:	f1b8 0f00 	cmp.w	r8, #0
 8005ddc:	d005      	beq.n	8005dea <_dtoa_r+0x96a>
 8005dde:	45b8      	cmp	r8, r7
 8005de0:	d003      	beq.n	8005dea <_dtoa_r+0x96a>
 8005de2:	4641      	mov	r1, r8
 8005de4:	4620      	mov	r0, r4
 8005de6:	f000 fbb3 	bl	8006550 <_Bfree>
 8005dea:	4639      	mov	r1, r7
 8005dec:	4620      	mov	r0, r4
 8005dee:	f000 fbaf 	bl	8006550 <_Bfree>
 8005df2:	e695      	b.n	8005b20 <_dtoa_r+0x6a0>
 8005df4:	2600      	movs	r6, #0
 8005df6:	4637      	mov	r7, r6
 8005df8:	e7e1      	b.n	8005dbe <_dtoa_r+0x93e>
 8005dfa:	9700      	str	r7, [sp, #0]
 8005dfc:	4637      	mov	r7, r6
 8005dfe:	e599      	b.n	8005934 <_dtoa_r+0x4b4>
 8005e00:	40240000 	.word	0x40240000
 8005e04:	9b08      	ldr	r3, [sp, #32]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	f000 80ca 	beq.w	8005fa0 <_dtoa_r+0xb20>
 8005e0c:	9b03      	ldr	r3, [sp, #12]
 8005e0e:	9302      	str	r3, [sp, #8]
 8005e10:	2d00      	cmp	r5, #0
 8005e12:	dd05      	ble.n	8005e20 <_dtoa_r+0x9a0>
 8005e14:	4639      	mov	r1, r7
 8005e16:	462a      	mov	r2, r5
 8005e18:	4620      	mov	r0, r4
 8005e1a:	f000 fd6b 	bl	80068f4 <__lshift>
 8005e1e:	4607      	mov	r7, r0
 8005e20:	f1b8 0f00 	cmp.w	r8, #0
 8005e24:	d05b      	beq.n	8005ede <_dtoa_r+0xa5e>
 8005e26:	6879      	ldr	r1, [r7, #4]
 8005e28:	4620      	mov	r0, r4
 8005e2a:	f000 fb51 	bl	80064d0 <_Balloc>
 8005e2e:	4605      	mov	r5, r0
 8005e30:	b928      	cbnz	r0, 8005e3e <_dtoa_r+0x9be>
 8005e32:	4b87      	ldr	r3, [pc, #540]	; (8006050 <_dtoa_r+0xbd0>)
 8005e34:	4602      	mov	r2, r0
 8005e36:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005e3a:	f7ff bb3b 	b.w	80054b4 <_dtoa_r+0x34>
 8005e3e:	693a      	ldr	r2, [r7, #16]
 8005e40:	3202      	adds	r2, #2
 8005e42:	0092      	lsls	r2, r2, #2
 8005e44:	f107 010c 	add.w	r1, r7, #12
 8005e48:	300c      	adds	r0, #12
 8005e4a:	f000 fb33 	bl	80064b4 <memcpy>
 8005e4e:	2201      	movs	r2, #1
 8005e50:	4629      	mov	r1, r5
 8005e52:	4620      	mov	r0, r4
 8005e54:	f000 fd4e 	bl	80068f4 <__lshift>
 8005e58:	9b01      	ldr	r3, [sp, #4]
 8005e5a:	f103 0901 	add.w	r9, r3, #1
 8005e5e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8005e62:	4413      	add	r3, r2
 8005e64:	9305      	str	r3, [sp, #20]
 8005e66:	f00a 0301 	and.w	r3, sl, #1
 8005e6a:	46b8      	mov	r8, r7
 8005e6c:	9304      	str	r3, [sp, #16]
 8005e6e:	4607      	mov	r7, r0
 8005e70:	4631      	mov	r1, r6
 8005e72:	ee18 0a10 	vmov	r0, s16
 8005e76:	f7ff fa75 	bl	8005364 <quorem>
 8005e7a:	4641      	mov	r1, r8
 8005e7c:	9002      	str	r0, [sp, #8]
 8005e7e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8005e82:	ee18 0a10 	vmov	r0, s16
 8005e86:	f000 fda5 	bl	80069d4 <__mcmp>
 8005e8a:	463a      	mov	r2, r7
 8005e8c:	9003      	str	r0, [sp, #12]
 8005e8e:	4631      	mov	r1, r6
 8005e90:	4620      	mov	r0, r4
 8005e92:	f000 fdbb 	bl	8006a0c <__mdiff>
 8005e96:	68c2      	ldr	r2, [r0, #12]
 8005e98:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8005e9c:	4605      	mov	r5, r0
 8005e9e:	bb02      	cbnz	r2, 8005ee2 <_dtoa_r+0xa62>
 8005ea0:	4601      	mov	r1, r0
 8005ea2:	ee18 0a10 	vmov	r0, s16
 8005ea6:	f000 fd95 	bl	80069d4 <__mcmp>
 8005eaa:	4602      	mov	r2, r0
 8005eac:	4629      	mov	r1, r5
 8005eae:	4620      	mov	r0, r4
 8005eb0:	9207      	str	r2, [sp, #28]
 8005eb2:	f000 fb4d 	bl	8006550 <_Bfree>
 8005eb6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8005eba:	ea43 0102 	orr.w	r1, r3, r2
 8005ebe:	9b04      	ldr	r3, [sp, #16]
 8005ec0:	430b      	orrs	r3, r1
 8005ec2:	464d      	mov	r5, r9
 8005ec4:	d10f      	bne.n	8005ee6 <_dtoa_r+0xa66>
 8005ec6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005eca:	d02a      	beq.n	8005f22 <_dtoa_r+0xaa2>
 8005ecc:	9b03      	ldr	r3, [sp, #12]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	dd02      	ble.n	8005ed8 <_dtoa_r+0xa58>
 8005ed2:	9b02      	ldr	r3, [sp, #8]
 8005ed4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8005ed8:	f88b a000 	strb.w	sl, [fp]
 8005edc:	e775      	b.n	8005dca <_dtoa_r+0x94a>
 8005ede:	4638      	mov	r0, r7
 8005ee0:	e7ba      	b.n	8005e58 <_dtoa_r+0x9d8>
 8005ee2:	2201      	movs	r2, #1
 8005ee4:	e7e2      	b.n	8005eac <_dtoa_r+0xa2c>
 8005ee6:	9b03      	ldr	r3, [sp, #12]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	db04      	blt.n	8005ef6 <_dtoa_r+0xa76>
 8005eec:	9906      	ldr	r1, [sp, #24]
 8005eee:	430b      	orrs	r3, r1
 8005ef0:	9904      	ldr	r1, [sp, #16]
 8005ef2:	430b      	orrs	r3, r1
 8005ef4:	d122      	bne.n	8005f3c <_dtoa_r+0xabc>
 8005ef6:	2a00      	cmp	r2, #0
 8005ef8:	ddee      	ble.n	8005ed8 <_dtoa_r+0xa58>
 8005efa:	ee18 1a10 	vmov	r1, s16
 8005efe:	2201      	movs	r2, #1
 8005f00:	4620      	mov	r0, r4
 8005f02:	f000 fcf7 	bl	80068f4 <__lshift>
 8005f06:	4631      	mov	r1, r6
 8005f08:	ee08 0a10 	vmov	s16, r0
 8005f0c:	f000 fd62 	bl	80069d4 <__mcmp>
 8005f10:	2800      	cmp	r0, #0
 8005f12:	dc03      	bgt.n	8005f1c <_dtoa_r+0xa9c>
 8005f14:	d1e0      	bne.n	8005ed8 <_dtoa_r+0xa58>
 8005f16:	f01a 0f01 	tst.w	sl, #1
 8005f1a:	d0dd      	beq.n	8005ed8 <_dtoa_r+0xa58>
 8005f1c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005f20:	d1d7      	bne.n	8005ed2 <_dtoa_r+0xa52>
 8005f22:	2339      	movs	r3, #57	; 0x39
 8005f24:	f88b 3000 	strb.w	r3, [fp]
 8005f28:	462b      	mov	r3, r5
 8005f2a:	461d      	mov	r5, r3
 8005f2c:	3b01      	subs	r3, #1
 8005f2e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005f32:	2a39      	cmp	r2, #57	; 0x39
 8005f34:	d071      	beq.n	800601a <_dtoa_r+0xb9a>
 8005f36:	3201      	adds	r2, #1
 8005f38:	701a      	strb	r2, [r3, #0]
 8005f3a:	e746      	b.n	8005dca <_dtoa_r+0x94a>
 8005f3c:	2a00      	cmp	r2, #0
 8005f3e:	dd07      	ble.n	8005f50 <_dtoa_r+0xad0>
 8005f40:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005f44:	d0ed      	beq.n	8005f22 <_dtoa_r+0xaa2>
 8005f46:	f10a 0301 	add.w	r3, sl, #1
 8005f4a:	f88b 3000 	strb.w	r3, [fp]
 8005f4e:	e73c      	b.n	8005dca <_dtoa_r+0x94a>
 8005f50:	9b05      	ldr	r3, [sp, #20]
 8005f52:	f809 ac01 	strb.w	sl, [r9, #-1]
 8005f56:	4599      	cmp	r9, r3
 8005f58:	d047      	beq.n	8005fea <_dtoa_r+0xb6a>
 8005f5a:	ee18 1a10 	vmov	r1, s16
 8005f5e:	2300      	movs	r3, #0
 8005f60:	220a      	movs	r2, #10
 8005f62:	4620      	mov	r0, r4
 8005f64:	f000 fb16 	bl	8006594 <__multadd>
 8005f68:	45b8      	cmp	r8, r7
 8005f6a:	ee08 0a10 	vmov	s16, r0
 8005f6e:	f04f 0300 	mov.w	r3, #0
 8005f72:	f04f 020a 	mov.w	r2, #10
 8005f76:	4641      	mov	r1, r8
 8005f78:	4620      	mov	r0, r4
 8005f7a:	d106      	bne.n	8005f8a <_dtoa_r+0xb0a>
 8005f7c:	f000 fb0a 	bl	8006594 <__multadd>
 8005f80:	4680      	mov	r8, r0
 8005f82:	4607      	mov	r7, r0
 8005f84:	f109 0901 	add.w	r9, r9, #1
 8005f88:	e772      	b.n	8005e70 <_dtoa_r+0x9f0>
 8005f8a:	f000 fb03 	bl	8006594 <__multadd>
 8005f8e:	4639      	mov	r1, r7
 8005f90:	4680      	mov	r8, r0
 8005f92:	2300      	movs	r3, #0
 8005f94:	220a      	movs	r2, #10
 8005f96:	4620      	mov	r0, r4
 8005f98:	f000 fafc 	bl	8006594 <__multadd>
 8005f9c:	4607      	mov	r7, r0
 8005f9e:	e7f1      	b.n	8005f84 <_dtoa_r+0xb04>
 8005fa0:	9b03      	ldr	r3, [sp, #12]
 8005fa2:	9302      	str	r3, [sp, #8]
 8005fa4:	9d01      	ldr	r5, [sp, #4]
 8005fa6:	ee18 0a10 	vmov	r0, s16
 8005faa:	4631      	mov	r1, r6
 8005fac:	f7ff f9da 	bl	8005364 <quorem>
 8005fb0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8005fb4:	9b01      	ldr	r3, [sp, #4]
 8005fb6:	f805 ab01 	strb.w	sl, [r5], #1
 8005fba:	1aea      	subs	r2, r5, r3
 8005fbc:	9b02      	ldr	r3, [sp, #8]
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	dd09      	ble.n	8005fd6 <_dtoa_r+0xb56>
 8005fc2:	ee18 1a10 	vmov	r1, s16
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	220a      	movs	r2, #10
 8005fca:	4620      	mov	r0, r4
 8005fcc:	f000 fae2 	bl	8006594 <__multadd>
 8005fd0:	ee08 0a10 	vmov	s16, r0
 8005fd4:	e7e7      	b.n	8005fa6 <_dtoa_r+0xb26>
 8005fd6:	9b02      	ldr	r3, [sp, #8]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	bfc8      	it	gt
 8005fdc:	461d      	movgt	r5, r3
 8005fde:	9b01      	ldr	r3, [sp, #4]
 8005fe0:	bfd8      	it	le
 8005fe2:	2501      	movle	r5, #1
 8005fe4:	441d      	add	r5, r3
 8005fe6:	f04f 0800 	mov.w	r8, #0
 8005fea:	ee18 1a10 	vmov	r1, s16
 8005fee:	2201      	movs	r2, #1
 8005ff0:	4620      	mov	r0, r4
 8005ff2:	f000 fc7f 	bl	80068f4 <__lshift>
 8005ff6:	4631      	mov	r1, r6
 8005ff8:	ee08 0a10 	vmov	s16, r0
 8005ffc:	f000 fcea 	bl	80069d4 <__mcmp>
 8006000:	2800      	cmp	r0, #0
 8006002:	dc91      	bgt.n	8005f28 <_dtoa_r+0xaa8>
 8006004:	d102      	bne.n	800600c <_dtoa_r+0xb8c>
 8006006:	f01a 0f01 	tst.w	sl, #1
 800600a:	d18d      	bne.n	8005f28 <_dtoa_r+0xaa8>
 800600c:	462b      	mov	r3, r5
 800600e:	461d      	mov	r5, r3
 8006010:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006014:	2a30      	cmp	r2, #48	; 0x30
 8006016:	d0fa      	beq.n	800600e <_dtoa_r+0xb8e>
 8006018:	e6d7      	b.n	8005dca <_dtoa_r+0x94a>
 800601a:	9a01      	ldr	r2, [sp, #4]
 800601c:	429a      	cmp	r2, r3
 800601e:	d184      	bne.n	8005f2a <_dtoa_r+0xaaa>
 8006020:	9b00      	ldr	r3, [sp, #0]
 8006022:	3301      	adds	r3, #1
 8006024:	9300      	str	r3, [sp, #0]
 8006026:	2331      	movs	r3, #49	; 0x31
 8006028:	7013      	strb	r3, [r2, #0]
 800602a:	e6ce      	b.n	8005dca <_dtoa_r+0x94a>
 800602c:	4b09      	ldr	r3, [pc, #36]	; (8006054 <_dtoa_r+0xbd4>)
 800602e:	f7ff ba95 	b.w	800555c <_dtoa_r+0xdc>
 8006032:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006034:	2b00      	cmp	r3, #0
 8006036:	f47f aa6e 	bne.w	8005516 <_dtoa_r+0x96>
 800603a:	4b07      	ldr	r3, [pc, #28]	; (8006058 <_dtoa_r+0xbd8>)
 800603c:	f7ff ba8e 	b.w	800555c <_dtoa_r+0xdc>
 8006040:	9b02      	ldr	r3, [sp, #8]
 8006042:	2b00      	cmp	r3, #0
 8006044:	dcae      	bgt.n	8005fa4 <_dtoa_r+0xb24>
 8006046:	9b06      	ldr	r3, [sp, #24]
 8006048:	2b02      	cmp	r3, #2
 800604a:	f73f aea8 	bgt.w	8005d9e <_dtoa_r+0x91e>
 800604e:	e7a9      	b.n	8005fa4 <_dtoa_r+0xb24>
 8006050:	080074d3 	.word	0x080074d3
 8006054:	08007430 	.word	0x08007430
 8006058:	08007454 	.word	0x08007454

0800605c <__sflush_r>:
 800605c:	898a      	ldrh	r2, [r1, #12]
 800605e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006062:	4605      	mov	r5, r0
 8006064:	0710      	lsls	r0, r2, #28
 8006066:	460c      	mov	r4, r1
 8006068:	d458      	bmi.n	800611c <__sflush_r+0xc0>
 800606a:	684b      	ldr	r3, [r1, #4]
 800606c:	2b00      	cmp	r3, #0
 800606e:	dc05      	bgt.n	800607c <__sflush_r+0x20>
 8006070:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006072:	2b00      	cmp	r3, #0
 8006074:	dc02      	bgt.n	800607c <__sflush_r+0x20>
 8006076:	2000      	movs	r0, #0
 8006078:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800607c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800607e:	2e00      	cmp	r6, #0
 8006080:	d0f9      	beq.n	8006076 <__sflush_r+0x1a>
 8006082:	2300      	movs	r3, #0
 8006084:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006088:	682f      	ldr	r7, [r5, #0]
 800608a:	602b      	str	r3, [r5, #0]
 800608c:	d032      	beq.n	80060f4 <__sflush_r+0x98>
 800608e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006090:	89a3      	ldrh	r3, [r4, #12]
 8006092:	075a      	lsls	r2, r3, #29
 8006094:	d505      	bpl.n	80060a2 <__sflush_r+0x46>
 8006096:	6863      	ldr	r3, [r4, #4]
 8006098:	1ac0      	subs	r0, r0, r3
 800609a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800609c:	b10b      	cbz	r3, 80060a2 <__sflush_r+0x46>
 800609e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80060a0:	1ac0      	subs	r0, r0, r3
 80060a2:	2300      	movs	r3, #0
 80060a4:	4602      	mov	r2, r0
 80060a6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80060a8:	6a21      	ldr	r1, [r4, #32]
 80060aa:	4628      	mov	r0, r5
 80060ac:	47b0      	blx	r6
 80060ae:	1c43      	adds	r3, r0, #1
 80060b0:	89a3      	ldrh	r3, [r4, #12]
 80060b2:	d106      	bne.n	80060c2 <__sflush_r+0x66>
 80060b4:	6829      	ldr	r1, [r5, #0]
 80060b6:	291d      	cmp	r1, #29
 80060b8:	d82c      	bhi.n	8006114 <__sflush_r+0xb8>
 80060ba:	4a2a      	ldr	r2, [pc, #168]	; (8006164 <__sflush_r+0x108>)
 80060bc:	40ca      	lsrs	r2, r1
 80060be:	07d6      	lsls	r6, r2, #31
 80060c0:	d528      	bpl.n	8006114 <__sflush_r+0xb8>
 80060c2:	2200      	movs	r2, #0
 80060c4:	6062      	str	r2, [r4, #4]
 80060c6:	04d9      	lsls	r1, r3, #19
 80060c8:	6922      	ldr	r2, [r4, #16]
 80060ca:	6022      	str	r2, [r4, #0]
 80060cc:	d504      	bpl.n	80060d8 <__sflush_r+0x7c>
 80060ce:	1c42      	adds	r2, r0, #1
 80060d0:	d101      	bne.n	80060d6 <__sflush_r+0x7a>
 80060d2:	682b      	ldr	r3, [r5, #0]
 80060d4:	b903      	cbnz	r3, 80060d8 <__sflush_r+0x7c>
 80060d6:	6560      	str	r0, [r4, #84]	; 0x54
 80060d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80060da:	602f      	str	r7, [r5, #0]
 80060dc:	2900      	cmp	r1, #0
 80060de:	d0ca      	beq.n	8006076 <__sflush_r+0x1a>
 80060e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80060e4:	4299      	cmp	r1, r3
 80060e6:	d002      	beq.n	80060ee <__sflush_r+0x92>
 80060e8:	4628      	mov	r0, r5
 80060ea:	f000 fd8b 	bl	8006c04 <_free_r>
 80060ee:	2000      	movs	r0, #0
 80060f0:	6360      	str	r0, [r4, #52]	; 0x34
 80060f2:	e7c1      	b.n	8006078 <__sflush_r+0x1c>
 80060f4:	6a21      	ldr	r1, [r4, #32]
 80060f6:	2301      	movs	r3, #1
 80060f8:	4628      	mov	r0, r5
 80060fa:	47b0      	blx	r6
 80060fc:	1c41      	adds	r1, r0, #1
 80060fe:	d1c7      	bne.n	8006090 <__sflush_r+0x34>
 8006100:	682b      	ldr	r3, [r5, #0]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d0c4      	beq.n	8006090 <__sflush_r+0x34>
 8006106:	2b1d      	cmp	r3, #29
 8006108:	d001      	beq.n	800610e <__sflush_r+0xb2>
 800610a:	2b16      	cmp	r3, #22
 800610c:	d101      	bne.n	8006112 <__sflush_r+0xb6>
 800610e:	602f      	str	r7, [r5, #0]
 8006110:	e7b1      	b.n	8006076 <__sflush_r+0x1a>
 8006112:	89a3      	ldrh	r3, [r4, #12]
 8006114:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006118:	81a3      	strh	r3, [r4, #12]
 800611a:	e7ad      	b.n	8006078 <__sflush_r+0x1c>
 800611c:	690f      	ldr	r7, [r1, #16]
 800611e:	2f00      	cmp	r7, #0
 8006120:	d0a9      	beq.n	8006076 <__sflush_r+0x1a>
 8006122:	0793      	lsls	r3, r2, #30
 8006124:	680e      	ldr	r6, [r1, #0]
 8006126:	bf08      	it	eq
 8006128:	694b      	ldreq	r3, [r1, #20]
 800612a:	600f      	str	r7, [r1, #0]
 800612c:	bf18      	it	ne
 800612e:	2300      	movne	r3, #0
 8006130:	eba6 0807 	sub.w	r8, r6, r7
 8006134:	608b      	str	r3, [r1, #8]
 8006136:	f1b8 0f00 	cmp.w	r8, #0
 800613a:	dd9c      	ble.n	8006076 <__sflush_r+0x1a>
 800613c:	6a21      	ldr	r1, [r4, #32]
 800613e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006140:	4643      	mov	r3, r8
 8006142:	463a      	mov	r2, r7
 8006144:	4628      	mov	r0, r5
 8006146:	47b0      	blx	r6
 8006148:	2800      	cmp	r0, #0
 800614a:	dc06      	bgt.n	800615a <__sflush_r+0xfe>
 800614c:	89a3      	ldrh	r3, [r4, #12]
 800614e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006152:	81a3      	strh	r3, [r4, #12]
 8006154:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006158:	e78e      	b.n	8006078 <__sflush_r+0x1c>
 800615a:	4407      	add	r7, r0
 800615c:	eba8 0800 	sub.w	r8, r8, r0
 8006160:	e7e9      	b.n	8006136 <__sflush_r+0xda>
 8006162:	bf00      	nop
 8006164:	20400001 	.word	0x20400001

08006168 <_fflush_r>:
 8006168:	b538      	push	{r3, r4, r5, lr}
 800616a:	690b      	ldr	r3, [r1, #16]
 800616c:	4605      	mov	r5, r0
 800616e:	460c      	mov	r4, r1
 8006170:	b913      	cbnz	r3, 8006178 <_fflush_r+0x10>
 8006172:	2500      	movs	r5, #0
 8006174:	4628      	mov	r0, r5
 8006176:	bd38      	pop	{r3, r4, r5, pc}
 8006178:	b118      	cbz	r0, 8006182 <_fflush_r+0x1a>
 800617a:	6983      	ldr	r3, [r0, #24]
 800617c:	b90b      	cbnz	r3, 8006182 <_fflush_r+0x1a>
 800617e:	f000 f887 	bl	8006290 <__sinit>
 8006182:	4b14      	ldr	r3, [pc, #80]	; (80061d4 <_fflush_r+0x6c>)
 8006184:	429c      	cmp	r4, r3
 8006186:	d11b      	bne.n	80061c0 <_fflush_r+0x58>
 8006188:	686c      	ldr	r4, [r5, #4]
 800618a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d0ef      	beq.n	8006172 <_fflush_r+0xa>
 8006192:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006194:	07d0      	lsls	r0, r2, #31
 8006196:	d404      	bmi.n	80061a2 <_fflush_r+0x3a>
 8006198:	0599      	lsls	r1, r3, #22
 800619a:	d402      	bmi.n	80061a2 <_fflush_r+0x3a>
 800619c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800619e:	f000 f91a 	bl	80063d6 <__retarget_lock_acquire_recursive>
 80061a2:	4628      	mov	r0, r5
 80061a4:	4621      	mov	r1, r4
 80061a6:	f7ff ff59 	bl	800605c <__sflush_r>
 80061aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80061ac:	07da      	lsls	r2, r3, #31
 80061ae:	4605      	mov	r5, r0
 80061b0:	d4e0      	bmi.n	8006174 <_fflush_r+0xc>
 80061b2:	89a3      	ldrh	r3, [r4, #12]
 80061b4:	059b      	lsls	r3, r3, #22
 80061b6:	d4dd      	bmi.n	8006174 <_fflush_r+0xc>
 80061b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80061ba:	f000 f90d 	bl	80063d8 <__retarget_lock_release_recursive>
 80061be:	e7d9      	b.n	8006174 <_fflush_r+0xc>
 80061c0:	4b05      	ldr	r3, [pc, #20]	; (80061d8 <_fflush_r+0x70>)
 80061c2:	429c      	cmp	r4, r3
 80061c4:	d101      	bne.n	80061ca <_fflush_r+0x62>
 80061c6:	68ac      	ldr	r4, [r5, #8]
 80061c8:	e7df      	b.n	800618a <_fflush_r+0x22>
 80061ca:	4b04      	ldr	r3, [pc, #16]	; (80061dc <_fflush_r+0x74>)
 80061cc:	429c      	cmp	r4, r3
 80061ce:	bf08      	it	eq
 80061d0:	68ec      	ldreq	r4, [r5, #12]
 80061d2:	e7da      	b.n	800618a <_fflush_r+0x22>
 80061d4:	08007504 	.word	0x08007504
 80061d8:	08007524 	.word	0x08007524
 80061dc:	080074e4 	.word	0x080074e4

080061e0 <std>:
 80061e0:	2300      	movs	r3, #0
 80061e2:	b510      	push	{r4, lr}
 80061e4:	4604      	mov	r4, r0
 80061e6:	e9c0 3300 	strd	r3, r3, [r0]
 80061ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80061ee:	6083      	str	r3, [r0, #8]
 80061f0:	8181      	strh	r1, [r0, #12]
 80061f2:	6643      	str	r3, [r0, #100]	; 0x64
 80061f4:	81c2      	strh	r2, [r0, #14]
 80061f6:	6183      	str	r3, [r0, #24]
 80061f8:	4619      	mov	r1, r3
 80061fa:	2208      	movs	r2, #8
 80061fc:	305c      	adds	r0, #92	; 0x5c
 80061fe:	f7fe fa2b 	bl	8004658 <memset>
 8006202:	4b05      	ldr	r3, [pc, #20]	; (8006218 <std+0x38>)
 8006204:	6263      	str	r3, [r4, #36]	; 0x24
 8006206:	4b05      	ldr	r3, [pc, #20]	; (800621c <std+0x3c>)
 8006208:	62a3      	str	r3, [r4, #40]	; 0x28
 800620a:	4b05      	ldr	r3, [pc, #20]	; (8006220 <std+0x40>)
 800620c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800620e:	4b05      	ldr	r3, [pc, #20]	; (8006224 <std+0x44>)
 8006210:	6224      	str	r4, [r4, #32]
 8006212:	6323      	str	r3, [r4, #48]	; 0x30
 8006214:	bd10      	pop	{r4, pc}
 8006216:	bf00      	nop
 8006218:	08007099 	.word	0x08007099
 800621c:	080070bb 	.word	0x080070bb
 8006220:	080070f3 	.word	0x080070f3
 8006224:	08007117 	.word	0x08007117

08006228 <_cleanup_r>:
 8006228:	4901      	ldr	r1, [pc, #4]	; (8006230 <_cleanup_r+0x8>)
 800622a:	f000 b8af 	b.w	800638c <_fwalk_reent>
 800622e:	bf00      	nop
 8006230:	08006169 	.word	0x08006169

08006234 <__sfmoreglue>:
 8006234:	b570      	push	{r4, r5, r6, lr}
 8006236:	2268      	movs	r2, #104	; 0x68
 8006238:	1e4d      	subs	r5, r1, #1
 800623a:	4355      	muls	r5, r2
 800623c:	460e      	mov	r6, r1
 800623e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006242:	f000 fd4b 	bl	8006cdc <_malloc_r>
 8006246:	4604      	mov	r4, r0
 8006248:	b140      	cbz	r0, 800625c <__sfmoreglue+0x28>
 800624a:	2100      	movs	r1, #0
 800624c:	e9c0 1600 	strd	r1, r6, [r0]
 8006250:	300c      	adds	r0, #12
 8006252:	60a0      	str	r0, [r4, #8]
 8006254:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006258:	f7fe f9fe 	bl	8004658 <memset>
 800625c:	4620      	mov	r0, r4
 800625e:	bd70      	pop	{r4, r5, r6, pc}

08006260 <__sfp_lock_acquire>:
 8006260:	4801      	ldr	r0, [pc, #4]	; (8006268 <__sfp_lock_acquire+0x8>)
 8006262:	f000 b8b8 	b.w	80063d6 <__retarget_lock_acquire_recursive>
 8006266:	bf00      	nop
 8006268:	20000361 	.word	0x20000361

0800626c <__sfp_lock_release>:
 800626c:	4801      	ldr	r0, [pc, #4]	; (8006274 <__sfp_lock_release+0x8>)
 800626e:	f000 b8b3 	b.w	80063d8 <__retarget_lock_release_recursive>
 8006272:	bf00      	nop
 8006274:	20000361 	.word	0x20000361

08006278 <__sinit_lock_acquire>:
 8006278:	4801      	ldr	r0, [pc, #4]	; (8006280 <__sinit_lock_acquire+0x8>)
 800627a:	f000 b8ac 	b.w	80063d6 <__retarget_lock_acquire_recursive>
 800627e:	bf00      	nop
 8006280:	20000362 	.word	0x20000362

08006284 <__sinit_lock_release>:
 8006284:	4801      	ldr	r0, [pc, #4]	; (800628c <__sinit_lock_release+0x8>)
 8006286:	f000 b8a7 	b.w	80063d8 <__retarget_lock_release_recursive>
 800628a:	bf00      	nop
 800628c:	20000362 	.word	0x20000362

08006290 <__sinit>:
 8006290:	b510      	push	{r4, lr}
 8006292:	4604      	mov	r4, r0
 8006294:	f7ff fff0 	bl	8006278 <__sinit_lock_acquire>
 8006298:	69a3      	ldr	r3, [r4, #24]
 800629a:	b11b      	cbz	r3, 80062a4 <__sinit+0x14>
 800629c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80062a0:	f7ff bff0 	b.w	8006284 <__sinit_lock_release>
 80062a4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80062a8:	6523      	str	r3, [r4, #80]	; 0x50
 80062aa:	4b13      	ldr	r3, [pc, #76]	; (80062f8 <__sinit+0x68>)
 80062ac:	4a13      	ldr	r2, [pc, #76]	; (80062fc <__sinit+0x6c>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	62a2      	str	r2, [r4, #40]	; 0x28
 80062b2:	42a3      	cmp	r3, r4
 80062b4:	bf04      	itt	eq
 80062b6:	2301      	moveq	r3, #1
 80062b8:	61a3      	streq	r3, [r4, #24]
 80062ba:	4620      	mov	r0, r4
 80062bc:	f000 f820 	bl	8006300 <__sfp>
 80062c0:	6060      	str	r0, [r4, #4]
 80062c2:	4620      	mov	r0, r4
 80062c4:	f000 f81c 	bl	8006300 <__sfp>
 80062c8:	60a0      	str	r0, [r4, #8]
 80062ca:	4620      	mov	r0, r4
 80062cc:	f000 f818 	bl	8006300 <__sfp>
 80062d0:	2200      	movs	r2, #0
 80062d2:	60e0      	str	r0, [r4, #12]
 80062d4:	2104      	movs	r1, #4
 80062d6:	6860      	ldr	r0, [r4, #4]
 80062d8:	f7ff ff82 	bl	80061e0 <std>
 80062dc:	68a0      	ldr	r0, [r4, #8]
 80062de:	2201      	movs	r2, #1
 80062e0:	2109      	movs	r1, #9
 80062e2:	f7ff ff7d 	bl	80061e0 <std>
 80062e6:	68e0      	ldr	r0, [r4, #12]
 80062e8:	2202      	movs	r2, #2
 80062ea:	2112      	movs	r1, #18
 80062ec:	f7ff ff78 	bl	80061e0 <std>
 80062f0:	2301      	movs	r3, #1
 80062f2:	61a3      	str	r3, [r4, #24]
 80062f4:	e7d2      	b.n	800629c <__sinit+0xc>
 80062f6:	bf00      	nop
 80062f8:	0800741c 	.word	0x0800741c
 80062fc:	08006229 	.word	0x08006229

08006300 <__sfp>:
 8006300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006302:	4607      	mov	r7, r0
 8006304:	f7ff ffac 	bl	8006260 <__sfp_lock_acquire>
 8006308:	4b1e      	ldr	r3, [pc, #120]	; (8006384 <__sfp+0x84>)
 800630a:	681e      	ldr	r6, [r3, #0]
 800630c:	69b3      	ldr	r3, [r6, #24]
 800630e:	b913      	cbnz	r3, 8006316 <__sfp+0x16>
 8006310:	4630      	mov	r0, r6
 8006312:	f7ff ffbd 	bl	8006290 <__sinit>
 8006316:	3648      	adds	r6, #72	; 0x48
 8006318:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800631c:	3b01      	subs	r3, #1
 800631e:	d503      	bpl.n	8006328 <__sfp+0x28>
 8006320:	6833      	ldr	r3, [r6, #0]
 8006322:	b30b      	cbz	r3, 8006368 <__sfp+0x68>
 8006324:	6836      	ldr	r6, [r6, #0]
 8006326:	e7f7      	b.n	8006318 <__sfp+0x18>
 8006328:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800632c:	b9d5      	cbnz	r5, 8006364 <__sfp+0x64>
 800632e:	4b16      	ldr	r3, [pc, #88]	; (8006388 <__sfp+0x88>)
 8006330:	60e3      	str	r3, [r4, #12]
 8006332:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006336:	6665      	str	r5, [r4, #100]	; 0x64
 8006338:	f000 f84c 	bl	80063d4 <__retarget_lock_init_recursive>
 800633c:	f7ff ff96 	bl	800626c <__sfp_lock_release>
 8006340:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006344:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006348:	6025      	str	r5, [r4, #0]
 800634a:	61a5      	str	r5, [r4, #24]
 800634c:	2208      	movs	r2, #8
 800634e:	4629      	mov	r1, r5
 8006350:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006354:	f7fe f980 	bl	8004658 <memset>
 8006358:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800635c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006360:	4620      	mov	r0, r4
 8006362:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006364:	3468      	adds	r4, #104	; 0x68
 8006366:	e7d9      	b.n	800631c <__sfp+0x1c>
 8006368:	2104      	movs	r1, #4
 800636a:	4638      	mov	r0, r7
 800636c:	f7ff ff62 	bl	8006234 <__sfmoreglue>
 8006370:	4604      	mov	r4, r0
 8006372:	6030      	str	r0, [r6, #0]
 8006374:	2800      	cmp	r0, #0
 8006376:	d1d5      	bne.n	8006324 <__sfp+0x24>
 8006378:	f7ff ff78 	bl	800626c <__sfp_lock_release>
 800637c:	230c      	movs	r3, #12
 800637e:	603b      	str	r3, [r7, #0]
 8006380:	e7ee      	b.n	8006360 <__sfp+0x60>
 8006382:	bf00      	nop
 8006384:	0800741c 	.word	0x0800741c
 8006388:	ffff0001 	.word	0xffff0001

0800638c <_fwalk_reent>:
 800638c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006390:	4606      	mov	r6, r0
 8006392:	4688      	mov	r8, r1
 8006394:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006398:	2700      	movs	r7, #0
 800639a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800639e:	f1b9 0901 	subs.w	r9, r9, #1
 80063a2:	d505      	bpl.n	80063b0 <_fwalk_reent+0x24>
 80063a4:	6824      	ldr	r4, [r4, #0]
 80063a6:	2c00      	cmp	r4, #0
 80063a8:	d1f7      	bne.n	800639a <_fwalk_reent+0xe>
 80063aa:	4638      	mov	r0, r7
 80063ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80063b0:	89ab      	ldrh	r3, [r5, #12]
 80063b2:	2b01      	cmp	r3, #1
 80063b4:	d907      	bls.n	80063c6 <_fwalk_reent+0x3a>
 80063b6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80063ba:	3301      	adds	r3, #1
 80063bc:	d003      	beq.n	80063c6 <_fwalk_reent+0x3a>
 80063be:	4629      	mov	r1, r5
 80063c0:	4630      	mov	r0, r6
 80063c2:	47c0      	blx	r8
 80063c4:	4307      	orrs	r7, r0
 80063c6:	3568      	adds	r5, #104	; 0x68
 80063c8:	e7e9      	b.n	800639e <_fwalk_reent+0x12>
	...

080063cc <_localeconv_r>:
 80063cc:	4800      	ldr	r0, [pc, #0]	; (80063d0 <_localeconv_r+0x4>)
 80063ce:	4770      	bx	lr
 80063d0:	20000160 	.word	0x20000160

080063d4 <__retarget_lock_init_recursive>:
 80063d4:	4770      	bx	lr

080063d6 <__retarget_lock_acquire_recursive>:
 80063d6:	4770      	bx	lr

080063d8 <__retarget_lock_release_recursive>:
 80063d8:	4770      	bx	lr

080063da <__swhatbuf_r>:
 80063da:	b570      	push	{r4, r5, r6, lr}
 80063dc:	460e      	mov	r6, r1
 80063de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063e2:	2900      	cmp	r1, #0
 80063e4:	b096      	sub	sp, #88	; 0x58
 80063e6:	4614      	mov	r4, r2
 80063e8:	461d      	mov	r5, r3
 80063ea:	da08      	bge.n	80063fe <__swhatbuf_r+0x24>
 80063ec:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80063f0:	2200      	movs	r2, #0
 80063f2:	602a      	str	r2, [r5, #0]
 80063f4:	061a      	lsls	r2, r3, #24
 80063f6:	d410      	bmi.n	800641a <__swhatbuf_r+0x40>
 80063f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80063fc:	e00e      	b.n	800641c <__swhatbuf_r+0x42>
 80063fe:	466a      	mov	r2, sp
 8006400:	f000 fee0 	bl	80071c4 <_fstat_r>
 8006404:	2800      	cmp	r0, #0
 8006406:	dbf1      	blt.n	80063ec <__swhatbuf_r+0x12>
 8006408:	9a01      	ldr	r2, [sp, #4]
 800640a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800640e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006412:	425a      	negs	r2, r3
 8006414:	415a      	adcs	r2, r3
 8006416:	602a      	str	r2, [r5, #0]
 8006418:	e7ee      	b.n	80063f8 <__swhatbuf_r+0x1e>
 800641a:	2340      	movs	r3, #64	; 0x40
 800641c:	2000      	movs	r0, #0
 800641e:	6023      	str	r3, [r4, #0]
 8006420:	b016      	add	sp, #88	; 0x58
 8006422:	bd70      	pop	{r4, r5, r6, pc}

08006424 <__smakebuf_r>:
 8006424:	898b      	ldrh	r3, [r1, #12]
 8006426:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006428:	079d      	lsls	r5, r3, #30
 800642a:	4606      	mov	r6, r0
 800642c:	460c      	mov	r4, r1
 800642e:	d507      	bpl.n	8006440 <__smakebuf_r+0x1c>
 8006430:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006434:	6023      	str	r3, [r4, #0]
 8006436:	6123      	str	r3, [r4, #16]
 8006438:	2301      	movs	r3, #1
 800643a:	6163      	str	r3, [r4, #20]
 800643c:	b002      	add	sp, #8
 800643e:	bd70      	pop	{r4, r5, r6, pc}
 8006440:	ab01      	add	r3, sp, #4
 8006442:	466a      	mov	r2, sp
 8006444:	f7ff ffc9 	bl	80063da <__swhatbuf_r>
 8006448:	9900      	ldr	r1, [sp, #0]
 800644a:	4605      	mov	r5, r0
 800644c:	4630      	mov	r0, r6
 800644e:	f000 fc45 	bl	8006cdc <_malloc_r>
 8006452:	b948      	cbnz	r0, 8006468 <__smakebuf_r+0x44>
 8006454:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006458:	059a      	lsls	r2, r3, #22
 800645a:	d4ef      	bmi.n	800643c <__smakebuf_r+0x18>
 800645c:	f023 0303 	bic.w	r3, r3, #3
 8006460:	f043 0302 	orr.w	r3, r3, #2
 8006464:	81a3      	strh	r3, [r4, #12]
 8006466:	e7e3      	b.n	8006430 <__smakebuf_r+0xc>
 8006468:	4b0d      	ldr	r3, [pc, #52]	; (80064a0 <__smakebuf_r+0x7c>)
 800646a:	62b3      	str	r3, [r6, #40]	; 0x28
 800646c:	89a3      	ldrh	r3, [r4, #12]
 800646e:	6020      	str	r0, [r4, #0]
 8006470:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006474:	81a3      	strh	r3, [r4, #12]
 8006476:	9b00      	ldr	r3, [sp, #0]
 8006478:	6163      	str	r3, [r4, #20]
 800647a:	9b01      	ldr	r3, [sp, #4]
 800647c:	6120      	str	r0, [r4, #16]
 800647e:	b15b      	cbz	r3, 8006498 <__smakebuf_r+0x74>
 8006480:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006484:	4630      	mov	r0, r6
 8006486:	f000 feaf 	bl	80071e8 <_isatty_r>
 800648a:	b128      	cbz	r0, 8006498 <__smakebuf_r+0x74>
 800648c:	89a3      	ldrh	r3, [r4, #12]
 800648e:	f023 0303 	bic.w	r3, r3, #3
 8006492:	f043 0301 	orr.w	r3, r3, #1
 8006496:	81a3      	strh	r3, [r4, #12]
 8006498:	89a0      	ldrh	r0, [r4, #12]
 800649a:	4305      	orrs	r5, r0
 800649c:	81a5      	strh	r5, [r4, #12]
 800649e:	e7cd      	b.n	800643c <__smakebuf_r+0x18>
 80064a0:	08006229 	.word	0x08006229

080064a4 <malloc>:
 80064a4:	4b02      	ldr	r3, [pc, #8]	; (80064b0 <malloc+0xc>)
 80064a6:	4601      	mov	r1, r0
 80064a8:	6818      	ldr	r0, [r3, #0]
 80064aa:	f000 bc17 	b.w	8006cdc <_malloc_r>
 80064ae:	bf00      	nop
 80064b0:	2000000c 	.word	0x2000000c

080064b4 <memcpy>:
 80064b4:	440a      	add	r2, r1
 80064b6:	4291      	cmp	r1, r2
 80064b8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80064bc:	d100      	bne.n	80064c0 <memcpy+0xc>
 80064be:	4770      	bx	lr
 80064c0:	b510      	push	{r4, lr}
 80064c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80064c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80064ca:	4291      	cmp	r1, r2
 80064cc:	d1f9      	bne.n	80064c2 <memcpy+0xe>
 80064ce:	bd10      	pop	{r4, pc}

080064d0 <_Balloc>:
 80064d0:	b570      	push	{r4, r5, r6, lr}
 80064d2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80064d4:	4604      	mov	r4, r0
 80064d6:	460d      	mov	r5, r1
 80064d8:	b976      	cbnz	r6, 80064f8 <_Balloc+0x28>
 80064da:	2010      	movs	r0, #16
 80064dc:	f7ff ffe2 	bl	80064a4 <malloc>
 80064e0:	4602      	mov	r2, r0
 80064e2:	6260      	str	r0, [r4, #36]	; 0x24
 80064e4:	b920      	cbnz	r0, 80064f0 <_Balloc+0x20>
 80064e6:	4b18      	ldr	r3, [pc, #96]	; (8006548 <_Balloc+0x78>)
 80064e8:	4818      	ldr	r0, [pc, #96]	; (800654c <_Balloc+0x7c>)
 80064ea:	2166      	movs	r1, #102	; 0x66
 80064ec:	f000 fe2a 	bl	8007144 <__assert_func>
 80064f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80064f4:	6006      	str	r6, [r0, #0]
 80064f6:	60c6      	str	r6, [r0, #12]
 80064f8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80064fa:	68f3      	ldr	r3, [r6, #12]
 80064fc:	b183      	cbz	r3, 8006520 <_Balloc+0x50>
 80064fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006500:	68db      	ldr	r3, [r3, #12]
 8006502:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006506:	b9b8      	cbnz	r0, 8006538 <_Balloc+0x68>
 8006508:	2101      	movs	r1, #1
 800650a:	fa01 f605 	lsl.w	r6, r1, r5
 800650e:	1d72      	adds	r2, r6, #5
 8006510:	0092      	lsls	r2, r2, #2
 8006512:	4620      	mov	r0, r4
 8006514:	f000 fb60 	bl	8006bd8 <_calloc_r>
 8006518:	b160      	cbz	r0, 8006534 <_Balloc+0x64>
 800651a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800651e:	e00e      	b.n	800653e <_Balloc+0x6e>
 8006520:	2221      	movs	r2, #33	; 0x21
 8006522:	2104      	movs	r1, #4
 8006524:	4620      	mov	r0, r4
 8006526:	f000 fb57 	bl	8006bd8 <_calloc_r>
 800652a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800652c:	60f0      	str	r0, [r6, #12]
 800652e:	68db      	ldr	r3, [r3, #12]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d1e4      	bne.n	80064fe <_Balloc+0x2e>
 8006534:	2000      	movs	r0, #0
 8006536:	bd70      	pop	{r4, r5, r6, pc}
 8006538:	6802      	ldr	r2, [r0, #0]
 800653a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800653e:	2300      	movs	r3, #0
 8006540:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006544:	e7f7      	b.n	8006536 <_Balloc+0x66>
 8006546:	bf00      	nop
 8006548:	08007461 	.word	0x08007461
 800654c:	08007544 	.word	0x08007544

08006550 <_Bfree>:
 8006550:	b570      	push	{r4, r5, r6, lr}
 8006552:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006554:	4605      	mov	r5, r0
 8006556:	460c      	mov	r4, r1
 8006558:	b976      	cbnz	r6, 8006578 <_Bfree+0x28>
 800655a:	2010      	movs	r0, #16
 800655c:	f7ff ffa2 	bl	80064a4 <malloc>
 8006560:	4602      	mov	r2, r0
 8006562:	6268      	str	r0, [r5, #36]	; 0x24
 8006564:	b920      	cbnz	r0, 8006570 <_Bfree+0x20>
 8006566:	4b09      	ldr	r3, [pc, #36]	; (800658c <_Bfree+0x3c>)
 8006568:	4809      	ldr	r0, [pc, #36]	; (8006590 <_Bfree+0x40>)
 800656a:	218a      	movs	r1, #138	; 0x8a
 800656c:	f000 fdea 	bl	8007144 <__assert_func>
 8006570:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006574:	6006      	str	r6, [r0, #0]
 8006576:	60c6      	str	r6, [r0, #12]
 8006578:	b13c      	cbz	r4, 800658a <_Bfree+0x3a>
 800657a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800657c:	6862      	ldr	r2, [r4, #4]
 800657e:	68db      	ldr	r3, [r3, #12]
 8006580:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006584:	6021      	str	r1, [r4, #0]
 8006586:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800658a:	bd70      	pop	{r4, r5, r6, pc}
 800658c:	08007461 	.word	0x08007461
 8006590:	08007544 	.word	0x08007544

08006594 <__multadd>:
 8006594:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006598:	690d      	ldr	r5, [r1, #16]
 800659a:	4607      	mov	r7, r0
 800659c:	460c      	mov	r4, r1
 800659e:	461e      	mov	r6, r3
 80065a0:	f101 0c14 	add.w	ip, r1, #20
 80065a4:	2000      	movs	r0, #0
 80065a6:	f8dc 3000 	ldr.w	r3, [ip]
 80065aa:	b299      	uxth	r1, r3
 80065ac:	fb02 6101 	mla	r1, r2, r1, r6
 80065b0:	0c1e      	lsrs	r6, r3, #16
 80065b2:	0c0b      	lsrs	r3, r1, #16
 80065b4:	fb02 3306 	mla	r3, r2, r6, r3
 80065b8:	b289      	uxth	r1, r1
 80065ba:	3001      	adds	r0, #1
 80065bc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80065c0:	4285      	cmp	r5, r0
 80065c2:	f84c 1b04 	str.w	r1, [ip], #4
 80065c6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80065ca:	dcec      	bgt.n	80065a6 <__multadd+0x12>
 80065cc:	b30e      	cbz	r6, 8006612 <__multadd+0x7e>
 80065ce:	68a3      	ldr	r3, [r4, #8]
 80065d0:	42ab      	cmp	r3, r5
 80065d2:	dc19      	bgt.n	8006608 <__multadd+0x74>
 80065d4:	6861      	ldr	r1, [r4, #4]
 80065d6:	4638      	mov	r0, r7
 80065d8:	3101      	adds	r1, #1
 80065da:	f7ff ff79 	bl	80064d0 <_Balloc>
 80065de:	4680      	mov	r8, r0
 80065e0:	b928      	cbnz	r0, 80065ee <__multadd+0x5a>
 80065e2:	4602      	mov	r2, r0
 80065e4:	4b0c      	ldr	r3, [pc, #48]	; (8006618 <__multadd+0x84>)
 80065e6:	480d      	ldr	r0, [pc, #52]	; (800661c <__multadd+0x88>)
 80065e8:	21b5      	movs	r1, #181	; 0xb5
 80065ea:	f000 fdab 	bl	8007144 <__assert_func>
 80065ee:	6922      	ldr	r2, [r4, #16]
 80065f0:	3202      	adds	r2, #2
 80065f2:	f104 010c 	add.w	r1, r4, #12
 80065f6:	0092      	lsls	r2, r2, #2
 80065f8:	300c      	adds	r0, #12
 80065fa:	f7ff ff5b 	bl	80064b4 <memcpy>
 80065fe:	4621      	mov	r1, r4
 8006600:	4638      	mov	r0, r7
 8006602:	f7ff ffa5 	bl	8006550 <_Bfree>
 8006606:	4644      	mov	r4, r8
 8006608:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800660c:	3501      	adds	r5, #1
 800660e:	615e      	str	r6, [r3, #20]
 8006610:	6125      	str	r5, [r4, #16]
 8006612:	4620      	mov	r0, r4
 8006614:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006618:	080074d3 	.word	0x080074d3
 800661c:	08007544 	.word	0x08007544

08006620 <__hi0bits>:
 8006620:	0c03      	lsrs	r3, r0, #16
 8006622:	041b      	lsls	r3, r3, #16
 8006624:	b9d3      	cbnz	r3, 800665c <__hi0bits+0x3c>
 8006626:	0400      	lsls	r0, r0, #16
 8006628:	2310      	movs	r3, #16
 800662a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800662e:	bf04      	itt	eq
 8006630:	0200      	lsleq	r0, r0, #8
 8006632:	3308      	addeq	r3, #8
 8006634:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006638:	bf04      	itt	eq
 800663a:	0100      	lsleq	r0, r0, #4
 800663c:	3304      	addeq	r3, #4
 800663e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006642:	bf04      	itt	eq
 8006644:	0080      	lsleq	r0, r0, #2
 8006646:	3302      	addeq	r3, #2
 8006648:	2800      	cmp	r0, #0
 800664a:	db05      	blt.n	8006658 <__hi0bits+0x38>
 800664c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006650:	f103 0301 	add.w	r3, r3, #1
 8006654:	bf08      	it	eq
 8006656:	2320      	moveq	r3, #32
 8006658:	4618      	mov	r0, r3
 800665a:	4770      	bx	lr
 800665c:	2300      	movs	r3, #0
 800665e:	e7e4      	b.n	800662a <__hi0bits+0xa>

08006660 <__lo0bits>:
 8006660:	6803      	ldr	r3, [r0, #0]
 8006662:	f013 0207 	ands.w	r2, r3, #7
 8006666:	4601      	mov	r1, r0
 8006668:	d00b      	beq.n	8006682 <__lo0bits+0x22>
 800666a:	07da      	lsls	r2, r3, #31
 800666c:	d423      	bmi.n	80066b6 <__lo0bits+0x56>
 800666e:	0798      	lsls	r0, r3, #30
 8006670:	bf49      	itett	mi
 8006672:	085b      	lsrmi	r3, r3, #1
 8006674:	089b      	lsrpl	r3, r3, #2
 8006676:	2001      	movmi	r0, #1
 8006678:	600b      	strmi	r3, [r1, #0]
 800667a:	bf5c      	itt	pl
 800667c:	600b      	strpl	r3, [r1, #0]
 800667e:	2002      	movpl	r0, #2
 8006680:	4770      	bx	lr
 8006682:	b298      	uxth	r0, r3
 8006684:	b9a8      	cbnz	r0, 80066b2 <__lo0bits+0x52>
 8006686:	0c1b      	lsrs	r3, r3, #16
 8006688:	2010      	movs	r0, #16
 800668a:	b2da      	uxtb	r2, r3
 800668c:	b90a      	cbnz	r2, 8006692 <__lo0bits+0x32>
 800668e:	3008      	adds	r0, #8
 8006690:	0a1b      	lsrs	r3, r3, #8
 8006692:	071a      	lsls	r2, r3, #28
 8006694:	bf04      	itt	eq
 8006696:	091b      	lsreq	r3, r3, #4
 8006698:	3004      	addeq	r0, #4
 800669a:	079a      	lsls	r2, r3, #30
 800669c:	bf04      	itt	eq
 800669e:	089b      	lsreq	r3, r3, #2
 80066a0:	3002      	addeq	r0, #2
 80066a2:	07da      	lsls	r2, r3, #31
 80066a4:	d403      	bmi.n	80066ae <__lo0bits+0x4e>
 80066a6:	085b      	lsrs	r3, r3, #1
 80066a8:	f100 0001 	add.w	r0, r0, #1
 80066ac:	d005      	beq.n	80066ba <__lo0bits+0x5a>
 80066ae:	600b      	str	r3, [r1, #0]
 80066b0:	4770      	bx	lr
 80066b2:	4610      	mov	r0, r2
 80066b4:	e7e9      	b.n	800668a <__lo0bits+0x2a>
 80066b6:	2000      	movs	r0, #0
 80066b8:	4770      	bx	lr
 80066ba:	2020      	movs	r0, #32
 80066bc:	4770      	bx	lr
	...

080066c0 <__i2b>:
 80066c0:	b510      	push	{r4, lr}
 80066c2:	460c      	mov	r4, r1
 80066c4:	2101      	movs	r1, #1
 80066c6:	f7ff ff03 	bl	80064d0 <_Balloc>
 80066ca:	4602      	mov	r2, r0
 80066cc:	b928      	cbnz	r0, 80066da <__i2b+0x1a>
 80066ce:	4b05      	ldr	r3, [pc, #20]	; (80066e4 <__i2b+0x24>)
 80066d0:	4805      	ldr	r0, [pc, #20]	; (80066e8 <__i2b+0x28>)
 80066d2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80066d6:	f000 fd35 	bl	8007144 <__assert_func>
 80066da:	2301      	movs	r3, #1
 80066dc:	6144      	str	r4, [r0, #20]
 80066de:	6103      	str	r3, [r0, #16]
 80066e0:	bd10      	pop	{r4, pc}
 80066e2:	bf00      	nop
 80066e4:	080074d3 	.word	0x080074d3
 80066e8:	08007544 	.word	0x08007544

080066ec <__multiply>:
 80066ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066f0:	4691      	mov	r9, r2
 80066f2:	690a      	ldr	r2, [r1, #16]
 80066f4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80066f8:	429a      	cmp	r2, r3
 80066fa:	bfb8      	it	lt
 80066fc:	460b      	movlt	r3, r1
 80066fe:	460c      	mov	r4, r1
 8006700:	bfbc      	itt	lt
 8006702:	464c      	movlt	r4, r9
 8006704:	4699      	movlt	r9, r3
 8006706:	6927      	ldr	r7, [r4, #16]
 8006708:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800670c:	68a3      	ldr	r3, [r4, #8]
 800670e:	6861      	ldr	r1, [r4, #4]
 8006710:	eb07 060a 	add.w	r6, r7, sl
 8006714:	42b3      	cmp	r3, r6
 8006716:	b085      	sub	sp, #20
 8006718:	bfb8      	it	lt
 800671a:	3101      	addlt	r1, #1
 800671c:	f7ff fed8 	bl	80064d0 <_Balloc>
 8006720:	b930      	cbnz	r0, 8006730 <__multiply+0x44>
 8006722:	4602      	mov	r2, r0
 8006724:	4b44      	ldr	r3, [pc, #272]	; (8006838 <__multiply+0x14c>)
 8006726:	4845      	ldr	r0, [pc, #276]	; (800683c <__multiply+0x150>)
 8006728:	f240 115d 	movw	r1, #349	; 0x15d
 800672c:	f000 fd0a 	bl	8007144 <__assert_func>
 8006730:	f100 0514 	add.w	r5, r0, #20
 8006734:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006738:	462b      	mov	r3, r5
 800673a:	2200      	movs	r2, #0
 800673c:	4543      	cmp	r3, r8
 800673e:	d321      	bcc.n	8006784 <__multiply+0x98>
 8006740:	f104 0314 	add.w	r3, r4, #20
 8006744:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006748:	f109 0314 	add.w	r3, r9, #20
 800674c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006750:	9202      	str	r2, [sp, #8]
 8006752:	1b3a      	subs	r2, r7, r4
 8006754:	3a15      	subs	r2, #21
 8006756:	f022 0203 	bic.w	r2, r2, #3
 800675a:	3204      	adds	r2, #4
 800675c:	f104 0115 	add.w	r1, r4, #21
 8006760:	428f      	cmp	r7, r1
 8006762:	bf38      	it	cc
 8006764:	2204      	movcc	r2, #4
 8006766:	9201      	str	r2, [sp, #4]
 8006768:	9a02      	ldr	r2, [sp, #8]
 800676a:	9303      	str	r3, [sp, #12]
 800676c:	429a      	cmp	r2, r3
 800676e:	d80c      	bhi.n	800678a <__multiply+0x9e>
 8006770:	2e00      	cmp	r6, #0
 8006772:	dd03      	ble.n	800677c <__multiply+0x90>
 8006774:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006778:	2b00      	cmp	r3, #0
 800677a:	d05a      	beq.n	8006832 <__multiply+0x146>
 800677c:	6106      	str	r6, [r0, #16]
 800677e:	b005      	add	sp, #20
 8006780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006784:	f843 2b04 	str.w	r2, [r3], #4
 8006788:	e7d8      	b.n	800673c <__multiply+0x50>
 800678a:	f8b3 a000 	ldrh.w	sl, [r3]
 800678e:	f1ba 0f00 	cmp.w	sl, #0
 8006792:	d024      	beq.n	80067de <__multiply+0xf2>
 8006794:	f104 0e14 	add.w	lr, r4, #20
 8006798:	46a9      	mov	r9, r5
 800679a:	f04f 0c00 	mov.w	ip, #0
 800679e:	f85e 2b04 	ldr.w	r2, [lr], #4
 80067a2:	f8d9 1000 	ldr.w	r1, [r9]
 80067a6:	fa1f fb82 	uxth.w	fp, r2
 80067aa:	b289      	uxth	r1, r1
 80067ac:	fb0a 110b 	mla	r1, sl, fp, r1
 80067b0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80067b4:	f8d9 2000 	ldr.w	r2, [r9]
 80067b8:	4461      	add	r1, ip
 80067ba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80067be:	fb0a c20b 	mla	r2, sl, fp, ip
 80067c2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80067c6:	b289      	uxth	r1, r1
 80067c8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80067cc:	4577      	cmp	r7, lr
 80067ce:	f849 1b04 	str.w	r1, [r9], #4
 80067d2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80067d6:	d8e2      	bhi.n	800679e <__multiply+0xb2>
 80067d8:	9a01      	ldr	r2, [sp, #4]
 80067da:	f845 c002 	str.w	ip, [r5, r2]
 80067de:	9a03      	ldr	r2, [sp, #12]
 80067e0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80067e4:	3304      	adds	r3, #4
 80067e6:	f1b9 0f00 	cmp.w	r9, #0
 80067ea:	d020      	beq.n	800682e <__multiply+0x142>
 80067ec:	6829      	ldr	r1, [r5, #0]
 80067ee:	f104 0c14 	add.w	ip, r4, #20
 80067f2:	46ae      	mov	lr, r5
 80067f4:	f04f 0a00 	mov.w	sl, #0
 80067f8:	f8bc b000 	ldrh.w	fp, [ip]
 80067fc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006800:	fb09 220b 	mla	r2, r9, fp, r2
 8006804:	4492      	add	sl, r2
 8006806:	b289      	uxth	r1, r1
 8006808:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800680c:	f84e 1b04 	str.w	r1, [lr], #4
 8006810:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006814:	f8be 1000 	ldrh.w	r1, [lr]
 8006818:	0c12      	lsrs	r2, r2, #16
 800681a:	fb09 1102 	mla	r1, r9, r2, r1
 800681e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8006822:	4567      	cmp	r7, ip
 8006824:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006828:	d8e6      	bhi.n	80067f8 <__multiply+0x10c>
 800682a:	9a01      	ldr	r2, [sp, #4]
 800682c:	50a9      	str	r1, [r5, r2]
 800682e:	3504      	adds	r5, #4
 8006830:	e79a      	b.n	8006768 <__multiply+0x7c>
 8006832:	3e01      	subs	r6, #1
 8006834:	e79c      	b.n	8006770 <__multiply+0x84>
 8006836:	bf00      	nop
 8006838:	080074d3 	.word	0x080074d3
 800683c:	08007544 	.word	0x08007544

08006840 <__pow5mult>:
 8006840:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006844:	4615      	mov	r5, r2
 8006846:	f012 0203 	ands.w	r2, r2, #3
 800684a:	4606      	mov	r6, r0
 800684c:	460f      	mov	r7, r1
 800684e:	d007      	beq.n	8006860 <__pow5mult+0x20>
 8006850:	4c25      	ldr	r4, [pc, #148]	; (80068e8 <__pow5mult+0xa8>)
 8006852:	3a01      	subs	r2, #1
 8006854:	2300      	movs	r3, #0
 8006856:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800685a:	f7ff fe9b 	bl	8006594 <__multadd>
 800685e:	4607      	mov	r7, r0
 8006860:	10ad      	asrs	r5, r5, #2
 8006862:	d03d      	beq.n	80068e0 <__pow5mult+0xa0>
 8006864:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006866:	b97c      	cbnz	r4, 8006888 <__pow5mult+0x48>
 8006868:	2010      	movs	r0, #16
 800686a:	f7ff fe1b 	bl	80064a4 <malloc>
 800686e:	4602      	mov	r2, r0
 8006870:	6270      	str	r0, [r6, #36]	; 0x24
 8006872:	b928      	cbnz	r0, 8006880 <__pow5mult+0x40>
 8006874:	4b1d      	ldr	r3, [pc, #116]	; (80068ec <__pow5mult+0xac>)
 8006876:	481e      	ldr	r0, [pc, #120]	; (80068f0 <__pow5mult+0xb0>)
 8006878:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800687c:	f000 fc62 	bl	8007144 <__assert_func>
 8006880:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006884:	6004      	str	r4, [r0, #0]
 8006886:	60c4      	str	r4, [r0, #12]
 8006888:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800688c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006890:	b94c      	cbnz	r4, 80068a6 <__pow5mult+0x66>
 8006892:	f240 2171 	movw	r1, #625	; 0x271
 8006896:	4630      	mov	r0, r6
 8006898:	f7ff ff12 	bl	80066c0 <__i2b>
 800689c:	2300      	movs	r3, #0
 800689e:	f8c8 0008 	str.w	r0, [r8, #8]
 80068a2:	4604      	mov	r4, r0
 80068a4:	6003      	str	r3, [r0, #0]
 80068a6:	f04f 0900 	mov.w	r9, #0
 80068aa:	07eb      	lsls	r3, r5, #31
 80068ac:	d50a      	bpl.n	80068c4 <__pow5mult+0x84>
 80068ae:	4639      	mov	r1, r7
 80068b0:	4622      	mov	r2, r4
 80068b2:	4630      	mov	r0, r6
 80068b4:	f7ff ff1a 	bl	80066ec <__multiply>
 80068b8:	4639      	mov	r1, r7
 80068ba:	4680      	mov	r8, r0
 80068bc:	4630      	mov	r0, r6
 80068be:	f7ff fe47 	bl	8006550 <_Bfree>
 80068c2:	4647      	mov	r7, r8
 80068c4:	106d      	asrs	r5, r5, #1
 80068c6:	d00b      	beq.n	80068e0 <__pow5mult+0xa0>
 80068c8:	6820      	ldr	r0, [r4, #0]
 80068ca:	b938      	cbnz	r0, 80068dc <__pow5mult+0x9c>
 80068cc:	4622      	mov	r2, r4
 80068ce:	4621      	mov	r1, r4
 80068d0:	4630      	mov	r0, r6
 80068d2:	f7ff ff0b 	bl	80066ec <__multiply>
 80068d6:	6020      	str	r0, [r4, #0]
 80068d8:	f8c0 9000 	str.w	r9, [r0]
 80068dc:	4604      	mov	r4, r0
 80068de:	e7e4      	b.n	80068aa <__pow5mult+0x6a>
 80068e0:	4638      	mov	r0, r7
 80068e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80068e6:	bf00      	nop
 80068e8:	08007690 	.word	0x08007690
 80068ec:	08007461 	.word	0x08007461
 80068f0:	08007544 	.word	0x08007544

080068f4 <__lshift>:
 80068f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068f8:	460c      	mov	r4, r1
 80068fa:	6849      	ldr	r1, [r1, #4]
 80068fc:	6923      	ldr	r3, [r4, #16]
 80068fe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006902:	68a3      	ldr	r3, [r4, #8]
 8006904:	4607      	mov	r7, r0
 8006906:	4691      	mov	r9, r2
 8006908:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800690c:	f108 0601 	add.w	r6, r8, #1
 8006910:	42b3      	cmp	r3, r6
 8006912:	db0b      	blt.n	800692c <__lshift+0x38>
 8006914:	4638      	mov	r0, r7
 8006916:	f7ff fddb 	bl	80064d0 <_Balloc>
 800691a:	4605      	mov	r5, r0
 800691c:	b948      	cbnz	r0, 8006932 <__lshift+0x3e>
 800691e:	4602      	mov	r2, r0
 8006920:	4b2a      	ldr	r3, [pc, #168]	; (80069cc <__lshift+0xd8>)
 8006922:	482b      	ldr	r0, [pc, #172]	; (80069d0 <__lshift+0xdc>)
 8006924:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006928:	f000 fc0c 	bl	8007144 <__assert_func>
 800692c:	3101      	adds	r1, #1
 800692e:	005b      	lsls	r3, r3, #1
 8006930:	e7ee      	b.n	8006910 <__lshift+0x1c>
 8006932:	2300      	movs	r3, #0
 8006934:	f100 0114 	add.w	r1, r0, #20
 8006938:	f100 0210 	add.w	r2, r0, #16
 800693c:	4618      	mov	r0, r3
 800693e:	4553      	cmp	r3, sl
 8006940:	db37      	blt.n	80069b2 <__lshift+0xbe>
 8006942:	6920      	ldr	r0, [r4, #16]
 8006944:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006948:	f104 0314 	add.w	r3, r4, #20
 800694c:	f019 091f 	ands.w	r9, r9, #31
 8006950:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006954:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006958:	d02f      	beq.n	80069ba <__lshift+0xc6>
 800695a:	f1c9 0e20 	rsb	lr, r9, #32
 800695e:	468a      	mov	sl, r1
 8006960:	f04f 0c00 	mov.w	ip, #0
 8006964:	681a      	ldr	r2, [r3, #0]
 8006966:	fa02 f209 	lsl.w	r2, r2, r9
 800696a:	ea42 020c 	orr.w	r2, r2, ip
 800696e:	f84a 2b04 	str.w	r2, [sl], #4
 8006972:	f853 2b04 	ldr.w	r2, [r3], #4
 8006976:	4298      	cmp	r0, r3
 8006978:	fa22 fc0e 	lsr.w	ip, r2, lr
 800697c:	d8f2      	bhi.n	8006964 <__lshift+0x70>
 800697e:	1b03      	subs	r3, r0, r4
 8006980:	3b15      	subs	r3, #21
 8006982:	f023 0303 	bic.w	r3, r3, #3
 8006986:	3304      	adds	r3, #4
 8006988:	f104 0215 	add.w	r2, r4, #21
 800698c:	4290      	cmp	r0, r2
 800698e:	bf38      	it	cc
 8006990:	2304      	movcc	r3, #4
 8006992:	f841 c003 	str.w	ip, [r1, r3]
 8006996:	f1bc 0f00 	cmp.w	ip, #0
 800699a:	d001      	beq.n	80069a0 <__lshift+0xac>
 800699c:	f108 0602 	add.w	r6, r8, #2
 80069a0:	3e01      	subs	r6, #1
 80069a2:	4638      	mov	r0, r7
 80069a4:	612e      	str	r6, [r5, #16]
 80069a6:	4621      	mov	r1, r4
 80069a8:	f7ff fdd2 	bl	8006550 <_Bfree>
 80069ac:	4628      	mov	r0, r5
 80069ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069b2:	f842 0f04 	str.w	r0, [r2, #4]!
 80069b6:	3301      	adds	r3, #1
 80069b8:	e7c1      	b.n	800693e <__lshift+0x4a>
 80069ba:	3904      	subs	r1, #4
 80069bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80069c0:	f841 2f04 	str.w	r2, [r1, #4]!
 80069c4:	4298      	cmp	r0, r3
 80069c6:	d8f9      	bhi.n	80069bc <__lshift+0xc8>
 80069c8:	e7ea      	b.n	80069a0 <__lshift+0xac>
 80069ca:	bf00      	nop
 80069cc:	080074d3 	.word	0x080074d3
 80069d0:	08007544 	.word	0x08007544

080069d4 <__mcmp>:
 80069d4:	b530      	push	{r4, r5, lr}
 80069d6:	6902      	ldr	r2, [r0, #16]
 80069d8:	690c      	ldr	r4, [r1, #16]
 80069da:	1b12      	subs	r2, r2, r4
 80069dc:	d10e      	bne.n	80069fc <__mcmp+0x28>
 80069de:	f100 0314 	add.w	r3, r0, #20
 80069e2:	3114      	adds	r1, #20
 80069e4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80069e8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80069ec:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80069f0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80069f4:	42a5      	cmp	r5, r4
 80069f6:	d003      	beq.n	8006a00 <__mcmp+0x2c>
 80069f8:	d305      	bcc.n	8006a06 <__mcmp+0x32>
 80069fa:	2201      	movs	r2, #1
 80069fc:	4610      	mov	r0, r2
 80069fe:	bd30      	pop	{r4, r5, pc}
 8006a00:	4283      	cmp	r3, r0
 8006a02:	d3f3      	bcc.n	80069ec <__mcmp+0x18>
 8006a04:	e7fa      	b.n	80069fc <__mcmp+0x28>
 8006a06:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006a0a:	e7f7      	b.n	80069fc <__mcmp+0x28>

08006a0c <__mdiff>:
 8006a0c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a10:	460c      	mov	r4, r1
 8006a12:	4606      	mov	r6, r0
 8006a14:	4611      	mov	r1, r2
 8006a16:	4620      	mov	r0, r4
 8006a18:	4690      	mov	r8, r2
 8006a1a:	f7ff ffdb 	bl	80069d4 <__mcmp>
 8006a1e:	1e05      	subs	r5, r0, #0
 8006a20:	d110      	bne.n	8006a44 <__mdiff+0x38>
 8006a22:	4629      	mov	r1, r5
 8006a24:	4630      	mov	r0, r6
 8006a26:	f7ff fd53 	bl	80064d0 <_Balloc>
 8006a2a:	b930      	cbnz	r0, 8006a3a <__mdiff+0x2e>
 8006a2c:	4b3a      	ldr	r3, [pc, #232]	; (8006b18 <__mdiff+0x10c>)
 8006a2e:	4602      	mov	r2, r0
 8006a30:	f240 2132 	movw	r1, #562	; 0x232
 8006a34:	4839      	ldr	r0, [pc, #228]	; (8006b1c <__mdiff+0x110>)
 8006a36:	f000 fb85 	bl	8007144 <__assert_func>
 8006a3a:	2301      	movs	r3, #1
 8006a3c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006a40:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a44:	bfa4      	itt	ge
 8006a46:	4643      	movge	r3, r8
 8006a48:	46a0      	movge	r8, r4
 8006a4a:	4630      	mov	r0, r6
 8006a4c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006a50:	bfa6      	itte	ge
 8006a52:	461c      	movge	r4, r3
 8006a54:	2500      	movge	r5, #0
 8006a56:	2501      	movlt	r5, #1
 8006a58:	f7ff fd3a 	bl	80064d0 <_Balloc>
 8006a5c:	b920      	cbnz	r0, 8006a68 <__mdiff+0x5c>
 8006a5e:	4b2e      	ldr	r3, [pc, #184]	; (8006b18 <__mdiff+0x10c>)
 8006a60:	4602      	mov	r2, r0
 8006a62:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006a66:	e7e5      	b.n	8006a34 <__mdiff+0x28>
 8006a68:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006a6c:	6926      	ldr	r6, [r4, #16]
 8006a6e:	60c5      	str	r5, [r0, #12]
 8006a70:	f104 0914 	add.w	r9, r4, #20
 8006a74:	f108 0514 	add.w	r5, r8, #20
 8006a78:	f100 0e14 	add.w	lr, r0, #20
 8006a7c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006a80:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006a84:	f108 0210 	add.w	r2, r8, #16
 8006a88:	46f2      	mov	sl, lr
 8006a8a:	2100      	movs	r1, #0
 8006a8c:	f859 3b04 	ldr.w	r3, [r9], #4
 8006a90:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006a94:	fa1f f883 	uxth.w	r8, r3
 8006a98:	fa11 f18b 	uxtah	r1, r1, fp
 8006a9c:	0c1b      	lsrs	r3, r3, #16
 8006a9e:	eba1 0808 	sub.w	r8, r1, r8
 8006aa2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006aa6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006aaa:	fa1f f888 	uxth.w	r8, r8
 8006aae:	1419      	asrs	r1, r3, #16
 8006ab0:	454e      	cmp	r6, r9
 8006ab2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006ab6:	f84a 3b04 	str.w	r3, [sl], #4
 8006aba:	d8e7      	bhi.n	8006a8c <__mdiff+0x80>
 8006abc:	1b33      	subs	r3, r6, r4
 8006abe:	3b15      	subs	r3, #21
 8006ac0:	f023 0303 	bic.w	r3, r3, #3
 8006ac4:	3304      	adds	r3, #4
 8006ac6:	3415      	adds	r4, #21
 8006ac8:	42a6      	cmp	r6, r4
 8006aca:	bf38      	it	cc
 8006acc:	2304      	movcc	r3, #4
 8006ace:	441d      	add	r5, r3
 8006ad0:	4473      	add	r3, lr
 8006ad2:	469e      	mov	lr, r3
 8006ad4:	462e      	mov	r6, r5
 8006ad6:	4566      	cmp	r6, ip
 8006ad8:	d30e      	bcc.n	8006af8 <__mdiff+0xec>
 8006ada:	f10c 0203 	add.w	r2, ip, #3
 8006ade:	1b52      	subs	r2, r2, r5
 8006ae0:	f022 0203 	bic.w	r2, r2, #3
 8006ae4:	3d03      	subs	r5, #3
 8006ae6:	45ac      	cmp	ip, r5
 8006ae8:	bf38      	it	cc
 8006aea:	2200      	movcc	r2, #0
 8006aec:	441a      	add	r2, r3
 8006aee:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8006af2:	b17b      	cbz	r3, 8006b14 <__mdiff+0x108>
 8006af4:	6107      	str	r7, [r0, #16]
 8006af6:	e7a3      	b.n	8006a40 <__mdiff+0x34>
 8006af8:	f856 8b04 	ldr.w	r8, [r6], #4
 8006afc:	fa11 f288 	uxtah	r2, r1, r8
 8006b00:	1414      	asrs	r4, r2, #16
 8006b02:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006b06:	b292      	uxth	r2, r2
 8006b08:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006b0c:	f84e 2b04 	str.w	r2, [lr], #4
 8006b10:	1421      	asrs	r1, r4, #16
 8006b12:	e7e0      	b.n	8006ad6 <__mdiff+0xca>
 8006b14:	3f01      	subs	r7, #1
 8006b16:	e7ea      	b.n	8006aee <__mdiff+0xe2>
 8006b18:	080074d3 	.word	0x080074d3
 8006b1c:	08007544 	.word	0x08007544

08006b20 <__d2b>:
 8006b20:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006b24:	4689      	mov	r9, r1
 8006b26:	2101      	movs	r1, #1
 8006b28:	ec57 6b10 	vmov	r6, r7, d0
 8006b2c:	4690      	mov	r8, r2
 8006b2e:	f7ff fccf 	bl	80064d0 <_Balloc>
 8006b32:	4604      	mov	r4, r0
 8006b34:	b930      	cbnz	r0, 8006b44 <__d2b+0x24>
 8006b36:	4602      	mov	r2, r0
 8006b38:	4b25      	ldr	r3, [pc, #148]	; (8006bd0 <__d2b+0xb0>)
 8006b3a:	4826      	ldr	r0, [pc, #152]	; (8006bd4 <__d2b+0xb4>)
 8006b3c:	f240 310a 	movw	r1, #778	; 0x30a
 8006b40:	f000 fb00 	bl	8007144 <__assert_func>
 8006b44:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8006b48:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006b4c:	bb35      	cbnz	r5, 8006b9c <__d2b+0x7c>
 8006b4e:	2e00      	cmp	r6, #0
 8006b50:	9301      	str	r3, [sp, #4]
 8006b52:	d028      	beq.n	8006ba6 <__d2b+0x86>
 8006b54:	4668      	mov	r0, sp
 8006b56:	9600      	str	r6, [sp, #0]
 8006b58:	f7ff fd82 	bl	8006660 <__lo0bits>
 8006b5c:	9900      	ldr	r1, [sp, #0]
 8006b5e:	b300      	cbz	r0, 8006ba2 <__d2b+0x82>
 8006b60:	9a01      	ldr	r2, [sp, #4]
 8006b62:	f1c0 0320 	rsb	r3, r0, #32
 8006b66:	fa02 f303 	lsl.w	r3, r2, r3
 8006b6a:	430b      	orrs	r3, r1
 8006b6c:	40c2      	lsrs	r2, r0
 8006b6e:	6163      	str	r3, [r4, #20]
 8006b70:	9201      	str	r2, [sp, #4]
 8006b72:	9b01      	ldr	r3, [sp, #4]
 8006b74:	61a3      	str	r3, [r4, #24]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	bf14      	ite	ne
 8006b7a:	2202      	movne	r2, #2
 8006b7c:	2201      	moveq	r2, #1
 8006b7e:	6122      	str	r2, [r4, #16]
 8006b80:	b1d5      	cbz	r5, 8006bb8 <__d2b+0x98>
 8006b82:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006b86:	4405      	add	r5, r0
 8006b88:	f8c9 5000 	str.w	r5, [r9]
 8006b8c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006b90:	f8c8 0000 	str.w	r0, [r8]
 8006b94:	4620      	mov	r0, r4
 8006b96:	b003      	add	sp, #12
 8006b98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006b9c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006ba0:	e7d5      	b.n	8006b4e <__d2b+0x2e>
 8006ba2:	6161      	str	r1, [r4, #20]
 8006ba4:	e7e5      	b.n	8006b72 <__d2b+0x52>
 8006ba6:	a801      	add	r0, sp, #4
 8006ba8:	f7ff fd5a 	bl	8006660 <__lo0bits>
 8006bac:	9b01      	ldr	r3, [sp, #4]
 8006bae:	6163      	str	r3, [r4, #20]
 8006bb0:	2201      	movs	r2, #1
 8006bb2:	6122      	str	r2, [r4, #16]
 8006bb4:	3020      	adds	r0, #32
 8006bb6:	e7e3      	b.n	8006b80 <__d2b+0x60>
 8006bb8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006bbc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006bc0:	f8c9 0000 	str.w	r0, [r9]
 8006bc4:	6918      	ldr	r0, [r3, #16]
 8006bc6:	f7ff fd2b 	bl	8006620 <__hi0bits>
 8006bca:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006bce:	e7df      	b.n	8006b90 <__d2b+0x70>
 8006bd0:	080074d3 	.word	0x080074d3
 8006bd4:	08007544 	.word	0x08007544

08006bd8 <_calloc_r>:
 8006bd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006bda:	fba1 2402 	umull	r2, r4, r1, r2
 8006bde:	b94c      	cbnz	r4, 8006bf4 <_calloc_r+0x1c>
 8006be0:	4611      	mov	r1, r2
 8006be2:	9201      	str	r2, [sp, #4]
 8006be4:	f000 f87a 	bl	8006cdc <_malloc_r>
 8006be8:	9a01      	ldr	r2, [sp, #4]
 8006bea:	4605      	mov	r5, r0
 8006bec:	b930      	cbnz	r0, 8006bfc <_calloc_r+0x24>
 8006bee:	4628      	mov	r0, r5
 8006bf0:	b003      	add	sp, #12
 8006bf2:	bd30      	pop	{r4, r5, pc}
 8006bf4:	220c      	movs	r2, #12
 8006bf6:	6002      	str	r2, [r0, #0]
 8006bf8:	2500      	movs	r5, #0
 8006bfa:	e7f8      	b.n	8006bee <_calloc_r+0x16>
 8006bfc:	4621      	mov	r1, r4
 8006bfe:	f7fd fd2b 	bl	8004658 <memset>
 8006c02:	e7f4      	b.n	8006bee <_calloc_r+0x16>

08006c04 <_free_r>:
 8006c04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006c06:	2900      	cmp	r1, #0
 8006c08:	d044      	beq.n	8006c94 <_free_r+0x90>
 8006c0a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c0e:	9001      	str	r0, [sp, #4]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	f1a1 0404 	sub.w	r4, r1, #4
 8006c16:	bfb8      	it	lt
 8006c18:	18e4      	addlt	r4, r4, r3
 8006c1a:	f000 fb19 	bl	8007250 <__malloc_lock>
 8006c1e:	4a1e      	ldr	r2, [pc, #120]	; (8006c98 <_free_r+0x94>)
 8006c20:	9801      	ldr	r0, [sp, #4]
 8006c22:	6813      	ldr	r3, [r2, #0]
 8006c24:	b933      	cbnz	r3, 8006c34 <_free_r+0x30>
 8006c26:	6063      	str	r3, [r4, #4]
 8006c28:	6014      	str	r4, [r2, #0]
 8006c2a:	b003      	add	sp, #12
 8006c2c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006c30:	f000 bb14 	b.w	800725c <__malloc_unlock>
 8006c34:	42a3      	cmp	r3, r4
 8006c36:	d908      	bls.n	8006c4a <_free_r+0x46>
 8006c38:	6825      	ldr	r5, [r4, #0]
 8006c3a:	1961      	adds	r1, r4, r5
 8006c3c:	428b      	cmp	r3, r1
 8006c3e:	bf01      	itttt	eq
 8006c40:	6819      	ldreq	r1, [r3, #0]
 8006c42:	685b      	ldreq	r3, [r3, #4]
 8006c44:	1949      	addeq	r1, r1, r5
 8006c46:	6021      	streq	r1, [r4, #0]
 8006c48:	e7ed      	b.n	8006c26 <_free_r+0x22>
 8006c4a:	461a      	mov	r2, r3
 8006c4c:	685b      	ldr	r3, [r3, #4]
 8006c4e:	b10b      	cbz	r3, 8006c54 <_free_r+0x50>
 8006c50:	42a3      	cmp	r3, r4
 8006c52:	d9fa      	bls.n	8006c4a <_free_r+0x46>
 8006c54:	6811      	ldr	r1, [r2, #0]
 8006c56:	1855      	adds	r5, r2, r1
 8006c58:	42a5      	cmp	r5, r4
 8006c5a:	d10b      	bne.n	8006c74 <_free_r+0x70>
 8006c5c:	6824      	ldr	r4, [r4, #0]
 8006c5e:	4421      	add	r1, r4
 8006c60:	1854      	adds	r4, r2, r1
 8006c62:	42a3      	cmp	r3, r4
 8006c64:	6011      	str	r1, [r2, #0]
 8006c66:	d1e0      	bne.n	8006c2a <_free_r+0x26>
 8006c68:	681c      	ldr	r4, [r3, #0]
 8006c6a:	685b      	ldr	r3, [r3, #4]
 8006c6c:	6053      	str	r3, [r2, #4]
 8006c6e:	4421      	add	r1, r4
 8006c70:	6011      	str	r1, [r2, #0]
 8006c72:	e7da      	b.n	8006c2a <_free_r+0x26>
 8006c74:	d902      	bls.n	8006c7c <_free_r+0x78>
 8006c76:	230c      	movs	r3, #12
 8006c78:	6003      	str	r3, [r0, #0]
 8006c7a:	e7d6      	b.n	8006c2a <_free_r+0x26>
 8006c7c:	6825      	ldr	r5, [r4, #0]
 8006c7e:	1961      	adds	r1, r4, r5
 8006c80:	428b      	cmp	r3, r1
 8006c82:	bf04      	itt	eq
 8006c84:	6819      	ldreq	r1, [r3, #0]
 8006c86:	685b      	ldreq	r3, [r3, #4]
 8006c88:	6063      	str	r3, [r4, #4]
 8006c8a:	bf04      	itt	eq
 8006c8c:	1949      	addeq	r1, r1, r5
 8006c8e:	6021      	streq	r1, [r4, #0]
 8006c90:	6054      	str	r4, [r2, #4]
 8006c92:	e7ca      	b.n	8006c2a <_free_r+0x26>
 8006c94:	b003      	add	sp, #12
 8006c96:	bd30      	pop	{r4, r5, pc}
 8006c98:	20000364 	.word	0x20000364

08006c9c <sbrk_aligned>:
 8006c9c:	b570      	push	{r4, r5, r6, lr}
 8006c9e:	4e0e      	ldr	r6, [pc, #56]	; (8006cd8 <sbrk_aligned+0x3c>)
 8006ca0:	460c      	mov	r4, r1
 8006ca2:	6831      	ldr	r1, [r6, #0]
 8006ca4:	4605      	mov	r5, r0
 8006ca6:	b911      	cbnz	r1, 8006cae <sbrk_aligned+0x12>
 8006ca8:	f000 f9e6 	bl	8007078 <_sbrk_r>
 8006cac:	6030      	str	r0, [r6, #0]
 8006cae:	4621      	mov	r1, r4
 8006cb0:	4628      	mov	r0, r5
 8006cb2:	f000 f9e1 	bl	8007078 <_sbrk_r>
 8006cb6:	1c43      	adds	r3, r0, #1
 8006cb8:	d00a      	beq.n	8006cd0 <sbrk_aligned+0x34>
 8006cba:	1cc4      	adds	r4, r0, #3
 8006cbc:	f024 0403 	bic.w	r4, r4, #3
 8006cc0:	42a0      	cmp	r0, r4
 8006cc2:	d007      	beq.n	8006cd4 <sbrk_aligned+0x38>
 8006cc4:	1a21      	subs	r1, r4, r0
 8006cc6:	4628      	mov	r0, r5
 8006cc8:	f000 f9d6 	bl	8007078 <_sbrk_r>
 8006ccc:	3001      	adds	r0, #1
 8006cce:	d101      	bne.n	8006cd4 <sbrk_aligned+0x38>
 8006cd0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006cd4:	4620      	mov	r0, r4
 8006cd6:	bd70      	pop	{r4, r5, r6, pc}
 8006cd8:	20000368 	.word	0x20000368

08006cdc <_malloc_r>:
 8006cdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ce0:	1ccd      	adds	r5, r1, #3
 8006ce2:	f025 0503 	bic.w	r5, r5, #3
 8006ce6:	3508      	adds	r5, #8
 8006ce8:	2d0c      	cmp	r5, #12
 8006cea:	bf38      	it	cc
 8006cec:	250c      	movcc	r5, #12
 8006cee:	2d00      	cmp	r5, #0
 8006cf0:	4607      	mov	r7, r0
 8006cf2:	db01      	blt.n	8006cf8 <_malloc_r+0x1c>
 8006cf4:	42a9      	cmp	r1, r5
 8006cf6:	d905      	bls.n	8006d04 <_malloc_r+0x28>
 8006cf8:	230c      	movs	r3, #12
 8006cfa:	603b      	str	r3, [r7, #0]
 8006cfc:	2600      	movs	r6, #0
 8006cfe:	4630      	mov	r0, r6
 8006d00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d04:	4e2e      	ldr	r6, [pc, #184]	; (8006dc0 <_malloc_r+0xe4>)
 8006d06:	f000 faa3 	bl	8007250 <__malloc_lock>
 8006d0a:	6833      	ldr	r3, [r6, #0]
 8006d0c:	461c      	mov	r4, r3
 8006d0e:	bb34      	cbnz	r4, 8006d5e <_malloc_r+0x82>
 8006d10:	4629      	mov	r1, r5
 8006d12:	4638      	mov	r0, r7
 8006d14:	f7ff ffc2 	bl	8006c9c <sbrk_aligned>
 8006d18:	1c43      	adds	r3, r0, #1
 8006d1a:	4604      	mov	r4, r0
 8006d1c:	d14d      	bne.n	8006dba <_malloc_r+0xde>
 8006d1e:	6834      	ldr	r4, [r6, #0]
 8006d20:	4626      	mov	r6, r4
 8006d22:	2e00      	cmp	r6, #0
 8006d24:	d140      	bne.n	8006da8 <_malloc_r+0xcc>
 8006d26:	6823      	ldr	r3, [r4, #0]
 8006d28:	4631      	mov	r1, r6
 8006d2a:	4638      	mov	r0, r7
 8006d2c:	eb04 0803 	add.w	r8, r4, r3
 8006d30:	f000 f9a2 	bl	8007078 <_sbrk_r>
 8006d34:	4580      	cmp	r8, r0
 8006d36:	d13a      	bne.n	8006dae <_malloc_r+0xd2>
 8006d38:	6821      	ldr	r1, [r4, #0]
 8006d3a:	3503      	adds	r5, #3
 8006d3c:	1a6d      	subs	r5, r5, r1
 8006d3e:	f025 0503 	bic.w	r5, r5, #3
 8006d42:	3508      	adds	r5, #8
 8006d44:	2d0c      	cmp	r5, #12
 8006d46:	bf38      	it	cc
 8006d48:	250c      	movcc	r5, #12
 8006d4a:	4629      	mov	r1, r5
 8006d4c:	4638      	mov	r0, r7
 8006d4e:	f7ff ffa5 	bl	8006c9c <sbrk_aligned>
 8006d52:	3001      	adds	r0, #1
 8006d54:	d02b      	beq.n	8006dae <_malloc_r+0xd2>
 8006d56:	6823      	ldr	r3, [r4, #0]
 8006d58:	442b      	add	r3, r5
 8006d5a:	6023      	str	r3, [r4, #0]
 8006d5c:	e00e      	b.n	8006d7c <_malloc_r+0xa0>
 8006d5e:	6822      	ldr	r2, [r4, #0]
 8006d60:	1b52      	subs	r2, r2, r5
 8006d62:	d41e      	bmi.n	8006da2 <_malloc_r+0xc6>
 8006d64:	2a0b      	cmp	r2, #11
 8006d66:	d916      	bls.n	8006d96 <_malloc_r+0xba>
 8006d68:	1961      	adds	r1, r4, r5
 8006d6a:	42a3      	cmp	r3, r4
 8006d6c:	6025      	str	r5, [r4, #0]
 8006d6e:	bf18      	it	ne
 8006d70:	6059      	strne	r1, [r3, #4]
 8006d72:	6863      	ldr	r3, [r4, #4]
 8006d74:	bf08      	it	eq
 8006d76:	6031      	streq	r1, [r6, #0]
 8006d78:	5162      	str	r2, [r4, r5]
 8006d7a:	604b      	str	r3, [r1, #4]
 8006d7c:	4638      	mov	r0, r7
 8006d7e:	f104 060b 	add.w	r6, r4, #11
 8006d82:	f000 fa6b 	bl	800725c <__malloc_unlock>
 8006d86:	f026 0607 	bic.w	r6, r6, #7
 8006d8a:	1d23      	adds	r3, r4, #4
 8006d8c:	1af2      	subs	r2, r6, r3
 8006d8e:	d0b6      	beq.n	8006cfe <_malloc_r+0x22>
 8006d90:	1b9b      	subs	r3, r3, r6
 8006d92:	50a3      	str	r3, [r4, r2]
 8006d94:	e7b3      	b.n	8006cfe <_malloc_r+0x22>
 8006d96:	6862      	ldr	r2, [r4, #4]
 8006d98:	42a3      	cmp	r3, r4
 8006d9a:	bf0c      	ite	eq
 8006d9c:	6032      	streq	r2, [r6, #0]
 8006d9e:	605a      	strne	r2, [r3, #4]
 8006da0:	e7ec      	b.n	8006d7c <_malloc_r+0xa0>
 8006da2:	4623      	mov	r3, r4
 8006da4:	6864      	ldr	r4, [r4, #4]
 8006da6:	e7b2      	b.n	8006d0e <_malloc_r+0x32>
 8006da8:	4634      	mov	r4, r6
 8006daa:	6876      	ldr	r6, [r6, #4]
 8006dac:	e7b9      	b.n	8006d22 <_malloc_r+0x46>
 8006dae:	230c      	movs	r3, #12
 8006db0:	603b      	str	r3, [r7, #0]
 8006db2:	4638      	mov	r0, r7
 8006db4:	f000 fa52 	bl	800725c <__malloc_unlock>
 8006db8:	e7a1      	b.n	8006cfe <_malloc_r+0x22>
 8006dba:	6025      	str	r5, [r4, #0]
 8006dbc:	e7de      	b.n	8006d7c <_malloc_r+0xa0>
 8006dbe:	bf00      	nop
 8006dc0:	20000364 	.word	0x20000364

08006dc4 <__sfputc_r>:
 8006dc4:	6893      	ldr	r3, [r2, #8]
 8006dc6:	3b01      	subs	r3, #1
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	b410      	push	{r4}
 8006dcc:	6093      	str	r3, [r2, #8]
 8006dce:	da08      	bge.n	8006de2 <__sfputc_r+0x1e>
 8006dd0:	6994      	ldr	r4, [r2, #24]
 8006dd2:	42a3      	cmp	r3, r4
 8006dd4:	db01      	blt.n	8006dda <__sfputc_r+0x16>
 8006dd6:	290a      	cmp	r1, #10
 8006dd8:	d103      	bne.n	8006de2 <__sfputc_r+0x1e>
 8006dda:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006dde:	f7fe ba01 	b.w	80051e4 <__swbuf_r>
 8006de2:	6813      	ldr	r3, [r2, #0]
 8006de4:	1c58      	adds	r0, r3, #1
 8006de6:	6010      	str	r0, [r2, #0]
 8006de8:	7019      	strb	r1, [r3, #0]
 8006dea:	4608      	mov	r0, r1
 8006dec:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006df0:	4770      	bx	lr

08006df2 <__sfputs_r>:
 8006df2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006df4:	4606      	mov	r6, r0
 8006df6:	460f      	mov	r7, r1
 8006df8:	4614      	mov	r4, r2
 8006dfa:	18d5      	adds	r5, r2, r3
 8006dfc:	42ac      	cmp	r4, r5
 8006dfe:	d101      	bne.n	8006e04 <__sfputs_r+0x12>
 8006e00:	2000      	movs	r0, #0
 8006e02:	e007      	b.n	8006e14 <__sfputs_r+0x22>
 8006e04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e08:	463a      	mov	r2, r7
 8006e0a:	4630      	mov	r0, r6
 8006e0c:	f7ff ffda 	bl	8006dc4 <__sfputc_r>
 8006e10:	1c43      	adds	r3, r0, #1
 8006e12:	d1f3      	bne.n	8006dfc <__sfputs_r+0xa>
 8006e14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006e18 <_vfiprintf_r>:
 8006e18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e1c:	460d      	mov	r5, r1
 8006e1e:	b09d      	sub	sp, #116	; 0x74
 8006e20:	4614      	mov	r4, r2
 8006e22:	4698      	mov	r8, r3
 8006e24:	4606      	mov	r6, r0
 8006e26:	b118      	cbz	r0, 8006e30 <_vfiprintf_r+0x18>
 8006e28:	6983      	ldr	r3, [r0, #24]
 8006e2a:	b90b      	cbnz	r3, 8006e30 <_vfiprintf_r+0x18>
 8006e2c:	f7ff fa30 	bl	8006290 <__sinit>
 8006e30:	4b89      	ldr	r3, [pc, #548]	; (8007058 <_vfiprintf_r+0x240>)
 8006e32:	429d      	cmp	r5, r3
 8006e34:	d11b      	bne.n	8006e6e <_vfiprintf_r+0x56>
 8006e36:	6875      	ldr	r5, [r6, #4]
 8006e38:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006e3a:	07d9      	lsls	r1, r3, #31
 8006e3c:	d405      	bmi.n	8006e4a <_vfiprintf_r+0x32>
 8006e3e:	89ab      	ldrh	r3, [r5, #12]
 8006e40:	059a      	lsls	r2, r3, #22
 8006e42:	d402      	bmi.n	8006e4a <_vfiprintf_r+0x32>
 8006e44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006e46:	f7ff fac6 	bl	80063d6 <__retarget_lock_acquire_recursive>
 8006e4a:	89ab      	ldrh	r3, [r5, #12]
 8006e4c:	071b      	lsls	r3, r3, #28
 8006e4e:	d501      	bpl.n	8006e54 <_vfiprintf_r+0x3c>
 8006e50:	692b      	ldr	r3, [r5, #16]
 8006e52:	b9eb      	cbnz	r3, 8006e90 <_vfiprintf_r+0x78>
 8006e54:	4629      	mov	r1, r5
 8006e56:	4630      	mov	r0, r6
 8006e58:	f7fe fa16 	bl	8005288 <__swsetup_r>
 8006e5c:	b1c0      	cbz	r0, 8006e90 <_vfiprintf_r+0x78>
 8006e5e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006e60:	07dc      	lsls	r4, r3, #31
 8006e62:	d50e      	bpl.n	8006e82 <_vfiprintf_r+0x6a>
 8006e64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006e68:	b01d      	add	sp, #116	; 0x74
 8006e6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e6e:	4b7b      	ldr	r3, [pc, #492]	; (800705c <_vfiprintf_r+0x244>)
 8006e70:	429d      	cmp	r5, r3
 8006e72:	d101      	bne.n	8006e78 <_vfiprintf_r+0x60>
 8006e74:	68b5      	ldr	r5, [r6, #8]
 8006e76:	e7df      	b.n	8006e38 <_vfiprintf_r+0x20>
 8006e78:	4b79      	ldr	r3, [pc, #484]	; (8007060 <_vfiprintf_r+0x248>)
 8006e7a:	429d      	cmp	r5, r3
 8006e7c:	bf08      	it	eq
 8006e7e:	68f5      	ldreq	r5, [r6, #12]
 8006e80:	e7da      	b.n	8006e38 <_vfiprintf_r+0x20>
 8006e82:	89ab      	ldrh	r3, [r5, #12]
 8006e84:	0598      	lsls	r0, r3, #22
 8006e86:	d4ed      	bmi.n	8006e64 <_vfiprintf_r+0x4c>
 8006e88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006e8a:	f7ff faa5 	bl	80063d8 <__retarget_lock_release_recursive>
 8006e8e:	e7e9      	b.n	8006e64 <_vfiprintf_r+0x4c>
 8006e90:	2300      	movs	r3, #0
 8006e92:	9309      	str	r3, [sp, #36]	; 0x24
 8006e94:	2320      	movs	r3, #32
 8006e96:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006e9a:	f8cd 800c 	str.w	r8, [sp, #12]
 8006e9e:	2330      	movs	r3, #48	; 0x30
 8006ea0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007064 <_vfiprintf_r+0x24c>
 8006ea4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006ea8:	f04f 0901 	mov.w	r9, #1
 8006eac:	4623      	mov	r3, r4
 8006eae:	469a      	mov	sl, r3
 8006eb0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006eb4:	b10a      	cbz	r2, 8006eba <_vfiprintf_r+0xa2>
 8006eb6:	2a25      	cmp	r2, #37	; 0x25
 8006eb8:	d1f9      	bne.n	8006eae <_vfiprintf_r+0x96>
 8006eba:	ebba 0b04 	subs.w	fp, sl, r4
 8006ebe:	d00b      	beq.n	8006ed8 <_vfiprintf_r+0xc0>
 8006ec0:	465b      	mov	r3, fp
 8006ec2:	4622      	mov	r2, r4
 8006ec4:	4629      	mov	r1, r5
 8006ec6:	4630      	mov	r0, r6
 8006ec8:	f7ff ff93 	bl	8006df2 <__sfputs_r>
 8006ecc:	3001      	adds	r0, #1
 8006ece:	f000 80aa 	beq.w	8007026 <_vfiprintf_r+0x20e>
 8006ed2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006ed4:	445a      	add	r2, fp
 8006ed6:	9209      	str	r2, [sp, #36]	; 0x24
 8006ed8:	f89a 3000 	ldrb.w	r3, [sl]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	f000 80a2 	beq.w	8007026 <_vfiprintf_r+0x20e>
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006ee8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006eec:	f10a 0a01 	add.w	sl, sl, #1
 8006ef0:	9304      	str	r3, [sp, #16]
 8006ef2:	9307      	str	r3, [sp, #28]
 8006ef4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006ef8:	931a      	str	r3, [sp, #104]	; 0x68
 8006efa:	4654      	mov	r4, sl
 8006efc:	2205      	movs	r2, #5
 8006efe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f02:	4858      	ldr	r0, [pc, #352]	; (8007064 <_vfiprintf_r+0x24c>)
 8006f04:	f7f9 f98c 	bl	8000220 <memchr>
 8006f08:	9a04      	ldr	r2, [sp, #16]
 8006f0a:	b9d8      	cbnz	r0, 8006f44 <_vfiprintf_r+0x12c>
 8006f0c:	06d1      	lsls	r1, r2, #27
 8006f0e:	bf44      	itt	mi
 8006f10:	2320      	movmi	r3, #32
 8006f12:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006f16:	0713      	lsls	r3, r2, #28
 8006f18:	bf44      	itt	mi
 8006f1a:	232b      	movmi	r3, #43	; 0x2b
 8006f1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006f20:	f89a 3000 	ldrb.w	r3, [sl]
 8006f24:	2b2a      	cmp	r3, #42	; 0x2a
 8006f26:	d015      	beq.n	8006f54 <_vfiprintf_r+0x13c>
 8006f28:	9a07      	ldr	r2, [sp, #28]
 8006f2a:	4654      	mov	r4, sl
 8006f2c:	2000      	movs	r0, #0
 8006f2e:	f04f 0c0a 	mov.w	ip, #10
 8006f32:	4621      	mov	r1, r4
 8006f34:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006f38:	3b30      	subs	r3, #48	; 0x30
 8006f3a:	2b09      	cmp	r3, #9
 8006f3c:	d94e      	bls.n	8006fdc <_vfiprintf_r+0x1c4>
 8006f3e:	b1b0      	cbz	r0, 8006f6e <_vfiprintf_r+0x156>
 8006f40:	9207      	str	r2, [sp, #28]
 8006f42:	e014      	b.n	8006f6e <_vfiprintf_r+0x156>
 8006f44:	eba0 0308 	sub.w	r3, r0, r8
 8006f48:	fa09 f303 	lsl.w	r3, r9, r3
 8006f4c:	4313      	orrs	r3, r2
 8006f4e:	9304      	str	r3, [sp, #16]
 8006f50:	46a2      	mov	sl, r4
 8006f52:	e7d2      	b.n	8006efa <_vfiprintf_r+0xe2>
 8006f54:	9b03      	ldr	r3, [sp, #12]
 8006f56:	1d19      	adds	r1, r3, #4
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	9103      	str	r1, [sp, #12]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	bfbb      	ittet	lt
 8006f60:	425b      	neglt	r3, r3
 8006f62:	f042 0202 	orrlt.w	r2, r2, #2
 8006f66:	9307      	strge	r3, [sp, #28]
 8006f68:	9307      	strlt	r3, [sp, #28]
 8006f6a:	bfb8      	it	lt
 8006f6c:	9204      	strlt	r2, [sp, #16]
 8006f6e:	7823      	ldrb	r3, [r4, #0]
 8006f70:	2b2e      	cmp	r3, #46	; 0x2e
 8006f72:	d10c      	bne.n	8006f8e <_vfiprintf_r+0x176>
 8006f74:	7863      	ldrb	r3, [r4, #1]
 8006f76:	2b2a      	cmp	r3, #42	; 0x2a
 8006f78:	d135      	bne.n	8006fe6 <_vfiprintf_r+0x1ce>
 8006f7a:	9b03      	ldr	r3, [sp, #12]
 8006f7c:	1d1a      	adds	r2, r3, #4
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	9203      	str	r2, [sp, #12]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	bfb8      	it	lt
 8006f86:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006f8a:	3402      	adds	r4, #2
 8006f8c:	9305      	str	r3, [sp, #20]
 8006f8e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007074 <_vfiprintf_r+0x25c>
 8006f92:	7821      	ldrb	r1, [r4, #0]
 8006f94:	2203      	movs	r2, #3
 8006f96:	4650      	mov	r0, sl
 8006f98:	f7f9 f942 	bl	8000220 <memchr>
 8006f9c:	b140      	cbz	r0, 8006fb0 <_vfiprintf_r+0x198>
 8006f9e:	2340      	movs	r3, #64	; 0x40
 8006fa0:	eba0 000a 	sub.w	r0, r0, sl
 8006fa4:	fa03 f000 	lsl.w	r0, r3, r0
 8006fa8:	9b04      	ldr	r3, [sp, #16]
 8006faa:	4303      	orrs	r3, r0
 8006fac:	3401      	adds	r4, #1
 8006fae:	9304      	str	r3, [sp, #16]
 8006fb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006fb4:	482c      	ldr	r0, [pc, #176]	; (8007068 <_vfiprintf_r+0x250>)
 8006fb6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006fba:	2206      	movs	r2, #6
 8006fbc:	f7f9 f930 	bl	8000220 <memchr>
 8006fc0:	2800      	cmp	r0, #0
 8006fc2:	d03f      	beq.n	8007044 <_vfiprintf_r+0x22c>
 8006fc4:	4b29      	ldr	r3, [pc, #164]	; (800706c <_vfiprintf_r+0x254>)
 8006fc6:	bb1b      	cbnz	r3, 8007010 <_vfiprintf_r+0x1f8>
 8006fc8:	9b03      	ldr	r3, [sp, #12]
 8006fca:	3307      	adds	r3, #7
 8006fcc:	f023 0307 	bic.w	r3, r3, #7
 8006fd0:	3308      	adds	r3, #8
 8006fd2:	9303      	str	r3, [sp, #12]
 8006fd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fd6:	443b      	add	r3, r7
 8006fd8:	9309      	str	r3, [sp, #36]	; 0x24
 8006fda:	e767      	b.n	8006eac <_vfiprintf_r+0x94>
 8006fdc:	fb0c 3202 	mla	r2, ip, r2, r3
 8006fe0:	460c      	mov	r4, r1
 8006fe2:	2001      	movs	r0, #1
 8006fe4:	e7a5      	b.n	8006f32 <_vfiprintf_r+0x11a>
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	3401      	adds	r4, #1
 8006fea:	9305      	str	r3, [sp, #20]
 8006fec:	4619      	mov	r1, r3
 8006fee:	f04f 0c0a 	mov.w	ip, #10
 8006ff2:	4620      	mov	r0, r4
 8006ff4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006ff8:	3a30      	subs	r2, #48	; 0x30
 8006ffa:	2a09      	cmp	r2, #9
 8006ffc:	d903      	bls.n	8007006 <_vfiprintf_r+0x1ee>
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d0c5      	beq.n	8006f8e <_vfiprintf_r+0x176>
 8007002:	9105      	str	r1, [sp, #20]
 8007004:	e7c3      	b.n	8006f8e <_vfiprintf_r+0x176>
 8007006:	fb0c 2101 	mla	r1, ip, r1, r2
 800700a:	4604      	mov	r4, r0
 800700c:	2301      	movs	r3, #1
 800700e:	e7f0      	b.n	8006ff2 <_vfiprintf_r+0x1da>
 8007010:	ab03      	add	r3, sp, #12
 8007012:	9300      	str	r3, [sp, #0]
 8007014:	462a      	mov	r2, r5
 8007016:	4b16      	ldr	r3, [pc, #88]	; (8007070 <_vfiprintf_r+0x258>)
 8007018:	a904      	add	r1, sp, #16
 800701a:	4630      	mov	r0, r6
 800701c:	f7fd fbc4 	bl	80047a8 <_printf_float>
 8007020:	4607      	mov	r7, r0
 8007022:	1c78      	adds	r0, r7, #1
 8007024:	d1d6      	bne.n	8006fd4 <_vfiprintf_r+0x1bc>
 8007026:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007028:	07d9      	lsls	r1, r3, #31
 800702a:	d405      	bmi.n	8007038 <_vfiprintf_r+0x220>
 800702c:	89ab      	ldrh	r3, [r5, #12]
 800702e:	059a      	lsls	r2, r3, #22
 8007030:	d402      	bmi.n	8007038 <_vfiprintf_r+0x220>
 8007032:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007034:	f7ff f9d0 	bl	80063d8 <__retarget_lock_release_recursive>
 8007038:	89ab      	ldrh	r3, [r5, #12]
 800703a:	065b      	lsls	r3, r3, #25
 800703c:	f53f af12 	bmi.w	8006e64 <_vfiprintf_r+0x4c>
 8007040:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007042:	e711      	b.n	8006e68 <_vfiprintf_r+0x50>
 8007044:	ab03      	add	r3, sp, #12
 8007046:	9300      	str	r3, [sp, #0]
 8007048:	462a      	mov	r2, r5
 800704a:	4b09      	ldr	r3, [pc, #36]	; (8007070 <_vfiprintf_r+0x258>)
 800704c:	a904      	add	r1, sp, #16
 800704e:	4630      	mov	r0, r6
 8007050:	f7fd fe4e 	bl	8004cf0 <_printf_i>
 8007054:	e7e4      	b.n	8007020 <_vfiprintf_r+0x208>
 8007056:	bf00      	nop
 8007058:	08007504 	.word	0x08007504
 800705c:	08007524 	.word	0x08007524
 8007060:	080074e4 	.word	0x080074e4
 8007064:	0800769c 	.word	0x0800769c
 8007068:	080076a6 	.word	0x080076a6
 800706c:	080047a9 	.word	0x080047a9
 8007070:	08006df3 	.word	0x08006df3
 8007074:	080076a2 	.word	0x080076a2

08007078 <_sbrk_r>:
 8007078:	b538      	push	{r3, r4, r5, lr}
 800707a:	4d06      	ldr	r5, [pc, #24]	; (8007094 <_sbrk_r+0x1c>)
 800707c:	2300      	movs	r3, #0
 800707e:	4604      	mov	r4, r0
 8007080:	4608      	mov	r0, r1
 8007082:	602b      	str	r3, [r5, #0]
 8007084:	f7fa fd02 	bl	8001a8c <_sbrk>
 8007088:	1c43      	adds	r3, r0, #1
 800708a:	d102      	bne.n	8007092 <_sbrk_r+0x1a>
 800708c:	682b      	ldr	r3, [r5, #0]
 800708e:	b103      	cbz	r3, 8007092 <_sbrk_r+0x1a>
 8007090:	6023      	str	r3, [r4, #0]
 8007092:	bd38      	pop	{r3, r4, r5, pc}
 8007094:	2000036c 	.word	0x2000036c

08007098 <__sread>:
 8007098:	b510      	push	{r4, lr}
 800709a:	460c      	mov	r4, r1
 800709c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070a0:	f000 f8e2 	bl	8007268 <_read_r>
 80070a4:	2800      	cmp	r0, #0
 80070a6:	bfab      	itete	ge
 80070a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80070aa:	89a3      	ldrhlt	r3, [r4, #12]
 80070ac:	181b      	addge	r3, r3, r0
 80070ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80070b2:	bfac      	ite	ge
 80070b4:	6563      	strge	r3, [r4, #84]	; 0x54
 80070b6:	81a3      	strhlt	r3, [r4, #12]
 80070b8:	bd10      	pop	{r4, pc}

080070ba <__swrite>:
 80070ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070be:	461f      	mov	r7, r3
 80070c0:	898b      	ldrh	r3, [r1, #12]
 80070c2:	05db      	lsls	r3, r3, #23
 80070c4:	4605      	mov	r5, r0
 80070c6:	460c      	mov	r4, r1
 80070c8:	4616      	mov	r6, r2
 80070ca:	d505      	bpl.n	80070d8 <__swrite+0x1e>
 80070cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070d0:	2302      	movs	r3, #2
 80070d2:	2200      	movs	r2, #0
 80070d4:	f000 f898 	bl	8007208 <_lseek_r>
 80070d8:	89a3      	ldrh	r3, [r4, #12]
 80070da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80070de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80070e2:	81a3      	strh	r3, [r4, #12]
 80070e4:	4632      	mov	r2, r6
 80070e6:	463b      	mov	r3, r7
 80070e8:	4628      	mov	r0, r5
 80070ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80070ee:	f000 b817 	b.w	8007120 <_write_r>

080070f2 <__sseek>:
 80070f2:	b510      	push	{r4, lr}
 80070f4:	460c      	mov	r4, r1
 80070f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070fa:	f000 f885 	bl	8007208 <_lseek_r>
 80070fe:	1c43      	adds	r3, r0, #1
 8007100:	89a3      	ldrh	r3, [r4, #12]
 8007102:	bf15      	itete	ne
 8007104:	6560      	strne	r0, [r4, #84]	; 0x54
 8007106:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800710a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800710e:	81a3      	strheq	r3, [r4, #12]
 8007110:	bf18      	it	ne
 8007112:	81a3      	strhne	r3, [r4, #12]
 8007114:	bd10      	pop	{r4, pc}

08007116 <__sclose>:
 8007116:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800711a:	f000 b831 	b.w	8007180 <_close_r>
	...

08007120 <_write_r>:
 8007120:	b538      	push	{r3, r4, r5, lr}
 8007122:	4d07      	ldr	r5, [pc, #28]	; (8007140 <_write_r+0x20>)
 8007124:	4604      	mov	r4, r0
 8007126:	4608      	mov	r0, r1
 8007128:	4611      	mov	r1, r2
 800712a:	2200      	movs	r2, #0
 800712c:	602a      	str	r2, [r5, #0]
 800712e:	461a      	mov	r2, r3
 8007130:	f7f9 fff6 	bl	8001120 <_write>
 8007134:	1c43      	adds	r3, r0, #1
 8007136:	d102      	bne.n	800713e <_write_r+0x1e>
 8007138:	682b      	ldr	r3, [r5, #0]
 800713a:	b103      	cbz	r3, 800713e <_write_r+0x1e>
 800713c:	6023      	str	r3, [r4, #0]
 800713e:	bd38      	pop	{r3, r4, r5, pc}
 8007140:	2000036c 	.word	0x2000036c

08007144 <__assert_func>:
 8007144:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007146:	4614      	mov	r4, r2
 8007148:	461a      	mov	r2, r3
 800714a:	4b09      	ldr	r3, [pc, #36]	; (8007170 <__assert_func+0x2c>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	4605      	mov	r5, r0
 8007150:	68d8      	ldr	r0, [r3, #12]
 8007152:	b14c      	cbz	r4, 8007168 <__assert_func+0x24>
 8007154:	4b07      	ldr	r3, [pc, #28]	; (8007174 <__assert_func+0x30>)
 8007156:	9100      	str	r1, [sp, #0]
 8007158:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800715c:	4906      	ldr	r1, [pc, #24]	; (8007178 <__assert_func+0x34>)
 800715e:	462b      	mov	r3, r5
 8007160:	f000 f81e 	bl	80071a0 <fiprintf>
 8007164:	f000 f89f 	bl	80072a6 <abort>
 8007168:	4b04      	ldr	r3, [pc, #16]	; (800717c <__assert_func+0x38>)
 800716a:	461c      	mov	r4, r3
 800716c:	e7f3      	b.n	8007156 <__assert_func+0x12>
 800716e:	bf00      	nop
 8007170:	2000000c 	.word	0x2000000c
 8007174:	080076ad 	.word	0x080076ad
 8007178:	080076ba 	.word	0x080076ba
 800717c:	080076e8 	.word	0x080076e8

08007180 <_close_r>:
 8007180:	b538      	push	{r3, r4, r5, lr}
 8007182:	4d06      	ldr	r5, [pc, #24]	; (800719c <_close_r+0x1c>)
 8007184:	2300      	movs	r3, #0
 8007186:	4604      	mov	r4, r0
 8007188:	4608      	mov	r0, r1
 800718a:	602b      	str	r3, [r5, #0]
 800718c:	f7fa fc70 	bl	8001a70 <_close>
 8007190:	1c43      	adds	r3, r0, #1
 8007192:	d102      	bne.n	800719a <_close_r+0x1a>
 8007194:	682b      	ldr	r3, [r5, #0]
 8007196:	b103      	cbz	r3, 800719a <_close_r+0x1a>
 8007198:	6023      	str	r3, [r4, #0]
 800719a:	bd38      	pop	{r3, r4, r5, pc}
 800719c:	2000036c 	.word	0x2000036c

080071a0 <fiprintf>:
 80071a0:	b40e      	push	{r1, r2, r3}
 80071a2:	b503      	push	{r0, r1, lr}
 80071a4:	4601      	mov	r1, r0
 80071a6:	ab03      	add	r3, sp, #12
 80071a8:	4805      	ldr	r0, [pc, #20]	; (80071c0 <fiprintf+0x20>)
 80071aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80071ae:	6800      	ldr	r0, [r0, #0]
 80071b0:	9301      	str	r3, [sp, #4]
 80071b2:	f7ff fe31 	bl	8006e18 <_vfiprintf_r>
 80071b6:	b002      	add	sp, #8
 80071b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80071bc:	b003      	add	sp, #12
 80071be:	4770      	bx	lr
 80071c0:	2000000c 	.word	0x2000000c

080071c4 <_fstat_r>:
 80071c4:	b538      	push	{r3, r4, r5, lr}
 80071c6:	4d07      	ldr	r5, [pc, #28]	; (80071e4 <_fstat_r+0x20>)
 80071c8:	2300      	movs	r3, #0
 80071ca:	4604      	mov	r4, r0
 80071cc:	4608      	mov	r0, r1
 80071ce:	4611      	mov	r1, r2
 80071d0:	602b      	str	r3, [r5, #0]
 80071d2:	f7fa fc51 	bl	8001a78 <_fstat>
 80071d6:	1c43      	adds	r3, r0, #1
 80071d8:	d102      	bne.n	80071e0 <_fstat_r+0x1c>
 80071da:	682b      	ldr	r3, [r5, #0]
 80071dc:	b103      	cbz	r3, 80071e0 <_fstat_r+0x1c>
 80071de:	6023      	str	r3, [r4, #0]
 80071e0:	bd38      	pop	{r3, r4, r5, pc}
 80071e2:	bf00      	nop
 80071e4:	2000036c 	.word	0x2000036c

080071e8 <_isatty_r>:
 80071e8:	b538      	push	{r3, r4, r5, lr}
 80071ea:	4d06      	ldr	r5, [pc, #24]	; (8007204 <_isatty_r+0x1c>)
 80071ec:	2300      	movs	r3, #0
 80071ee:	4604      	mov	r4, r0
 80071f0:	4608      	mov	r0, r1
 80071f2:	602b      	str	r3, [r5, #0]
 80071f4:	f7fa fc46 	bl	8001a84 <_isatty>
 80071f8:	1c43      	adds	r3, r0, #1
 80071fa:	d102      	bne.n	8007202 <_isatty_r+0x1a>
 80071fc:	682b      	ldr	r3, [r5, #0]
 80071fe:	b103      	cbz	r3, 8007202 <_isatty_r+0x1a>
 8007200:	6023      	str	r3, [r4, #0]
 8007202:	bd38      	pop	{r3, r4, r5, pc}
 8007204:	2000036c 	.word	0x2000036c

08007208 <_lseek_r>:
 8007208:	b538      	push	{r3, r4, r5, lr}
 800720a:	4d07      	ldr	r5, [pc, #28]	; (8007228 <_lseek_r+0x20>)
 800720c:	4604      	mov	r4, r0
 800720e:	4608      	mov	r0, r1
 8007210:	4611      	mov	r1, r2
 8007212:	2200      	movs	r2, #0
 8007214:	602a      	str	r2, [r5, #0]
 8007216:	461a      	mov	r2, r3
 8007218:	f7fa fc36 	bl	8001a88 <_lseek>
 800721c:	1c43      	adds	r3, r0, #1
 800721e:	d102      	bne.n	8007226 <_lseek_r+0x1e>
 8007220:	682b      	ldr	r3, [r5, #0]
 8007222:	b103      	cbz	r3, 8007226 <_lseek_r+0x1e>
 8007224:	6023      	str	r3, [r4, #0]
 8007226:	bd38      	pop	{r3, r4, r5, pc}
 8007228:	2000036c 	.word	0x2000036c

0800722c <__ascii_mbtowc>:
 800722c:	b082      	sub	sp, #8
 800722e:	b901      	cbnz	r1, 8007232 <__ascii_mbtowc+0x6>
 8007230:	a901      	add	r1, sp, #4
 8007232:	b142      	cbz	r2, 8007246 <__ascii_mbtowc+0x1a>
 8007234:	b14b      	cbz	r3, 800724a <__ascii_mbtowc+0x1e>
 8007236:	7813      	ldrb	r3, [r2, #0]
 8007238:	600b      	str	r3, [r1, #0]
 800723a:	7812      	ldrb	r2, [r2, #0]
 800723c:	1e10      	subs	r0, r2, #0
 800723e:	bf18      	it	ne
 8007240:	2001      	movne	r0, #1
 8007242:	b002      	add	sp, #8
 8007244:	4770      	bx	lr
 8007246:	4610      	mov	r0, r2
 8007248:	e7fb      	b.n	8007242 <__ascii_mbtowc+0x16>
 800724a:	f06f 0001 	mvn.w	r0, #1
 800724e:	e7f8      	b.n	8007242 <__ascii_mbtowc+0x16>

08007250 <__malloc_lock>:
 8007250:	4801      	ldr	r0, [pc, #4]	; (8007258 <__malloc_lock+0x8>)
 8007252:	f7ff b8c0 	b.w	80063d6 <__retarget_lock_acquire_recursive>
 8007256:	bf00      	nop
 8007258:	20000360 	.word	0x20000360

0800725c <__malloc_unlock>:
 800725c:	4801      	ldr	r0, [pc, #4]	; (8007264 <__malloc_unlock+0x8>)
 800725e:	f7ff b8bb 	b.w	80063d8 <__retarget_lock_release_recursive>
 8007262:	bf00      	nop
 8007264:	20000360 	.word	0x20000360

08007268 <_read_r>:
 8007268:	b538      	push	{r3, r4, r5, lr}
 800726a:	4d07      	ldr	r5, [pc, #28]	; (8007288 <_read_r+0x20>)
 800726c:	4604      	mov	r4, r0
 800726e:	4608      	mov	r0, r1
 8007270:	4611      	mov	r1, r2
 8007272:	2200      	movs	r2, #0
 8007274:	602a      	str	r2, [r5, #0]
 8007276:	461a      	mov	r2, r3
 8007278:	f7fa fbec 	bl	8001a54 <_read>
 800727c:	1c43      	adds	r3, r0, #1
 800727e:	d102      	bne.n	8007286 <_read_r+0x1e>
 8007280:	682b      	ldr	r3, [r5, #0]
 8007282:	b103      	cbz	r3, 8007286 <_read_r+0x1e>
 8007284:	6023      	str	r3, [r4, #0]
 8007286:	bd38      	pop	{r3, r4, r5, pc}
 8007288:	2000036c 	.word	0x2000036c

0800728c <__ascii_wctomb>:
 800728c:	b149      	cbz	r1, 80072a2 <__ascii_wctomb+0x16>
 800728e:	2aff      	cmp	r2, #255	; 0xff
 8007290:	bf85      	ittet	hi
 8007292:	238a      	movhi	r3, #138	; 0x8a
 8007294:	6003      	strhi	r3, [r0, #0]
 8007296:	700a      	strbls	r2, [r1, #0]
 8007298:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800729c:	bf98      	it	ls
 800729e:	2001      	movls	r0, #1
 80072a0:	4770      	bx	lr
 80072a2:	4608      	mov	r0, r1
 80072a4:	4770      	bx	lr

080072a6 <abort>:
 80072a6:	b508      	push	{r3, lr}
 80072a8:	2006      	movs	r0, #6
 80072aa:	f000 f82b 	bl	8007304 <raise>
 80072ae:	2001      	movs	r0, #1
 80072b0:	f7fa fbca 	bl	8001a48 <_exit>

080072b4 <_raise_r>:
 80072b4:	291f      	cmp	r1, #31
 80072b6:	b538      	push	{r3, r4, r5, lr}
 80072b8:	4604      	mov	r4, r0
 80072ba:	460d      	mov	r5, r1
 80072bc:	d904      	bls.n	80072c8 <_raise_r+0x14>
 80072be:	2316      	movs	r3, #22
 80072c0:	6003      	str	r3, [r0, #0]
 80072c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80072c6:	bd38      	pop	{r3, r4, r5, pc}
 80072c8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80072ca:	b112      	cbz	r2, 80072d2 <_raise_r+0x1e>
 80072cc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80072d0:	b94b      	cbnz	r3, 80072e6 <_raise_r+0x32>
 80072d2:	4620      	mov	r0, r4
 80072d4:	f000 f830 	bl	8007338 <_getpid_r>
 80072d8:	462a      	mov	r2, r5
 80072da:	4601      	mov	r1, r0
 80072dc:	4620      	mov	r0, r4
 80072de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80072e2:	f000 b817 	b.w	8007314 <_kill_r>
 80072e6:	2b01      	cmp	r3, #1
 80072e8:	d00a      	beq.n	8007300 <_raise_r+0x4c>
 80072ea:	1c59      	adds	r1, r3, #1
 80072ec:	d103      	bne.n	80072f6 <_raise_r+0x42>
 80072ee:	2316      	movs	r3, #22
 80072f0:	6003      	str	r3, [r0, #0]
 80072f2:	2001      	movs	r0, #1
 80072f4:	e7e7      	b.n	80072c6 <_raise_r+0x12>
 80072f6:	2400      	movs	r4, #0
 80072f8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80072fc:	4628      	mov	r0, r5
 80072fe:	4798      	blx	r3
 8007300:	2000      	movs	r0, #0
 8007302:	e7e0      	b.n	80072c6 <_raise_r+0x12>

08007304 <raise>:
 8007304:	4b02      	ldr	r3, [pc, #8]	; (8007310 <raise+0xc>)
 8007306:	4601      	mov	r1, r0
 8007308:	6818      	ldr	r0, [r3, #0]
 800730a:	f7ff bfd3 	b.w	80072b4 <_raise_r>
 800730e:	bf00      	nop
 8007310:	2000000c 	.word	0x2000000c

08007314 <_kill_r>:
 8007314:	b538      	push	{r3, r4, r5, lr}
 8007316:	4d07      	ldr	r5, [pc, #28]	; (8007334 <_kill_r+0x20>)
 8007318:	2300      	movs	r3, #0
 800731a:	4604      	mov	r4, r0
 800731c:	4608      	mov	r0, r1
 800731e:	4611      	mov	r1, r2
 8007320:	602b      	str	r3, [r5, #0]
 8007322:	f7fa fb89 	bl	8001a38 <_kill>
 8007326:	1c43      	adds	r3, r0, #1
 8007328:	d102      	bne.n	8007330 <_kill_r+0x1c>
 800732a:	682b      	ldr	r3, [r5, #0]
 800732c:	b103      	cbz	r3, 8007330 <_kill_r+0x1c>
 800732e:	6023      	str	r3, [r4, #0]
 8007330:	bd38      	pop	{r3, r4, r5, pc}
 8007332:	bf00      	nop
 8007334:	2000036c 	.word	0x2000036c

08007338 <_getpid_r>:
 8007338:	f7fa bb7c 	b.w	8001a34 <_getpid>

0800733c <_init>:
 800733c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800733e:	bf00      	nop
 8007340:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007342:	bc08      	pop	{r3}
 8007344:	469e      	mov	lr, r3
 8007346:	4770      	bx	lr

08007348 <_fini>:
 8007348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800734a:	bf00      	nop
 800734c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800734e:	bc08      	pop	{r3}
 8007350:	469e      	mov	lr, r3
 8007352:	4770      	bx	lr
