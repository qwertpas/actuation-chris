
actuation-chris.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000087e4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000404  080089b8  080089b8  000189b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008dbc  08008dbc  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08008dbc  08008dbc  00018dbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008dc4  08008dc4  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008dc4  08008dc4  00018dc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008dc8  08008dc8  00018dc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08008dcc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000017c  200001dc  08008fa8  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000358  08008fa8  00020358  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000169bb  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000306c  00000000  00000000  00036bc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001340  00000000  00000000  00039c38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001200  00000000  00000000  0003af78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000243ad  00000000  00000000  0003c178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018e8e  00000000  00000000  00060525  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d6abf  00000000  00000000  000793b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014fe72  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000061cc  00000000  00000000  0014fec4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800899c 	.word	0x0800899c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e0 	.word	0x200001e0
 800020c:	0800899c 	.word	0x0800899c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b08a      	sub	sp, #40	; 0x28
 8000f90:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f92:	f107 0314 	add.w	r3, r7, #20
 8000f96:	2200      	movs	r2, #0
 8000f98:	601a      	str	r2, [r3, #0]
 8000f9a:	605a      	str	r2, [r3, #4]
 8000f9c:	609a      	str	r2, [r3, #8]
 8000f9e:	60da      	str	r2, [r3, #12]
 8000fa0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	613b      	str	r3, [r7, #16]
 8000fa6:	4b3e      	ldr	r3, [pc, #248]	; (80010a0 <MX_GPIO_Init+0x114>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000faa:	4a3d      	ldr	r2, [pc, #244]	; (80010a0 <MX_GPIO_Init+0x114>)
 8000fac:	f043 0304 	orr.w	r3, r3, #4
 8000fb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fb2:	4b3b      	ldr	r3, [pc, #236]	; (80010a0 <MX_GPIO_Init+0x114>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb6:	f003 0304 	and.w	r3, r3, #4
 8000fba:	613b      	str	r3, [r7, #16]
 8000fbc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	60fb      	str	r3, [r7, #12]
 8000fc2:	4b37      	ldr	r3, [pc, #220]	; (80010a0 <MX_GPIO_Init+0x114>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc6:	4a36      	ldr	r2, [pc, #216]	; (80010a0 <MX_GPIO_Init+0x114>)
 8000fc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fce:	4b34      	ldr	r3, [pc, #208]	; (80010a0 <MX_GPIO_Init+0x114>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fd6:	60fb      	str	r3, [r7, #12]
 8000fd8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fda:	2300      	movs	r3, #0
 8000fdc:	60bb      	str	r3, [r7, #8]
 8000fde:	4b30      	ldr	r3, [pc, #192]	; (80010a0 <MX_GPIO_Init+0x114>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe2:	4a2f      	ldr	r2, [pc, #188]	; (80010a0 <MX_GPIO_Init+0x114>)
 8000fe4:	f043 0301 	orr.w	r3, r3, #1
 8000fe8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fea:	4b2d      	ldr	r3, [pc, #180]	; (80010a0 <MX_GPIO_Init+0x114>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fee:	f003 0301 	and.w	r3, r3, #1
 8000ff2:	60bb      	str	r3, [r7, #8]
 8000ff4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	607b      	str	r3, [r7, #4]
 8000ffa:	4b29      	ldr	r3, [pc, #164]	; (80010a0 <MX_GPIO_Init+0x114>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffe:	4a28      	ldr	r2, [pc, #160]	; (80010a0 <MX_GPIO_Init+0x114>)
 8001000:	f043 0302 	orr.w	r3, r3, #2
 8001004:	6313      	str	r3, [r2, #48]	; 0x30
 8001006:	4b26      	ldr	r3, [pc, #152]	; (80010a0 <MX_GPIO_Init+0x114>)
 8001008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100a:	f003 0302 	and.w	r3, r3, #2
 800100e:	607b      	str	r3, [r7, #4]
 8001010:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8001012:	2200      	movs	r2, #0
 8001014:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001018:	4822      	ldr	r0, [pc, #136]	; (80010a4 <MX_GPIO_Init+0x118>)
 800101a:	f001 faad 	bl	8002578 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_6, GPIO_PIN_RESET);
 800101e:	2200      	movs	r2, #0
 8001020:	2150      	movs	r1, #80	; 0x50
 8001022:	4821      	ldr	r0, [pc, #132]	; (80010a8 <MX_GPIO_Init+0x11c>)
 8001024:	f001 faa8 	bl	8002578 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001028:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800102c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800102e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001032:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001034:	2300      	movs	r3, #0
 8001036:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001038:	f107 0314 	add.w	r3, r7, #20
 800103c:	4619      	mov	r1, r3
 800103e:	481b      	ldr	r0, [pc, #108]	; (80010ac <MX_GPIO_Init+0x120>)
 8001040:	f001 f8ee 	bl	8002220 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001044:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001048:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800104a:	2301      	movs	r3, #1
 800104c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104e:	2300      	movs	r3, #0
 8001050:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001052:	2300      	movs	r3, #0
 8001054:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001056:	f107 0314 	add.w	r3, r7, #20
 800105a:	4619      	mov	r1, r3
 800105c:	4811      	ldr	r0, [pc, #68]	; (80010a4 <MX_GPIO_Init+0x118>)
 800105e:	f001 f8df 	bl	8002220 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8001062:	2350      	movs	r3, #80	; 0x50
 8001064:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001066:	2301      	movs	r3, #1
 8001068:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106a:	2300      	movs	r3, #0
 800106c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106e:	2300      	movs	r3, #0
 8001070:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001072:	f107 0314 	add.w	r3, r7, #20
 8001076:	4619      	mov	r1, r3
 8001078:	480b      	ldr	r0, [pc, #44]	; (80010a8 <MX_GPIO_Init+0x11c>)
 800107a:	f001 f8d1 	bl	8002220 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800107e:	2320      	movs	r3, #32
 8001080:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001082:	2300      	movs	r3, #0
 8001084:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001086:	2300      	movs	r3, #0
 8001088:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800108a:	f107 0314 	add.w	r3, r7, #20
 800108e:	4619      	mov	r1, r3
 8001090:	4805      	ldr	r0, [pc, #20]	; (80010a8 <MX_GPIO_Init+0x11c>)
 8001092:	f001 f8c5 	bl	8002220 <HAL_GPIO_Init>

}
 8001096:	bf00      	nop
 8001098:	3728      	adds	r7, #40	; 0x28
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	40023800 	.word	0x40023800
 80010a4:	40020000 	.word	0x40020000
 80010a8:	40020400 	.word	0x40020400
 80010ac:	40020800 	.word	0x40020800

080010b0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010b4:	4b12      	ldr	r3, [pc, #72]	; (8001100 <MX_I2C1_Init+0x50>)
 80010b6:	4a13      	ldr	r2, [pc, #76]	; (8001104 <MX_I2C1_Init+0x54>)
 80010b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80010ba:	4b11      	ldr	r3, [pc, #68]	; (8001100 <MX_I2C1_Init+0x50>)
 80010bc:	4a12      	ldr	r2, [pc, #72]	; (8001108 <MX_I2C1_Init+0x58>)
 80010be:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010c0:	4b0f      	ldr	r3, [pc, #60]	; (8001100 <MX_I2C1_Init+0x50>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80010c6:	4b0e      	ldr	r3, [pc, #56]	; (8001100 <MX_I2C1_Init+0x50>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010cc:	4b0c      	ldr	r3, [pc, #48]	; (8001100 <MX_I2C1_Init+0x50>)
 80010ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010d2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010d4:	4b0a      	ldr	r3, [pc, #40]	; (8001100 <MX_I2C1_Init+0x50>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80010da:	4b09      	ldr	r3, [pc, #36]	; (8001100 <MX_I2C1_Init+0x50>)
 80010dc:	2200      	movs	r2, #0
 80010de:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010e0:	4b07      	ldr	r3, [pc, #28]	; (8001100 <MX_I2C1_Init+0x50>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010e6:	4b06      	ldr	r3, [pc, #24]	; (8001100 <MX_I2C1_Init+0x50>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010ec:	4804      	ldr	r0, [pc, #16]	; (8001100 <MX_I2C1_Init+0x50>)
 80010ee:	f001 fa5d 	bl	80025ac <HAL_I2C_Init>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80010f8:	f000 fb2e 	bl	8001758 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010fc:	bf00      	nop
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	200001f8 	.word	0x200001f8
 8001104:	40005400 	.word	0x40005400
 8001108:	000186a0 	.word	0x000186a0

0800110c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b08a      	sub	sp, #40	; 0x28
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001114:	f107 0314 	add.w	r3, r7, #20
 8001118:	2200      	movs	r2, #0
 800111a:	601a      	str	r2, [r3, #0]
 800111c:	605a      	str	r2, [r3, #4]
 800111e:	609a      	str	r2, [r3, #8]
 8001120:	60da      	str	r2, [r3, #12]
 8001122:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a19      	ldr	r2, [pc, #100]	; (8001190 <HAL_I2C_MspInit+0x84>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d12c      	bne.n	8001188 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800112e:	2300      	movs	r3, #0
 8001130:	613b      	str	r3, [r7, #16]
 8001132:	4b18      	ldr	r3, [pc, #96]	; (8001194 <HAL_I2C_MspInit+0x88>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001136:	4a17      	ldr	r2, [pc, #92]	; (8001194 <HAL_I2C_MspInit+0x88>)
 8001138:	f043 0302 	orr.w	r3, r3, #2
 800113c:	6313      	str	r3, [r2, #48]	; 0x30
 800113e:	4b15      	ldr	r3, [pc, #84]	; (8001194 <HAL_I2C_MspInit+0x88>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001142:	f003 0302 	and.w	r3, r3, #2
 8001146:	613b      	str	r3, [r7, #16]
 8001148:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800114a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800114e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001150:	2312      	movs	r3, #18
 8001152:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001154:	2300      	movs	r3, #0
 8001156:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001158:	2303      	movs	r3, #3
 800115a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800115c:	2304      	movs	r3, #4
 800115e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001160:	f107 0314 	add.w	r3, r7, #20
 8001164:	4619      	mov	r1, r3
 8001166:	480c      	ldr	r0, [pc, #48]	; (8001198 <HAL_I2C_MspInit+0x8c>)
 8001168:	f001 f85a 	bl	8002220 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800116c:	2300      	movs	r3, #0
 800116e:	60fb      	str	r3, [r7, #12]
 8001170:	4b08      	ldr	r3, [pc, #32]	; (8001194 <HAL_I2C_MspInit+0x88>)
 8001172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001174:	4a07      	ldr	r2, [pc, #28]	; (8001194 <HAL_I2C_MspInit+0x88>)
 8001176:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800117a:	6413      	str	r3, [r2, #64]	; 0x40
 800117c:	4b05      	ldr	r3, [pc, #20]	; (8001194 <HAL_I2C_MspInit+0x88>)
 800117e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001180:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001184:	60fb      	str	r3, [r7, #12]
 8001186:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001188:	bf00      	nop
 800118a:	3728      	adds	r7, #40	; 0x28
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	40005400 	.word	0x40005400
 8001194:	40023800 	.word	0x40023800
 8001198:	40020400 	.word	0x40020400

0800119c <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int fd, char* ptr, int len) {
 800119c:	b580      	push	{r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	60f8      	str	r0, [r7, #12]
 80011a4:	60b9      	str	r1, [r7, #8]
 80011a6:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	b29a      	uxth	r2, r3
 80011ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80011b0:	68b9      	ldr	r1, [r7, #8]
 80011b2:	4804      	ldr	r0, [pc, #16]	; (80011c4 <_write+0x28>)
 80011b4:	f003 fd8f 	bl	8004cd6 <HAL_UART_Transmit>
   return len;
 80011b8:	687b      	ldr	r3, [r7, #4]
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	3710      	adds	r7, #16
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	20000300 	.word	0x20000300

080011c8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
//    printf("1 milli!\r\n");
}
 80011d0:	bf00      	nop
 80011d2:	370c      	adds	r7, #12
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr

080011dc <opcodes_to_spi>:

//copied from daq-testbed-basic
uint8_t opcodes_to_spi(uint16_t* opcodes, uint8_t num_opcodes, uint8_t* spi_bytes) {
 80011dc:	b480      	push	{r7}
 80011de:	b087      	sub	sp, #28
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	60f8      	str	r0, [r7, #12]
 80011e4:	460b      	mov	r3, r1
 80011e6:	607a      	str	r2, [r7, #4]
 80011e8:	72fb      	strb	r3, [r7, #11]
  for (uint8_t i = 0; i < num_opcodes; i++) {
 80011ea:	2300      	movs	r3, #0
 80011ec:	75fb      	strb	r3, [r7, #23]
 80011ee:	e020      	b.n	8001232 <opcodes_to_spi+0x56>
    spi_bytes[i * 3 + 0] = opcodes[i] >> 8;
 80011f0:	7dfb      	ldrb	r3, [r7, #23]
 80011f2:	005b      	lsls	r3, r3, #1
 80011f4:	68fa      	ldr	r2, [r7, #12]
 80011f6:	4413      	add	r3, r2
 80011f8:	881b      	ldrh	r3, [r3, #0]
 80011fa:	0a1b      	lsrs	r3, r3, #8
 80011fc:	b299      	uxth	r1, r3
 80011fe:	7dfa      	ldrb	r2, [r7, #23]
 8001200:	4613      	mov	r3, r2
 8001202:	005b      	lsls	r3, r3, #1
 8001204:	4413      	add	r3, r2
 8001206:	461a      	mov	r2, r3
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	4413      	add	r3, r2
 800120c:	b2ca      	uxtb	r2, r1
 800120e:	701a      	strb	r2, [r3, #0]
    spi_bytes[i * 3 + 1] = opcodes[i];
 8001210:	7dfb      	ldrb	r3, [r7, #23]
 8001212:	005b      	lsls	r3, r3, #1
 8001214:	68fa      	ldr	r2, [r7, #12]
 8001216:	4413      	add	r3, r2
 8001218:	8819      	ldrh	r1, [r3, #0]
 800121a:	7dfa      	ldrb	r2, [r7, #23]
 800121c:	4613      	mov	r3, r2
 800121e:	005b      	lsls	r3, r3, #1
 8001220:	4413      	add	r3, r2
 8001222:	3301      	adds	r3, #1
 8001224:	687a      	ldr	r2, [r7, #4]
 8001226:	4413      	add	r3, r2
 8001228:	b2ca      	uxtb	r2, r1
 800122a:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < num_opcodes; i++) {
 800122c:	7dfb      	ldrb	r3, [r7, #23]
 800122e:	3301      	adds	r3, #1
 8001230:	75fb      	strb	r3, [r7, #23]
 8001232:	7dfa      	ldrb	r2, [r7, #23]
 8001234:	7afb      	ldrb	r3, [r7, #11]
 8001236:	429a      	cmp	r2, r3
 8001238:	d3da      	bcc.n	80011f0 <opcodes_to_spi+0x14>
  }
  return num_opcodes * 3;
 800123a:	7afb      	ldrb	r3, [r7, #11]
 800123c:	461a      	mov	r2, r3
 800123e:	0052      	lsls	r2, r2, #1
 8001240:	4413      	add	r3, r2
 8001242:	b2db      	uxtb	r3, r3
}
 8001244:	4618      	mov	r0, r3
 8001246:	371c      	adds	r7, #28
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr

08001250 <write_single_reg>:
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 1); // CS high

  return (rx[0] << 8) | rx[1];
}

void write_single_reg(uint8_t address, uint16_t value) {
 8001250:	b580      	push	{r7, lr}
 8001252:	b086      	sub	sp, #24
 8001254:	af00      	add	r7, sp, #0
 8001256:	4603      	mov	r3, r0
 8001258:	460a      	mov	r2, r1
 800125a:	71fb      	strb	r3, [r7, #7]
 800125c:	4613      	mov	r3, r2
 800125e:	80bb      	strh	r3, [r7, #4]
  uint16_t opcodes[] = { 0x6000 | (address << 7), value };
 8001260:	79fb      	ldrb	r3, [r7, #7]
 8001262:	01db      	lsls	r3, r3, #7
 8001264:	b21b      	sxth	r3, r3
 8001266:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 800126a:	b21b      	sxth	r3, r3
 800126c:	b29b      	uxth	r3, r3
 800126e:	82bb      	strh	r3, [r7, #20]
 8001270:	88bb      	ldrh	r3, [r7, #4]
 8001272:	82fb      	strh	r3, [r7, #22]

  uint8_t tx[6] = {0};
 8001274:	2300      	movs	r3, #0
 8001276:	60fb      	str	r3, [r7, #12]
 8001278:	2300      	movs	r3, #0
 800127a:	823b      	strh	r3, [r7, #16]
  opcodes_to_spi(opcodes, 2, tx);
 800127c:	f107 020c 	add.w	r2, r7, #12
 8001280:	f107 0314 	add.w	r3, r7, #20
 8001284:	2102      	movs	r1, #2
 8001286:	4618      	mov	r0, r3
 8001288:	f7ff ffa8 	bl	80011dc <opcodes_to_spi>

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 0); // CS low
 800128c:	2200      	movs	r2, #0
 800128e:	2140      	movs	r1, #64	; 0x40
 8001290:	4809      	ldr	r0, [pc, #36]	; (80012b8 <write_single_reg+0x68>)
 8001292:	f001 f971 	bl	8002578 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, tx, 6, HAL_MAX_DELAY); // send command
 8001296:	f107 010c 	add.w	r1, r7, #12
 800129a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800129e:	2206      	movs	r2, #6
 80012a0:	4806      	ldr	r0, [pc, #24]	; (80012bc <write_single_reg+0x6c>)
 80012a2:	f002 fca0 	bl	8003be6 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 1); // CS high
 80012a6:	2201      	movs	r2, #1
 80012a8:	2140      	movs	r1, #64	; 0x40
 80012aa:	4803      	ldr	r0, [pc, #12]	; (80012b8 <write_single_reg+0x68>)
 80012ac:	f001 f964 	bl	8002578 <HAL_GPIO_WritePin>
}
 80012b0:	bf00      	nop
 80012b2:	3718      	adds	r7, #24
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	40020400 	.word	0x40020400
 80012bc:	2000025c 	.word	0x2000025c

080012c0 <adc_to_volt>:

float adc_to_volt(int32_t adc_count, int32_t gain){
 80012c0:	b5b0      	push	{r4, r5, r7, lr}
 80012c2:	b084      	sub	sp, #16
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	6039      	str	r1, [r7, #0]
	float volt = ((adc_count-1) / 8388608.0) * 1.2 / (float)(gain);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	3b01      	subs	r3, #1
 80012ce:	4618      	mov	r0, r3
 80012d0:	f7ff f948 	bl	8000564 <__aeabi_i2d>
 80012d4:	f04f 0200 	mov.w	r2, #0
 80012d8:	4b17      	ldr	r3, [pc, #92]	; (8001338 <adc_to_volt+0x78>)
 80012da:	f7ff fad7 	bl	800088c <__aeabi_ddiv>
 80012de:	4602      	mov	r2, r0
 80012e0:	460b      	mov	r3, r1
 80012e2:	4610      	mov	r0, r2
 80012e4:	4619      	mov	r1, r3
 80012e6:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 80012ea:	4b14      	ldr	r3, [pc, #80]	; (800133c <adc_to_volt+0x7c>)
 80012ec:	f7ff f9a4 	bl	8000638 <__aeabi_dmul>
 80012f0:	4602      	mov	r2, r0
 80012f2:	460b      	mov	r3, r1
 80012f4:	4614      	mov	r4, r2
 80012f6:	461d      	mov	r5, r3
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	ee07 3a90 	vmov	s15, r3
 80012fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001302:	ee17 0a90 	vmov	r0, s15
 8001306:	f7ff f93f 	bl	8000588 <__aeabi_f2d>
 800130a:	4602      	mov	r2, r0
 800130c:	460b      	mov	r3, r1
 800130e:	4620      	mov	r0, r4
 8001310:	4629      	mov	r1, r5
 8001312:	f7ff fabb 	bl	800088c <__aeabi_ddiv>
 8001316:	4602      	mov	r2, r0
 8001318:	460b      	mov	r3, r1
 800131a:	4610      	mov	r0, r2
 800131c:	4619      	mov	r1, r3
 800131e:	f7ff fc63 	bl	8000be8 <__aeabi_d2f>
 8001322:	4603      	mov	r3, r0
 8001324:	60fb      	str	r3, [r7, #12]
	return volt;
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	ee07 3a90 	vmov	s15, r3
}
 800132c:	eeb0 0a67 	vmov.f32	s0, s15
 8001330:	3710      	adds	r7, #16
 8001332:	46bd      	mov	sp, r7
 8001334:	bdb0      	pop	{r4, r5, r7, pc}
 8001336:	bf00      	nop
 8001338:	41600000 	.word	0x41600000
 800133c:	3ff33333 	.word	0x3ff33333

08001340 <adc_to_psi>:

float adc_to_psi(int32_t adc_count){
 8001340:	b580      	push	{r7, lr}
 8001342:	b084      	sub	sp, #16
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
	float mA = adc_to_volt(adc_count, 1) * 1000 / 55.5;
 8001348:	2101      	movs	r1, #1
 800134a:	6878      	ldr	r0, [r7, #4]
 800134c:	f7ff ffb8 	bl	80012c0 <adc_to_volt>
 8001350:	eef0 7a40 	vmov.f32	s15, s0
 8001354:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80013c8 <adc_to_psi+0x88>
 8001358:	ee67 7a87 	vmul.f32	s15, s15, s14
 800135c:	ee17 0a90 	vmov	r0, s15
 8001360:	f7ff f912 	bl	8000588 <__aeabi_f2d>
 8001364:	a316      	add	r3, pc, #88	; (adr r3, 80013c0 <adc_to_psi+0x80>)
 8001366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800136a:	f7ff fa8f 	bl	800088c <__aeabi_ddiv>
 800136e:	4602      	mov	r2, r0
 8001370:	460b      	mov	r3, r1
 8001372:	4610      	mov	r0, r2
 8001374:	4619      	mov	r1, r3
 8001376:	f7ff fc37 	bl	8000be8 <__aeabi_d2f>
 800137a:	4603      	mov	r3, r0
 800137c:	60fb      	str	r3, [r7, #12]
	float psi = 62.5 * mA + -250;
 800137e:	68f8      	ldr	r0, [r7, #12]
 8001380:	f7ff f902 	bl	8000588 <__aeabi_f2d>
 8001384:	f04f 0200 	mov.w	r2, #0
 8001388:	4b10      	ldr	r3, [pc, #64]	; (80013cc <adc_to_psi+0x8c>)
 800138a:	f7ff f955 	bl	8000638 <__aeabi_dmul>
 800138e:	4602      	mov	r2, r0
 8001390:	460b      	mov	r3, r1
 8001392:	4610      	mov	r0, r2
 8001394:	4619      	mov	r1, r3
 8001396:	f04f 0200 	mov.w	r2, #0
 800139a:	4b0d      	ldr	r3, [pc, #52]	; (80013d0 <adc_to_psi+0x90>)
 800139c:	f7fe ff94 	bl	80002c8 <__aeabi_dsub>
 80013a0:	4602      	mov	r2, r0
 80013a2:	460b      	mov	r3, r1
 80013a4:	4610      	mov	r0, r2
 80013a6:	4619      	mov	r1, r3
 80013a8:	f7ff fc1e 	bl	8000be8 <__aeabi_d2f>
 80013ac:	4603      	mov	r3, r0
 80013ae:	60bb      	str	r3, [r7, #8]
	return psi;
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	ee07 3a90 	vmov	s15, r3
}
 80013b6:	eeb0 0a67 	vmov.f32	s0, s15
 80013ba:	3710      	adds	r7, #16
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	00000000 	.word	0x00000000
 80013c4:	404bc000 	.word	0x404bc000
 80013c8:	447a0000 	.word	0x447a0000
 80013cc:	404f4000 	.word	0x404f4000
 80013d0:	406f4000 	.word	0x406f4000

080013d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b0a2      	sub	sp, #136	; 0x88
 80013d8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013da:	f000 fce7 	bl	8001dac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013de:	f000 f947 	bl	8001670 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013e2:	f7ff fdd3 	bl	8000f8c <MX_GPIO_Init>
  MX_I2C1_Init();
 80013e6:	f7ff fe63 	bl	80010b0 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80013ea:	f000 fc3b 	bl	8001c64 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80013ee:	f000 f9eb 	bl	80017c8 <MX_SPI1_Init>
  MX_TIM1_Init();
 80013f2:	f000 fba7 	bl	8001b44 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  // disable printf buffering
  setvbuf(stdout, NULL, _IONBF, 0);
 80013f6:	4b93      	ldr	r3, [pc, #588]	; (8001644 <main+0x270>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	6898      	ldr	r0, [r3, #8]
 80013fc:	2300      	movs	r3, #0
 80013fe:	2202      	movs	r2, #2
 8001400:	2100      	movs	r1, #0
 8001402:	f005 f959 	bl	80066b8 <setvbuf>
  
  HAL_TIM_Base_Start_IT(&htim1);
 8001406:	4890      	ldr	r0, [pc, #576]	; (8001648 <main+0x274>)
 8001408:	f002 ffe6 	bl	80043d8 <HAL_TIM_Base_Start_IT>

  pca9534_init_output(&hi2c1, PCA9534_OUTPUT_1);
 800140c:	2120      	movs	r1, #32
 800140e:	488f      	ldr	r0, [pc, #572]	; (800164c <main+0x278>)
 8001410:	f000 f9c9 	bl	80017a6 <pca9534_init_output>
  pca9534_init_output(&hi2c1, PCA9534_OUTPUT_2);
 8001414:	2121      	movs	r1, #33	; 0x21
 8001416:	488d      	ldr	r0, [pc, #564]	; (800164c <main+0x278>)
 8001418:	f000 f9c5 	bl	80017a6 <pca9534_init_output>

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);
 800141c:	2201      	movs	r2, #1
 800141e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001422:	488b      	ldr	r0, [pc, #556]	; (8001650 <main+0x27c>)
 8001424:	f001 f8a8 	bl	8002578 <HAL_GPIO_WritePin>
  //   pca9534_set_channel(&hi2c1, PCA9534_OUTPUT_2, i, 0);
  // }


  //DAQ TESBED init
  HAL_Delay(50);
 8001428:	2032      	movs	r0, #50	; 0x32
 800142a:	f000 fd31 	bl	8001e90 <HAL_Delay>

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1); // deassert RESET
 800142e:	2201      	movs	r2, #1
 8001430:	2110      	movs	r1, #16
 8001432:	4888      	ldr	r0, [pc, #544]	; (8001654 <main+0x280>)
 8001434:	f001 f8a0 	bl	8002578 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 1); // deassert CS
 8001438:	2201      	movs	r2, #1
 800143a:	2140      	movs	r1, #64	; 0x40
 800143c:	4885      	ldr	r0, [pc, #532]	; (8001654 <main+0x280>)
 800143e:	f001 f89b 	bl	8002578 <HAL_GPIO_WritePin>


  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0); // strobe RESET
 8001442:	2200      	movs	r2, #0
 8001444:	2110      	movs	r1, #16
 8001446:	4883      	ldr	r0, [pc, #524]	; (8001654 <main+0x280>)
 8001448:	f001 f896 	bl	8002578 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1); // strobe RESET
 800144c:	2201      	movs	r2, #1
 800144e:	2110      	movs	r1, #16
 8001450:	4880      	ldr	r0, [pc, #512]	; (8001654 <main+0x280>)
 8001452:	f001 f891 	bl	8002578 <HAL_GPIO_WritePin>

  HAL_Delay(100);
 8001456:	2064      	movs	r0, #100	; 0x64
 8001458:	f000 fd1a 	bl	8001e90 <HAL_Delay>

  write_single_reg(0x04, 0x0400);
 800145c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001460:	2004      	movs	r0, #4
 8001462:	f7ff fef5 	bl	8001250 <write_single_reg>
  //set channel 2 gain to 16
  //0000 0100 0000 0000

  uint32_t ctr = 0;
 8001466:	2300      	movs	r3, #0
 8001468:	67fb      	str	r3, [r7, #124]	; 0x7c





    uint8_t drdy = !HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5); // read DRDY
 800146a:	2120      	movs	r1, #32
 800146c:	4879      	ldr	r0, [pc, #484]	; (8001654 <main+0x280>)
 800146e:	f001 f86b 	bl	8002548 <HAL_GPIO_ReadPin>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	bf0c      	ite	eq
 8001478:	2301      	moveq	r3, #1
 800147a:	2300      	movne	r3, #0
 800147c:	b2db      	uxtb	r3, r3
 800147e:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73

	if (drdy) {
 8001482:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8001486:	2b00      	cmp	r3, #0
 8001488:	f000 80bc 	beq.w	8001604 <main+0x230>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 0);
 800148c:	2200      	movs	r2, #0
 800148e:	2140      	movs	r1, #64	; 0x40
 8001490:	4870      	ldr	r0, [pc, #448]	; (8001654 <main+0x280>)
 8001492:	f001 f871 	bl	8002578 <HAL_GPIO_WritePin>

		uint8_t tx_data[32] = {0};
 8001496:	2300      	movs	r3, #0
 8001498:	607b      	str	r3, [r7, #4]
 800149a:	f107 0308 	add.w	r3, r7, #8
 800149e:	2200      	movs	r2, #0
 80014a0:	601a      	str	r2, [r3, #0]
 80014a2:	605a      	str	r2, [r3, #4]
 80014a4:	609a      	str	r2, [r3, #8]
 80014a6:	60da      	str	r2, [r3, #12]
 80014a8:	611a      	str	r2, [r3, #16]
 80014aa:	615a      	str	r2, [r3, #20]
 80014ac:	619a      	str	r2, [r3, #24]
		uint8_t rx_data[32];

		HAL_SPI_TransmitReceive(&hspi1, tx_data, rx_data, 27, HAL_MAX_DELAY);
 80014ae:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80014b2:	1d39      	adds	r1, r7, #4
 80014b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80014b8:	9300      	str	r3, [sp, #0]
 80014ba:	231b      	movs	r3, #27
 80014bc:	4866      	ldr	r0, [pc, #408]	; (8001658 <main+0x284>)
 80014be:	f002 fcce 	bl	8003e5e <HAL_SPI_TransmitReceive>



		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 1);
 80014c2:	2201      	movs	r2, #1
 80014c4:	2140      	movs	r1, #64	; 0x40
 80014c6:	4863      	ldr	r0, [pc, #396]	; (8001654 <main+0x280>)
 80014c8:	f001 f856 	bl	8002578 <HAL_GPIO_WritePin>

		serial_data[0] = ctr;
 80014cc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80014ce:	ee07 3a90 	vmov	s15, r3
 80014d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014d6:	4b61      	ldr	r3, [pc, #388]	; (800165c <main+0x288>)
 80014d8:	edc3 7a00 	vstr	s15, [r3]

//        printf("test!\r\n");
//        printf("{%ld} status %x %x %x %x %x %x %x %x %x\r\n", ctr, rx_data[0], rx_data[1], rx_data[2], rx_data[3], rx_data[4], rx_data[5], rx_data[6], rx_data[7], rx_data[8]);

		int32_t channels[8];
		for (uint8_t i = 0; i < 8; i++) {
 80014dc:	2300      	movs	r3, #0
 80014de:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 80014e2:	e08a      	b.n	80015fa <main+0x226>
		  channels[i] = (rx_data[i * 3 + 3] << 24) | (rx_data[i * 3 + 4] << 16) | (rx_data[i * 3 + 5] << 8);
 80014e4:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 80014e8:	1c5a      	adds	r2, r3, #1
 80014ea:	4613      	mov	r3, r2
 80014ec:	005b      	lsls	r3, r3, #1
 80014ee:	4413      	add	r3, r2
 80014f0:	3380      	adds	r3, #128	; 0x80
 80014f2:	443b      	add	r3, r7
 80014f4:	f813 3c5c 	ldrb.w	r3, [r3, #-92]
 80014f8:	0619      	lsls	r1, r3, #24
 80014fa:	f897 207b 	ldrb.w	r2, [r7, #123]	; 0x7b
 80014fe:	4613      	mov	r3, r2
 8001500:	005b      	lsls	r3, r3, #1
 8001502:	4413      	add	r3, r2
 8001504:	3304      	adds	r3, #4
 8001506:	3380      	adds	r3, #128	; 0x80
 8001508:	443b      	add	r3, r7
 800150a:	f813 3c5c 	ldrb.w	r3, [r3, #-92]
 800150e:	041b      	lsls	r3, r3, #16
 8001510:	4319      	orrs	r1, r3
 8001512:	f897 207b 	ldrb.w	r2, [r7, #123]	; 0x7b
 8001516:	4613      	mov	r3, r2
 8001518:	005b      	lsls	r3, r3, #1
 800151a:	4413      	add	r3, r2
 800151c:	3305      	adds	r3, #5
 800151e:	3380      	adds	r3, #128	; 0x80
 8001520:	443b      	add	r3, r7
 8001522:	f813 3c5c 	ldrb.w	r3, [r3, #-92]
 8001526:	021a      	lsls	r2, r3, #8
 8001528:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 800152c:	430a      	orrs	r2, r1
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	3380      	adds	r3, #128	; 0x80
 8001532:	443b      	add	r3, r7
 8001534:	f843 2c3c 	str.w	r2, [r3, #-60]
		  channels[i] >>= 8;
 8001538:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 800153c:	009b      	lsls	r3, r3, #2
 800153e:	3380      	adds	r3, #128	; 0x80
 8001540:	443b      	add	r3, r7
 8001542:	f853 2c3c 	ldr.w	r2, [r3, #-60]
 8001546:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 800154a:	1212      	asrs	r2, r2, #8
 800154c:	009b      	lsls	r3, r3, #2
 800154e:	3380      	adds	r3, #128	; 0x80
 8001550:	443b      	add	r3, r7
 8001552:	f843 2c3c 	str.w	r2, [r3, #-60]

		  if (i == 0) {
 8001556:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 800155a:	2b00      	cmp	r3, #0
 800155c:	d10e      	bne.n	800157c <main+0x1a8>
			float psi = adc_to_psi(channels[i]);
 800155e:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	3380      	adds	r3, #128	; 0x80
 8001566:	443b      	add	r3, r7
 8001568:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800156c:	4618      	mov	r0, r3
 800156e:	f7ff fee7 	bl	8001340 <adc_to_psi>
 8001572:	ed87 0a1b 	vstr	s0, [r7, #108]	; 0x6c
//			if(psi > -10){ //hacky fix if pressure transducer is not connected or broken or transmitting intermittently
//				printf("PSI 0: %f \r\n", psi);
				serial_data[1] = psi;
 8001576:	4a39      	ldr	r2, [pc, #228]	; (800165c <main+0x288>)
 8001578:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800157a:	6053      	str	r3, [r2, #4]
//			}
		  }
		  if (i == 1) {
 800157c:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8001580:	2b01      	cmp	r3, #1
 8001582:	d10e      	bne.n	80015a2 <main+0x1ce>
			float psi = adc_to_psi(channels[i]);
 8001584:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8001588:	009b      	lsls	r3, r3, #2
 800158a:	3380      	adds	r3, #128	; 0x80
 800158c:	443b      	add	r3, r7
 800158e:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8001592:	4618      	mov	r0, r3
 8001594:	f7ff fed4 	bl	8001340 <adc_to_psi>
 8001598:	ed87 0a1a 	vstr	s0, [r7, #104]	; 0x68
//			if(psi > -10){ //hacky fix if pressure transducer is not connected or broken or transmitting intermittently
//				printf("PSI 1: %f \r\n", psi);
				serial_data[2] = psi;
 800159c:	4a2f      	ldr	r2, [pc, #188]	; (800165c <main+0x288>)
 800159e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80015a0:	6093      	str	r3, [r2, #8]
//			}
		  }

          if (i == 2) {
 80015a2:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 80015a6:	2b02      	cmp	r3, #2
 80015a8:	d122      	bne.n	80015f0 <main+0x21c>
        	float mV = adc_to_volt(channels[2],16) * 1000.0 - 0.5;
 80015aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80015ac:	2110      	movs	r1, #16
 80015ae:	4618      	mov	r0, r3
 80015b0:	f7ff fe86 	bl	80012c0 <adc_to_volt>
 80015b4:	ee10 3a10 	vmov	r3, s0
 80015b8:	4618      	mov	r0, r3
 80015ba:	f7fe ffe5 	bl	8000588 <__aeabi_f2d>
 80015be:	f04f 0200 	mov.w	r2, #0
 80015c2:	4b27      	ldr	r3, [pc, #156]	; (8001660 <main+0x28c>)
 80015c4:	f7ff f838 	bl	8000638 <__aeabi_dmul>
 80015c8:	4602      	mov	r2, r0
 80015ca:	460b      	mov	r3, r1
 80015cc:	4610      	mov	r0, r2
 80015ce:	4619      	mov	r1, r3
 80015d0:	f04f 0200 	mov.w	r2, #0
 80015d4:	4b23      	ldr	r3, [pc, #140]	; (8001664 <main+0x290>)
 80015d6:	f7fe fe77 	bl	80002c8 <__aeabi_dsub>
 80015da:	4602      	mov	r2, r0
 80015dc:	460b      	mov	r3, r1
 80015de:	4610      	mov	r0, r2
 80015e0:	4619      	mov	r1, r3
 80015e2:	f7ff fb01 	bl	8000be8 <__aeabi_d2f>
 80015e6:	4603      	mov	r3, r0
 80015e8:	667b      	str	r3, [r7, #100]	; 0x64

//        	if(fabs(mV) < 1000){ //hacky fix if pressure transducer is not connected or broken or transmitting intermittently
//				printf("TC 1: %f \r\n", mV);
				serial_data[3] = mV;
 80015ea:	4a1c      	ldr	r2, [pc, #112]	; (800165c <main+0x288>)
 80015ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80015ee:	60d3      	str	r3, [r2, #12]
		for (uint8_t i = 0; i < 8; i++) {
 80015f0:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 80015f4:	3301      	adds	r3, #1
 80015f6:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 80015fa:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 80015fe:	2b07      	cmp	r3, #7
 8001600:	f67f af70 	bls.w	80014e4 <main+0x110>
	  }else{
//		  printf("DRDY not ready \r\n");
	  }


	for(int i = 0; i < 4; i++){
 8001604:	2300      	movs	r3, #0
 8001606:	677b      	str	r3, [r7, #116]	; 0x74
 8001608:	e00f      	b.n	800162a <main+0x256>
		printf("%f, ", serial_data[i]);
 800160a:	4a14      	ldr	r2, [pc, #80]	; (800165c <main+0x288>)
 800160c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800160e:	009b      	lsls	r3, r3, #2
 8001610:	4413      	add	r3, r2
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4618      	mov	r0, r3
 8001616:	f7fe ffb7 	bl	8000588 <__aeabi_f2d>
 800161a:	4602      	mov	r2, r0
 800161c:	460b      	mov	r3, r1
 800161e:	4812      	ldr	r0, [pc, #72]	; (8001668 <main+0x294>)
 8001620:	f004 ffbc 	bl	800659c <iprintf>
	for(int i = 0; i < 4; i++){
 8001624:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001626:	3301      	adds	r3, #1
 8001628:	677b      	str	r3, [r7, #116]	; 0x74
 800162a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800162c:	2b03      	cmp	r3, #3
 800162e:	ddec      	ble.n	800160a <main+0x236>
	}
	printf("\r\n");
 8001630:	480e      	ldr	r0, [pc, #56]	; (800166c <main+0x298>)
 8001632:	f005 f839 	bl	80066a8 <puts>

	HAL_Delay(1);
 8001636:	2001      	movs	r0, #1
 8001638:	f000 fc2a 	bl	8001e90 <HAL_Delay>
	ctr++;
 800163c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800163e:	3301      	adds	r3, #1
 8001640:	67fb      	str	r3, [r7, #124]	; 0x7c
  {
 8001642:	e712      	b.n	800146a <main+0x96>
 8001644:	2000000c 	.word	0x2000000c
 8001648:	200002b8 	.word	0x200002b8
 800164c:	200001f8 	.word	0x200001f8
 8001650:	40020000 	.word	0x40020000
 8001654:	40020400 	.word	0x40020400
 8001658:	2000025c 	.word	0x2000025c
 800165c:	2000024c 	.word	0x2000024c
 8001660:	408f4000 	.word	0x408f4000
 8001664:	3fe00000 	.word	0x3fe00000
 8001668:	080089bc 	.word	0x080089bc
 800166c:	080089c4 	.word	0x080089c4

08001670 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b094      	sub	sp, #80	; 0x50
 8001674:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001676:	f107 031c 	add.w	r3, r7, #28
 800167a:	2234      	movs	r2, #52	; 0x34
 800167c:	2100      	movs	r1, #0
 800167e:	4618      	mov	r0, r3
 8001680:	f004 fb1a 	bl	8005cb8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001684:	f107 0308 	add.w	r3, r7, #8
 8001688:	2200      	movs	r2, #0
 800168a:	601a      	str	r2, [r3, #0]
 800168c:	605a      	str	r2, [r3, #4]
 800168e:	609a      	str	r2, [r3, #8]
 8001690:	60da      	str	r2, [r3, #12]
 8001692:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001694:	2300      	movs	r3, #0
 8001696:	607b      	str	r3, [r7, #4]
 8001698:	4b2d      	ldr	r3, [pc, #180]	; (8001750 <SystemClock_Config+0xe0>)
 800169a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169c:	4a2c      	ldr	r2, [pc, #176]	; (8001750 <SystemClock_Config+0xe0>)
 800169e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016a2:	6413      	str	r3, [r2, #64]	; 0x40
 80016a4:	4b2a      	ldr	r3, [pc, #168]	; (8001750 <SystemClock_Config+0xe0>)
 80016a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ac:	607b      	str	r3, [r7, #4]
 80016ae:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016b0:	2300      	movs	r3, #0
 80016b2:	603b      	str	r3, [r7, #0]
 80016b4:	4b27      	ldr	r3, [pc, #156]	; (8001754 <SystemClock_Config+0xe4>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a26      	ldr	r2, [pc, #152]	; (8001754 <SystemClock_Config+0xe4>)
 80016ba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80016be:	6013      	str	r3, [r2, #0]
 80016c0:	4b24      	ldr	r3, [pc, #144]	; (8001754 <SystemClock_Config+0xe4>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80016c8:	603b      	str	r3, [r7, #0]
 80016ca:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016cc:	2301      	movs	r3, #1
 80016ce:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80016d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016d4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016d6:	2302      	movs	r3, #2
 80016d8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016da:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80016de:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80016e0:	2308      	movs	r3, #8
 80016e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 360;
 80016e4:	f44f 73b4 	mov.w	r3, #360	; 0x168
 80016e8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016ea:	2302      	movs	r3, #2
 80016ec:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80016ee:	2302      	movs	r3, #2
 80016f0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80016f2:	2302      	movs	r3, #2
 80016f4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016f6:	f107 031c 	add.w	r3, r7, #28
 80016fa:	4618      	mov	r0, r3
 80016fc:	f001 ff4c 	bl	8003598 <HAL_RCC_OscConfig>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001706:	f000 f827 	bl	8001758 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800170a:	f001 fbab 	bl	8002e64 <HAL_PWREx_EnableOverDrive>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d001      	beq.n	8001718 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8001714:	f000 f820 	bl	8001758 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001718:	230f      	movs	r3, #15
 800171a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800171c:	2302      	movs	r3, #2
 800171e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001720:	2300      	movs	r3, #0
 8001722:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001724:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001728:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800172a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800172e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001730:	f107 0308 	add.w	r3, r7, #8
 8001734:	2105      	movs	r1, #5
 8001736:	4618      	mov	r0, r3
 8001738:	f001 fbe4 	bl	8002f04 <HAL_RCC_ClockConfig>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8001742:	f000 f809 	bl	8001758 <Error_Handler>
  }
}
 8001746:	bf00      	nop
 8001748:	3750      	adds	r7, #80	; 0x50
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	40023800 	.word	0x40023800
 8001754:	40007000 	.word	0x40007000

08001758 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800175c:	b672      	cpsid	i
}
 800175e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001760:	e7fe      	b.n	8001760 <Error_Handler+0x8>

08001762 <pca9534_write_reg>:
    HAL_I2C_Mem_Read(hi2c, addr, reg, 1, &read_data, 1, 10);

    return read_data;
}

void pca9534_write_reg(I2C_HandleTypeDef *hi2c, uint8_t addr, uint8_t reg, uint8_t write_data) {
 8001762:	b580      	push	{r7, lr}
 8001764:	b086      	sub	sp, #24
 8001766:	af04      	add	r7, sp, #16
 8001768:	6078      	str	r0, [r7, #4]
 800176a:	4608      	mov	r0, r1
 800176c:	4611      	mov	r1, r2
 800176e:	461a      	mov	r2, r3
 8001770:	4603      	mov	r3, r0
 8001772:	70fb      	strb	r3, [r7, #3]
 8001774:	460b      	mov	r3, r1
 8001776:	70bb      	strb	r3, [r7, #2]
 8001778:	4613      	mov	r3, r2
 800177a:	707b      	strb	r3, [r7, #1]
    addr <<= 1;
 800177c:	78fb      	ldrb	r3, [r7, #3]
 800177e:	005b      	lsls	r3, r3, #1
 8001780:	70fb      	strb	r3, [r7, #3]

    HAL_I2C_Mem_Write(hi2c, addr, reg, 1, &write_data, 1, 10);
 8001782:	78fb      	ldrb	r3, [r7, #3]
 8001784:	b299      	uxth	r1, r3
 8001786:	78bb      	ldrb	r3, [r7, #2]
 8001788:	b29a      	uxth	r2, r3
 800178a:	230a      	movs	r3, #10
 800178c:	9302      	str	r3, [sp, #8]
 800178e:	2301      	movs	r3, #1
 8001790:	9301      	str	r3, [sp, #4]
 8001792:	1c7b      	adds	r3, r7, #1
 8001794:	9300      	str	r3, [sp, #0]
 8001796:	2301      	movs	r3, #1
 8001798:	6878      	ldr	r0, [r7, #4]
 800179a:	f001 f84b 	bl	8002834 <HAL_I2C_Mem_Write>
}
 800179e:	bf00      	nop
 80017a0:	3708      	adds	r7, #8
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}

080017a6 <pca9534_init_output>:

void pca9534_init_output(I2C_HandleTypeDef *hi2c, uint8_t addr) {
 80017a6:	b580      	push	{r7, lr}
 80017a8:	b082      	sub	sp, #8
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	6078      	str	r0, [r7, #4]
 80017ae:	460b      	mov	r3, r1
 80017b0:	70fb      	strb	r3, [r7, #3]
    // configure all ports to be outputs
    pca9534_write_reg(hi2c, addr, PCA9534_REG_CONFIG, 0x00);
 80017b2:	78f9      	ldrb	r1, [r7, #3]
 80017b4:	2300      	movs	r3, #0
 80017b6:	2203      	movs	r2, #3
 80017b8:	6878      	ldr	r0, [r7, #4]
 80017ba:	f7ff ffd2 	bl	8001762 <pca9534_write_reg>
}
 80017be:	bf00      	nop
 80017c0:	3708      	adds	r7, #8
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
	...

080017c8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80017cc:	4b17      	ldr	r3, [pc, #92]	; (800182c <MX_SPI1_Init+0x64>)
 80017ce:	4a18      	ldr	r2, [pc, #96]	; (8001830 <MX_SPI1_Init+0x68>)
 80017d0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80017d2:	4b16      	ldr	r3, [pc, #88]	; (800182c <MX_SPI1_Init+0x64>)
 80017d4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80017d8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80017da:	4b14      	ldr	r3, [pc, #80]	; (800182c <MX_SPI1_Init+0x64>)
 80017dc:	2200      	movs	r2, #0
 80017de:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80017e0:	4b12      	ldr	r3, [pc, #72]	; (800182c <MX_SPI1_Init+0x64>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017e6:	4b11      	ldr	r3, [pc, #68]	; (800182c <MX_SPI1_Init+0x64>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80017ec:	4b0f      	ldr	r3, [pc, #60]	; (800182c <MX_SPI1_Init+0x64>)
 80017ee:	2201      	movs	r2, #1
 80017f0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80017f2:	4b0e      	ldr	r3, [pc, #56]	; (800182c <MX_SPI1_Init+0x64>)
 80017f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017f8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80017fa:	4b0c      	ldr	r3, [pc, #48]	; (800182c <MX_SPI1_Init+0x64>)
 80017fc:	2218      	movs	r2, #24
 80017fe:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001800:	4b0a      	ldr	r3, [pc, #40]	; (800182c <MX_SPI1_Init+0x64>)
 8001802:	2200      	movs	r2, #0
 8001804:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001806:	4b09      	ldr	r3, [pc, #36]	; (800182c <MX_SPI1_Init+0x64>)
 8001808:	2200      	movs	r2, #0
 800180a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800180c:	4b07      	ldr	r3, [pc, #28]	; (800182c <MX_SPI1_Init+0x64>)
 800180e:	2200      	movs	r2, #0
 8001810:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001812:	4b06      	ldr	r3, [pc, #24]	; (800182c <MX_SPI1_Init+0x64>)
 8001814:	220a      	movs	r2, #10
 8001816:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001818:	4804      	ldr	r0, [pc, #16]	; (800182c <MX_SPI1_Init+0x64>)
 800181a:	f002 f95b 	bl	8003ad4 <HAL_SPI_Init>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d001      	beq.n	8001828 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001824:	f7ff ff98 	bl	8001758 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001828:	bf00      	nop
 800182a:	bd80      	pop	{r7, pc}
 800182c:	2000025c 	.word	0x2000025c
 8001830:	40013000 	.word	0x40013000

08001834 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b08a      	sub	sp, #40	; 0x28
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800183c:	f107 0314 	add.w	r3, r7, #20
 8001840:	2200      	movs	r2, #0
 8001842:	601a      	str	r2, [r3, #0]
 8001844:	605a      	str	r2, [r3, #4]
 8001846:	609a      	str	r2, [r3, #8]
 8001848:	60da      	str	r2, [r3, #12]
 800184a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a19      	ldr	r2, [pc, #100]	; (80018b8 <HAL_SPI_MspInit+0x84>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d12b      	bne.n	80018ae <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001856:	2300      	movs	r3, #0
 8001858:	613b      	str	r3, [r7, #16]
 800185a:	4b18      	ldr	r3, [pc, #96]	; (80018bc <HAL_SPI_MspInit+0x88>)
 800185c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800185e:	4a17      	ldr	r2, [pc, #92]	; (80018bc <HAL_SPI_MspInit+0x88>)
 8001860:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001864:	6453      	str	r3, [r2, #68]	; 0x44
 8001866:	4b15      	ldr	r3, [pc, #84]	; (80018bc <HAL_SPI_MspInit+0x88>)
 8001868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800186a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800186e:	613b      	str	r3, [r7, #16]
 8001870:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001872:	2300      	movs	r3, #0
 8001874:	60fb      	str	r3, [r7, #12]
 8001876:	4b11      	ldr	r3, [pc, #68]	; (80018bc <HAL_SPI_MspInit+0x88>)
 8001878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187a:	4a10      	ldr	r2, [pc, #64]	; (80018bc <HAL_SPI_MspInit+0x88>)
 800187c:	f043 0301 	orr.w	r3, r3, #1
 8001880:	6313      	str	r3, [r2, #48]	; 0x30
 8001882:	4b0e      	ldr	r3, [pc, #56]	; (80018bc <HAL_SPI_MspInit+0x88>)
 8001884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001886:	f003 0301 	and.w	r3, r3, #1
 800188a:	60fb      	str	r3, [r7, #12]
 800188c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800188e:	23e0      	movs	r3, #224	; 0xe0
 8001890:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001892:	2302      	movs	r3, #2
 8001894:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001896:	2300      	movs	r3, #0
 8001898:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800189a:	2303      	movs	r3, #3
 800189c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800189e:	2305      	movs	r3, #5
 80018a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018a2:	f107 0314 	add.w	r3, r7, #20
 80018a6:	4619      	mov	r1, r3
 80018a8:	4805      	ldr	r0, [pc, #20]	; (80018c0 <HAL_SPI_MspInit+0x8c>)
 80018aa:	f000 fcb9 	bl	8002220 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80018ae:	bf00      	nop
 80018b0:	3728      	adds	r7, #40	; 0x28
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	40013000 	.word	0x40013000
 80018bc:	40023800 	.word	0x40023800
 80018c0:	40020000 	.word	0x40020000

080018c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ca:	2300      	movs	r3, #0
 80018cc:	607b      	str	r3, [r7, #4]
 80018ce:	4b10      	ldr	r3, [pc, #64]	; (8001910 <HAL_MspInit+0x4c>)
 80018d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018d2:	4a0f      	ldr	r2, [pc, #60]	; (8001910 <HAL_MspInit+0x4c>)
 80018d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018d8:	6453      	str	r3, [r2, #68]	; 0x44
 80018da:	4b0d      	ldr	r3, [pc, #52]	; (8001910 <HAL_MspInit+0x4c>)
 80018dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018e2:	607b      	str	r3, [r7, #4]
 80018e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018e6:	2300      	movs	r3, #0
 80018e8:	603b      	str	r3, [r7, #0]
 80018ea:	4b09      	ldr	r3, [pc, #36]	; (8001910 <HAL_MspInit+0x4c>)
 80018ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ee:	4a08      	ldr	r2, [pc, #32]	; (8001910 <HAL_MspInit+0x4c>)
 80018f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018f4:	6413      	str	r3, [r2, #64]	; 0x40
 80018f6:	4b06      	ldr	r3, [pc, #24]	; (8001910 <HAL_MspInit+0x4c>)
 80018f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018fe:	603b      	str	r3, [r7, #0]
 8001900:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001902:	2007      	movs	r0, #7
 8001904:	f000 fbb8 	bl	8002078 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001908:	bf00      	nop
 800190a:	3708      	adds	r7, #8
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	40023800 	.word	0x40023800

08001914 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001918:	e7fe      	b.n	8001918 <NMI_Handler+0x4>

0800191a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800191a:	b480      	push	{r7}
 800191c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800191e:	e7fe      	b.n	800191e <HardFault_Handler+0x4>

08001920 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001924:	e7fe      	b.n	8001924 <MemManage_Handler+0x4>

08001926 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001926:	b480      	push	{r7}
 8001928:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800192a:	e7fe      	b.n	800192a <BusFault_Handler+0x4>

0800192c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001930:	e7fe      	b.n	8001930 <UsageFault_Handler+0x4>

08001932 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001932:	b480      	push	{r7}
 8001934:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001936:	bf00      	nop
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr

08001940 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001944:	bf00      	nop
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr

0800194e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800194e:	b480      	push	{r7}
 8001950:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001952:	bf00      	nop
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr

0800195c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001960:	f000 fa76 	bl	8001e50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001964:	bf00      	nop
 8001966:	bd80      	pop	{r7, pc}

08001968 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800196c:	4802      	ldr	r0, [pc, #8]	; (8001978 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 800196e:	f002 fda3 	bl	80044b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001972:	bf00      	nop
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	200002b8 	.word	0x200002b8

0800197c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001980:	4802      	ldr	r0, [pc, #8]	; (800198c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001982:	f002 fd99 	bl	80044b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001986:	bf00      	nop
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	200002b8 	.word	0x200002b8

08001990 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001994:	4802      	ldr	r0, [pc, #8]	; (80019a0 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8001996:	f002 fd8f 	bl	80044b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800199a:	bf00      	nop
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	200002b8 	.word	0x200002b8

080019a4 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80019a8:	4802      	ldr	r0, [pc, #8]	; (80019b4 <TIM1_CC_IRQHandler+0x10>)
 80019aa:	f002 fd85 	bl	80044b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80019ae:	bf00      	nop
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	200002b8 	.word	0x200002b8

080019b8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80019bc:	4802      	ldr	r0, [pc, #8]	; (80019c8 <USART2_IRQHandler+0x10>)
 80019be:	f003 fa1d 	bl	8004dfc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80019c2:	bf00      	nop
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	20000300 	.word	0x20000300

080019cc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  return 1;
 80019d0:	2301      	movs	r3, #1
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr

080019dc <_kill>:

int _kill(int pid, int sig)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
 80019e4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80019e6:	f004 f93d 	bl	8005c64 <__errno>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2216      	movs	r2, #22
 80019ee:	601a      	str	r2, [r3, #0]
  return -1;
 80019f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	3708      	adds	r7, #8
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}

080019fc <_exit>:

void _exit (int status)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a04:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001a08:	6878      	ldr	r0, [r7, #4]
 8001a0a:	f7ff ffe7 	bl	80019dc <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a0e:	e7fe      	b.n	8001a0e <_exit+0x12>

08001a10 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b086      	sub	sp, #24
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	60f8      	str	r0, [r7, #12]
 8001a18:	60b9      	str	r1, [r7, #8]
 8001a1a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	617b      	str	r3, [r7, #20]
 8001a20:	e00a      	b.n	8001a38 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a22:	f3af 8000 	nop.w
 8001a26:	4601      	mov	r1, r0
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	1c5a      	adds	r2, r3, #1
 8001a2c:	60ba      	str	r2, [r7, #8]
 8001a2e:	b2ca      	uxtb	r2, r1
 8001a30:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	3301      	adds	r3, #1
 8001a36:	617b      	str	r3, [r7, #20]
 8001a38:	697a      	ldr	r2, [r7, #20]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	dbf0      	blt.n	8001a22 <_read+0x12>
  }

  return len;
 8001a40:	687b      	ldr	r3, [r7, #4]
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3718      	adds	r7, #24
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}

08001a4a <_close>:
  }
  return len;
}

int _close(int file)
{
 8001a4a:	b480      	push	{r7}
 8001a4c:	b083      	sub	sp, #12
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	370c      	adds	r7, #12
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr

08001a62 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a62:	b480      	push	{r7}
 8001a64:	b083      	sub	sp, #12
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	6078      	str	r0, [r7, #4]
 8001a6a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a72:	605a      	str	r2, [r3, #4]
  return 0;
 8001a74:	2300      	movs	r3, #0
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	370c      	adds	r7, #12
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr

08001a82 <_isatty>:

int _isatty(int file)
{
 8001a82:	b480      	push	{r7}
 8001a84:	b083      	sub	sp, #12
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a8a:	2301      	movs	r3, #1
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	370c      	adds	r7, #12
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr

08001a98 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b085      	sub	sp, #20
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	60f8      	str	r0, [r7, #12]
 8001aa0:	60b9      	str	r1, [r7, #8]
 8001aa2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001aa4:	2300      	movs	r3, #0
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3714      	adds	r7, #20
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr
	...

08001ab4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b086      	sub	sp, #24
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001abc:	4a14      	ldr	r2, [pc, #80]	; (8001b10 <_sbrk+0x5c>)
 8001abe:	4b15      	ldr	r3, [pc, #84]	; (8001b14 <_sbrk+0x60>)
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ac8:	4b13      	ldr	r3, [pc, #76]	; (8001b18 <_sbrk+0x64>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d102      	bne.n	8001ad6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ad0:	4b11      	ldr	r3, [pc, #68]	; (8001b18 <_sbrk+0x64>)
 8001ad2:	4a12      	ldr	r2, [pc, #72]	; (8001b1c <_sbrk+0x68>)
 8001ad4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ad6:	4b10      	ldr	r3, [pc, #64]	; (8001b18 <_sbrk+0x64>)
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	4413      	add	r3, r2
 8001ade:	693a      	ldr	r2, [r7, #16]
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d207      	bcs.n	8001af4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ae4:	f004 f8be 	bl	8005c64 <__errno>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	220c      	movs	r2, #12
 8001aec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001aee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001af2:	e009      	b.n	8001b08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001af4:	4b08      	ldr	r3, [pc, #32]	; (8001b18 <_sbrk+0x64>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001afa:	4b07      	ldr	r3, [pc, #28]	; (8001b18 <_sbrk+0x64>)
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	4413      	add	r3, r2
 8001b02:	4a05      	ldr	r2, [pc, #20]	; (8001b18 <_sbrk+0x64>)
 8001b04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b06:	68fb      	ldr	r3, [r7, #12]
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	3718      	adds	r7, #24
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	20020000 	.word	0x20020000
 8001b14:	00000400 	.word	0x00000400
 8001b18:	200002b4 	.word	0x200002b4
 8001b1c:	20000358 	.word	0x20000358

08001b20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b24:	4b06      	ldr	r3, [pc, #24]	; (8001b40 <SystemInit+0x20>)
 8001b26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b2a:	4a05      	ldr	r2, [pc, #20]	; (8001b40 <SystemInit+0x20>)
 8001b2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b34:	bf00      	nop
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr
 8001b3e:	bf00      	nop
 8001b40:	e000ed00 	.word	0xe000ed00

08001b44 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b086      	sub	sp, #24
 8001b48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b4a:	f107 0308 	add.w	r3, r7, #8
 8001b4e:	2200      	movs	r2, #0
 8001b50:	601a      	str	r2, [r3, #0]
 8001b52:	605a      	str	r2, [r3, #4]
 8001b54:	609a      	str	r2, [r3, #8]
 8001b56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b58:	463b      	mov	r3, r7
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	601a      	str	r2, [r3, #0]
 8001b5e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001b60:	4b1e      	ldr	r3, [pc, #120]	; (8001bdc <MX_TIM1_Init+0x98>)
 8001b62:	4a1f      	ldr	r2, [pc, #124]	; (8001be0 <MX_TIM1_Init+0x9c>)
 8001b64:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 17999;
 8001b66:	4b1d      	ldr	r3, [pc, #116]	; (8001bdc <MX_TIM1_Init+0x98>)
 8001b68:	f244 624f 	movw	r2, #17999	; 0x464f
 8001b6c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b6e:	4b1b      	ldr	r3, [pc, #108]	; (8001bdc <MX_TIM1_Init+0x98>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10;
 8001b74:	4b19      	ldr	r3, [pc, #100]	; (8001bdc <MX_TIM1_Init+0x98>)
 8001b76:	220a      	movs	r2, #10
 8001b78:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b7a:	4b18      	ldr	r3, [pc, #96]	; (8001bdc <MX_TIM1_Init+0x98>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001b80:	4b16      	ldr	r3, [pc, #88]	; (8001bdc <MX_TIM1_Init+0x98>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b86:	4b15      	ldr	r3, [pc, #84]	; (8001bdc <MX_TIM1_Init+0x98>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001b8c:	4813      	ldr	r0, [pc, #76]	; (8001bdc <MX_TIM1_Init+0x98>)
 8001b8e:	f002 fbd3 	bl	8004338 <HAL_TIM_Base_Init>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d001      	beq.n	8001b9c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001b98:	f7ff fdde 	bl	8001758 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ba0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001ba2:	f107 0308 	add.w	r3, r7, #8
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	480c      	ldr	r0, [pc, #48]	; (8001bdc <MX_TIM1_Init+0x98>)
 8001baa:	f002 fd8d 	bl	80046c8 <HAL_TIM_ConfigClockSource>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d001      	beq.n	8001bb8 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001bb4:	f7ff fdd0 	bl	8001758 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001bc0:	463b      	mov	r3, r7
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	4805      	ldr	r0, [pc, #20]	; (8001bdc <MX_TIM1_Init+0x98>)
 8001bc6:	f002 ffa9 	bl	8004b1c <HAL_TIMEx_MasterConfigSynchronization>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d001      	beq.n	8001bd4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001bd0:	f7ff fdc2 	bl	8001758 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001bd4:	bf00      	nop
 8001bd6:	3718      	adds	r7, #24
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	200002b8 	.word	0x200002b8
 8001be0:	40010000 	.word	0x40010000

08001be4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b084      	sub	sp, #16
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a1a      	ldr	r2, [pc, #104]	; (8001c5c <HAL_TIM_Base_MspInit+0x78>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d12d      	bne.n	8001c52 <HAL_TIM_Base_MspInit+0x6e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	60fb      	str	r3, [r7, #12]
 8001bfa:	4b19      	ldr	r3, [pc, #100]	; (8001c60 <HAL_TIM_Base_MspInit+0x7c>)
 8001bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bfe:	4a18      	ldr	r2, [pc, #96]	; (8001c60 <HAL_TIM_Base_MspInit+0x7c>)
 8001c00:	f043 0301 	orr.w	r3, r3, #1
 8001c04:	6453      	str	r3, [r2, #68]	; 0x44
 8001c06:	4b16      	ldr	r3, [pc, #88]	; (8001c60 <HAL_TIM_Base_MspInit+0x7c>)
 8001c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c0a:	f003 0301 	and.w	r3, r3, #1
 8001c0e:	60fb      	str	r3, [r7, #12]
 8001c10:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8001c12:	2200      	movs	r2, #0
 8001c14:	2100      	movs	r1, #0
 8001c16:	2018      	movs	r0, #24
 8001c18:	f000 fa39 	bl	800208e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001c1c:	2018      	movs	r0, #24
 8001c1e:	f000 fa52 	bl	80020c6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001c22:	2200      	movs	r2, #0
 8001c24:	2100      	movs	r1, #0
 8001c26:	2019      	movs	r0, #25
 8001c28:	f000 fa31 	bl	800208e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001c2c:	2019      	movs	r0, #25
 8001c2e:	f000 fa4a 	bl	80020c6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8001c32:	2200      	movs	r2, #0
 8001c34:	2100      	movs	r1, #0
 8001c36:	201a      	movs	r0, #26
 8001c38:	f000 fa29 	bl	800208e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001c3c:	201a      	movs	r0, #26
 8001c3e:	f000 fa42 	bl	80020c6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001c42:	2200      	movs	r2, #0
 8001c44:	2100      	movs	r1, #0
 8001c46:	201b      	movs	r0, #27
 8001c48:	f000 fa21 	bl	800208e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001c4c:	201b      	movs	r0, #27
 8001c4e:	f000 fa3a 	bl	80020c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001c52:	bf00      	nop
 8001c54:	3710      	adds	r7, #16
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	40010000 	.word	0x40010000
 8001c60:	40023800 	.word	0x40023800

08001c64 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c68:	4b11      	ldr	r3, [pc, #68]	; (8001cb0 <MX_USART2_UART_Init+0x4c>)
 8001c6a:	4a12      	ldr	r2, [pc, #72]	; (8001cb4 <MX_USART2_UART_Init+0x50>)
 8001c6c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001c6e:	4b10      	ldr	r3, [pc, #64]	; (8001cb0 <MX_USART2_UART_Init+0x4c>)
 8001c70:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c74:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c76:	4b0e      	ldr	r3, [pc, #56]	; (8001cb0 <MX_USART2_UART_Init+0x4c>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c7c:	4b0c      	ldr	r3, [pc, #48]	; (8001cb0 <MX_USART2_UART_Init+0x4c>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c82:	4b0b      	ldr	r3, [pc, #44]	; (8001cb0 <MX_USART2_UART_Init+0x4c>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c88:	4b09      	ldr	r3, [pc, #36]	; (8001cb0 <MX_USART2_UART_Init+0x4c>)
 8001c8a:	220c      	movs	r2, #12
 8001c8c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c8e:	4b08      	ldr	r3, [pc, #32]	; (8001cb0 <MX_USART2_UART_Init+0x4c>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c94:	4b06      	ldr	r3, [pc, #24]	; (8001cb0 <MX_USART2_UART_Init+0x4c>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c9a:	4805      	ldr	r0, [pc, #20]	; (8001cb0 <MX_USART2_UART_Init+0x4c>)
 8001c9c:	f002 ffce 	bl	8004c3c <HAL_UART_Init>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d001      	beq.n	8001caa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001ca6:	f7ff fd57 	bl	8001758 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001caa:	bf00      	nop
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	20000300 	.word	0x20000300
 8001cb4:	40004400 	.word	0x40004400

08001cb8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b08a      	sub	sp, #40	; 0x28
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cc0:	f107 0314 	add.w	r3, r7, #20
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	601a      	str	r2, [r3, #0]
 8001cc8:	605a      	str	r2, [r3, #4]
 8001cca:	609a      	str	r2, [r3, #8]
 8001ccc:	60da      	str	r2, [r3, #12]
 8001cce:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a1d      	ldr	r2, [pc, #116]	; (8001d4c <HAL_UART_MspInit+0x94>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d133      	bne.n	8001d42 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001cda:	2300      	movs	r3, #0
 8001cdc:	613b      	str	r3, [r7, #16]
 8001cde:	4b1c      	ldr	r3, [pc, #112]	; (8001d50 <HAL_UART_MspInit+0x98>)
 8001ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce2:	4a1b      	ldr	r2, [pc, #108]	; (8001d50 <HAL_UART_MspInit+0x98>)
 8001ce4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ce8:	6413      	str	r3, [r2, #64]	; 0x40
 8001cea:	4b19      	ldr	r3, [pc, #100]	; (8001d50 <HAL_UART_MspInit+0x98>)
 8001cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cf2:	613b      	str	r3, [r7, #16]
 8001cf4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	60fb      	str	r3, [r7, #12]
 8001cfa:	4b15      	ldr	r3, [pc, #84]	; (8001d50 <HAL_UART_MspInit+0x98>)
 8001cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfe:	4a14      	ldr	r2, [pc, #80]	; (8001d50 <HAL_UART_MspInit+0x98>)
 8001d00:	f043 0301 	orr.w	r3, r3, #1
 8001d04:	6313      	str	r3, [r2, #48]	; 0x30
 8001d06:	4b12      	ldr	r3, [pc, #72]	; (8001d50 <HAL_UART_MspInit+0x98>)
 8001d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0a:	f003 0301 	and.w	r3, r3, #1
 8001d0e:	60fb      	str	r3, [r7, #12]
 8001d10:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001d12:	230c      	movs	r3, #12
 8001d14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d16:	2302      	movs	r3, #2
 8001d18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d1e:	2303      	movs	r3, #3
 8001d20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d22:	2307      	movs	r3, #7
 8001d24:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d26:	f107 0314 	add.w	r3, r7, #20
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	4809      	ldr	r0, [pc, #36]	; (8001d54 <HAL_UART_MspInit+0x9c>)
 8001d2e:	f000 fa77 	bl	8002220 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001d32:	2200      	movs	r2, #0
 8001d34:	2100      	movs	r1, #0
 8001d36:	2026      	movs	r0, #38	; 0x26
 8001d38:	f000 f9a9 	bl	800208e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001d3c:	2026      	movs	r0, #38	; 0x26
 8001d3e:	f000 f9c2 	bl	80020c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001d42:	bf00      	nop
 8001d44:	3728      	adds	r7, #40	; 0x28
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	40004400 	.word	0x40004400
 8001d50:	40023800 	.word	0x40023800
 8001d54:	40020000 	.word	0x40020000

08001d58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001d58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d90 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d5c:	480d      	ldr	r0, [pc, #52]	; (8001d94 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001d5e:	490e      	ldr	r1, [pc, #56]	; (8001d98 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001d60:	4a0e      	ldr	r2, [pc, #56]	; (8001d9c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d64:	e002      	b.n	8001d6c <LoopCopyDataInit>

08001d66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d6a:	3304      	adds	r3, #4

08001d6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d70:	d3f9      	bcc.n	8001d66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d72:	4a0b      	ldr	r2, [pc, #44]	; (8001da0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001d74:	4c0b      	ldr	r4, [pc, #44]	; (8001da4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001d76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d78:	e001      	b.n	8001d7e <LoopFillZerobss>

08001d7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d7c:	3204      	adds	r2, #4

08001d7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d80:	d3fb      	bcc.n	8001d7a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001d82:	f7ff fecd 	bl	8001b20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d86:	f003 ff73 	bl	8005c70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d8a:	f7ff fb23 	bl	80013d4 <main>
  bx  lr    
 8001d8e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001d90:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d98:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001d9c:	08008dcc 	.word	0x08008dcc
  ldr r2, =_sbss
 8001da0:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001da4:	20000358 	.word	0x20000358

08001da8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001da8:	e7fe      	b.n	8001da8 <ADC_IRQHandler>
	...

08001dac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001db0:	4b0e      	ldr	r3, [pc, #56]	; (8001dec <HAL_Init+0x40>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a0d      	ldr	r2, [pc, #52]	; (8001dec <HAL_Init+0x40>)
 8001db6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001dba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001dbc:	4b0b      	ldr	r3, [pc, #44]	; (8001dec <HAL_Init+0x40>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a0a      	ldr	r2, [pc, #40]	; (8001dec <HAL_Init+0x40>)
 8001dc2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001dc6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001dc8:	4b08      	ldr	r3, [pc, #32]	; (8001dec <HAL_Init+0x40>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a07      	ldr	r2, [pc, #28]	; (8001dec <HAL_Init+0x40>)
 8001dce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dd2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dd4:	2003      	movs	r0, #3
 8001dd6:	f000 f94f 	bl	8002078 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001dda:	2000      	movs	r0, #0
 8001ddc:	f000 f808 	bl	8001df0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001de0:	f7ff fd70 	bl	80018c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001de4:	2300      	movs	r3, #0
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	40023c00 	.word	0x40023c00

08001df0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001df8:	4b12      	ldr	r3, [pc, #72]	; (8001e44 <HAL_InitTick+0x54>)
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	4b12      	ldr	r3, [pc, #72]	; (8001e48 <HAL_InitTick+0x58>)
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	4619      	mov	r1, r3
 8001e02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e06:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f000 f967 	bl	80020e2 <HAL_SYSTICK_Config>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d001      	beq.n	8001e1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e00e      	b.n	8001e3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2b0f      	cmp	r3, #15
 8001e22:	d80a      	bhi.n	8001e3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e24:	2200      	movs	r2, #0
 8001e26:	6879      	ldr	r1, [r7, #4]
 8001e28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e2c:	f000 f92f 	bl	800208e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e30:	4a06      	ldr	r2, [pc, #24]	; (8001e4c <HAL_InitTick+0x5c>)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e36:	2300      	movs	r3, #0
 8001e38:	e000      	b.n	8001e3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	3708      	adds	r7, #8
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	20000000 	.word	0x20000000
 8001e48:	20000008 	.word	0x20000008
 8001e4c:	20000004 	.word	0x20000004

08001e50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e54:	4b06      	ldr	r3, [pc, #24]	; (8001e70 <HAL_IncTick+0x20>)
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	461a      	mov	r2, r3
 8001e5a:	4b06      	ldr	r3, [pc, #24]	; (8001e74 <HAL_IncTick+0x24>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4413      	add	r3, r2
 8001e60:	4a04      	ldr	r2, [pc, #16]	; (8001e74 <HAL_IncTick+0x24>)
 8001e62:	6013      	str	r3, [r2, #0]
}
 8001e64:	bf00      	nop
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr
 8001e6e:	bf00      	nop
 8001e70:	20000008 	.word	0x20000008
 8001e74:	20000344 	.word	0x20000344

08001e78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e7c:	4b03      	ldr	r3, [pc, #12]	; (8001e8c <HAL_GetTick+0x14>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr
 8001e8a:	bf00      	nop
 8001e8c:	20000344 	.word	0x20000344

08001e90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b084      	sub	sp, #16
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e98:	f7ff ffee 	bl	8001e78 <HAL_GetTick>
 8001e9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ea8:	d005      	beq.n	8001eb6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001eaa:	4b0a      	ldr	r3, [pc, #40]	; (8001ed4 <HAL_Delay+0x44>)
 8001eac:	781b      	ldrb	r3, [r3, #0]
 8001eae:	461a      	mov	r2, r3
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	4413      	add	r3, r2
 8001eb4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001eb6:	bf00      	nop
 8001eb8:	f7ff ffde 	bl	8001e78 <HAL_GetTick>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	68fa      	ldr	r2, [r7, #12]
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d8f7      	bhi.n	8001eb8 <HAL_Delay+0x28>
  {
  }
}
 8001ec8:	bf00      	nop
 8001eca:	bf00      	nop
 8001ecc:	3710      	adds	r7, #16
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	20000008 	.word	0x20000008

08001ed8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b085      	sub	sp, #20
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	f003 0307 	and.w	r3, r3, #7
 8001ee6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ee8:	4b0c      	ldr	r3, [pc, #48]	; (8001f1c <__NVIC_SetPriorityGrouping+0x44>)
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001eee:	68ba      	ldr	r2, [r7, #8]
 8001ef0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f0a:	4a04      	ldr	r2, [pc, #16]	; (8001f1c <__NVIC_SetPriorityGrouping+0x44>)
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	60d3      	str	r3, [r2, #12]
}
 8001f10:	bf00      	nop
 8001f12:	3714      	adds	r7, #20
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr
 8001f1c:	e000ed00 	.word	0xe000ed00

08001f20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f20:	b480      	push	{r7}
 8001f22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f24:	4b04      	ldr	r3, [pc, #16]	; (8001f38 <__NVIC_GetPriorityGrouping+0x18>)
 8001f26:	68db      	ldr	r3, [r3, #12]
 8001f28:	0a1b      	lsrs	r3, r3, #8
 8001f2a:	f003 0307 	and.w	r3, r3, #7
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr
 8001f38:	e000ed00 	.word	0xe000ed00

08001f3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	4603      	mov	r3, r0
 8001f44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	db0b      	blt.n	8001f66 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f4e:	79fb      	ldrb	r3, [r7, #7]
 8001f50:	f003 021f 	and.w	r2, r3, #31
 8001f54:	4907      	ldr	r1, [pc, #28]	; (8001f74 <__NVIC_EnableIRQ+0x38>)
 8001f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f5a:	095b      	lsrs	r3, r3, #5
 8001f5c:	2001      	movs	r0, #1
 8001f5e:	fa00 f202 	lsl.w	r2, r0, r2
 8001f62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f66:	bf00      	nop
 8001f68:	370c      	adds	r7, #12
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr
 8001f72:	bf00      	nop
 8001f74:	e000e100 	.word	0xe000e100

08001f78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	4603      	mov	r3, r0
 8001f80:	6039      	str	r1, [r7, #0]
 8001f82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	db0a      	blt.n	8001fa2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	b2da      	uxtb	r2, r3
 8001f90:	490c      	ldr	r1, [pc, #48]	; (8001fc4 <__NVIC_SetPriority+0x4c>)
 8001f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f96:	0112      	lsls	r2, r2, #4
 8001f98:	b2d2      	uxtb	r2, r2
 8001f9a:	440b      	add	r3, r1
 8001f9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fa0:	e00a      	b.n	8001fb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	b2da      	uxtb	r2, r3
 8001fa6:	4908      	ldr	r1, [pc, #32]	; (8001fc8 <__NVIC_SetPriority+0x50>)
 8001fa8:	79fb      	ldrb	r3, [r7, #7]
 8001faa:	f003 030f 	and.w	r3, r3, #15
 8001fae:	3b04      	subs	r3, #4
 8001fb0:	0112      	lsls	r2, r2, #4
 8001fb2:	b2d2      	uxtb	r2, r2
 8001fb4:	440b      	add	r3, r1
 8001fb6:	761a      	strb	r2, [r3, #24]
}
 8001fb8:	bf00      	nop
 8001fba:	370c      	adds	r7, #12
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr
 8001fc4:	e000e100 	.word	0xe000e100
 8001fc8:	e000ed00 	.word	0xe000ed00

08001fcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b089      	sub	sp, #36	; 0x24
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	60f8      	str	r0, [r7, #12]
 8001fd4:	60b9      	str	r1, [r7, #8]
 8001fd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	f003 0307 	and.w	r3, r3, #7
 8001fde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fe0:	69fb      	ldr	r3, [r7, #28]
 8001fe2:	f1c3 0307 	rsb	r3, r3, #7
 8001fe6:	2b04      	cmp	r3, #4
 8001fe8:	bf28      	it	cs
 8001fea:	2304      	movcs	r3, #4
 8001fec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	3304      	adds	r3, #4
 8001ff2:	2b06      	cmp	r3, #6
 8001ff4:	d902      	bls.n	8001ffc <NVIC_EncodePriority+0x30>
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	3b03      	subs	r3, #3
 8001ffa:	e000      	b.n	8001ffe <NVIC_EncodePriority+0x32>
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002000:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002004:	69bb      	ldr	r3, [r7, #24]
 8002006:	fa02 f303 	lsl.w	r3, r2, r3
 800200a:	43da      	mvns	r2, r3
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	401a      	ands	r2, r3
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002014:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	fa01 f303 	lsl.w	r3, r1, r3
 800201e:	43d9      	mvns	r1, r3
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002024:	4313      	orrs	r3, r2
         );
}
 8002026:	4618      	mov	r0, r3
 8002028:	3724      	adds	r7, #36	; 0x24
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr
	...

08002034 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b082      	sub	sp, #8
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	3b01      	subs	r3, #1
 8002040:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002044:	d301      	bcc.n	800204a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002046:	2301      	movs	r3, #1
 8002048:	e00f      	b.n	800206a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800204a:	4a0a      	ldr	r2, [pc, #40]	; (8002074 <SysTick_Config+0x40>)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	3b01      	subs	r3, #1
 8002050:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002052:	210f      	movs	r1, #15
 8002054:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002058:	f7ff ff8e 	bl	8001f78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800205c:	4b05      	ldr	r3, [pc, #20]	; (8002074 <SysTick_Config+0x40>)
 800205e:	2200      	movs	r2, #0
 8002060:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002062:	4b04      	ldr	r3, [pc, #16]	; (8002074 <SysTick_Config+0x40>)
 8002064:	2207      	movs	r2, #7
 8002066:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002068:	2300      	movs	r3, #0
}
 800206a:	4618      	mov	r0, r3
 800206c:	3708      	adds	r7, #8
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	e000e010 	.word	0xe000e010

08002078 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b082      	sub	sp, #8
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002080:	6878      	ldr	r0, [r7, #4]
 8002082:	f7ff ff29 	bl	8001ed8 <__NVIC_SetPriorityGrouping>
}
 8002086:	bf00      	nop
 8002088:	3708      	adds	r7, #8
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}

0800208e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800208e:	b580      	push	{r7, lr}
 8002090:	b086      	sub	sp, #24
 8002092:	af00      	add	r7, sp, #0
 8002094:	4603      	mov	r3, r0
 8002096:	60b9      	str	r1, [r7, #8]
 8002098:	607a      	str	r2, [r7, #4]
 800209a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800209c:	2300      	movs	r3, #0
 800209e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020a0:	f7ff ff3e 	bl	8001f20 <__NVIC_GetPriorityGrouping>
 80020a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020a6:	687a      	ldr	r2, [r7, #4]
 80020a8:	68b9      	ldr	r1, [r7, #8]
 80020aa:	6978      	ldr	r0, [r7, #20]
 80020ac:	f7ff ff8e 	bl	8001fcc <NVIC_EncodePriority>
 80020b0:	4602      	mov	r2, r0
 80020b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020b6:	4611      	mov	r1, r2
 80020b8:	4618      	mov	r0, r3
 80020ba:	f7ff ff5d 	bl	8001f78 <__NVIC_SetPriority>
}
 80020be:	bf00      	nop
 80020c0:	3718      	adds	r7, #24
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}

080020c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020c6:	b580      	push	{r7, lr}
 80020c8:	b082      	sub	sp, #8
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	4603      	mov	r3, r0
 80020ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020d4:	4618      	mov	r0, r3
 80020d6:	f7ff ff31 	bl	8001f3c <__NVIC_EnableIRQ>
}
 80020da:	bf00      	nop
 80020dc:	3708      	adds	r7, #8
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}

080020e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020e2:	b580      	push	{r7, lr}
 80020e4:	b082      	sub	sp, #8
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f7ff ffa2 	bl	8002034 <SysTick_Config>
 80020f0:	4603      	mov	r3, r0
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3708      	adds	r7, #8
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}

080020fa <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80020fa:	b580      	push	{r7, lr}
 80020fc:	b084      	sub	sp, #16
 80020fe:	af00      	add	r7, sp, #0
 8002100:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002106:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002108:	f7ff feb6 	bl	8001e78 <HAL_GetTick>
 800210c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002114:	b2db      	uxtb	r3, r3
 8002116:	2b02      	cmp	r3, #2
 8002118:	d008      	beq.n	800212c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2280      	movs	r2, #128	; 0x80
 800211e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2200      	movs	r2, #0
 8002124:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	e052      	b.n	80021d2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f022 0216 	bic.w	r2, r2, #22
 800213a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	695a      	ldr	r2, [r3, #20]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800214a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002150:	2b00      	cmp	r3, #0
 8002152:	d103      	bne.n	800215c <HAL_DMA_Abort+0x62>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002158:	2b00      	cmp	r3, #0
 800215a:	d007      	beq.n	800216c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f022 0208 	bic.w	r2, r2, #8
 800216a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f022 0201 	bic.w	r2, r2, #1
 800217a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800217c:	e013      	b.n	80021a6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800217e:	f7ff fe7b 	bl	8001e78 <HAL_GetTick>
 8002182:	4602      	mov	r2, r0
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	1ad3      	subs	r3, r2, r3
 8002188:	2b05      	cmp	r3, #5
 800218a:	d90c      	bls.n	80021a6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2220      	movs	r2, #32
 8002190:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2203      	movs	r2, #3
 8002196:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2200      	movs	r2, #0
 800219e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80021a2:	2303      	movs	r3, #3
 80021a4:	e015      	b.n	80021d2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f003 0301 	and.w	r3, r3, #1
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d1e4      	bne.n	800217e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021b8:	223f      	movs	r2, #63	; 0x3f
 80021ba:	409a      	lsls	r2, r3
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2201      	movs	r2, #1
 80021c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2200      	movs	r2, #0
 80021cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80021d0:	2300      	movs	r3, #0
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3710      	adds	r7, #16
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}

080021da <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80021da:	b480      	push	{r7}
 80021dc:	b083      	sub	sp, #12
 80021de:	af00      	add	r7, sp, #0
 80021e0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	d004      	beq.n	80021f8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2280      	movs	r2, #128	; 0x80
 80021f2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	e00c      	b.n	8002212 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2205      	movs	r2, #5
 80021fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f022 0201 	bic.w	r2, r2, #1
 800220e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002210:	2300      	movs	r3, #0
}
 8002212:	4618      	mov	r0, r3
 8002214:	370c      	adds	r7, #12
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr
	...

08002220 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002220:	b480      	push	{r7}
 8002222:	b089      	sub	sp, #36	; 0x24
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800222a:	2300      	movs	r3, #0
 800222c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800222e:	2300      	movs	r3, #0
 8002230:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002232:	2300      	movs	r3, #0
 8002234:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002236:	2300      	movs	r3, #0
 8002238:	61fb      	str	r3, [r7, #28]
 800223a:	e165      	b.n	8002508 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800223c:	2201      	movs	r2, #1
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	fa02 f303 	lsl.w	r3, r2, r3
 8002244:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	697a      	ldr	r2, [r7, #20]
 800224c:	4013      	ands	r3, r2
 800224e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002250:	693a      	ldr	r2, [r7, #16]
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	429a      	cmp	r2, r3
 8002256:	f040 8154 	bne.w	8002502 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	f003 0303 	and.w	r3, r3, #3
 8002262:	2b01      	cmp	r3, #1
 8002264:	d005      	beq.n	8002272 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800226e:	2b02      	cmp	r3, #2
 8002270:	d130      	bne.n	80022d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002278:	69fb      	ldr	r3, [r7, #28]
 800227a:	005b      	lsls	r3, r3, #1
 800227c:	2203      	movs	r2, #3
 800227e:	fa02 f303 	lsl.w	r3, r2, r3
 8002282:	43db      	mvns	r3, r3
 8002284:	69ba      	ldr	r2, [r7, #24]
 8002286:	4013      	ands	r3, r2
 8002288:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	68da      	ldr	r2, [r3, #12]
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	005b      	lsls	r3, r3, #1
 8002292:	fa02 f303 	lsl.w	r3, r2, r3
 8002296:	69ba      	ldr	r2, [r7, #24]
 8002298:	4313      	orrs	r3, r2
 800229a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	69ba      	ldr	r2, [r7, #24]
 80022a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022a8:	2201      	movs	r2, #1
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	fa02 f303 	lsl.w	r3, r2, r3
 80022b0:	43db      	mvns	r3, r3
 80022b2:	69ba      	ldr	r2, [r7, #24]
 80022b4:	4013      	ands	r3, r2
 80022b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	091b      	lsrs	r3, r3, #4
 80022be:	f003 0201 	and.w	r2, r3, #1
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	fa02 f303 	lsl.w	r3, r2, r3
 80022c8:	69ba      	ldr	r2, [r7, #24]
 80022ca:	4313      	orrs	r3, r2
 80022cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	69ba      	ldr	r2, [r7, #24]
 80022d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	f003 0303 	and.w	r3, r3, #3
 80022dc:	2b03      	cmp	r3, #3
 80022de:	d017      	beq.n	8002310 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	005b      	lsls	r3, r3, #1
 80022ea:	2203      	movs	r2, #3
 80022ec:	fa02 f303 	lsl.w	r3, r2, r3
 80022f0:	43db      	mvns	r3, r3
 80022f2:	69ba      	ldr	r2, [r7, #24]
 80022f4:	4013      	ands	r3, r2
 80022f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	689a      	ldr	r2, [r3, #8]
 80022fc:	69fb      	ldr	r3, [r7, #28]
 80022fe:	005b      	lsls	r3, r3, #1
 8002300:	fa02 f303 	lsl.w	r3, r2, r3
 8002304:	69ba      	ldr	r2, [r7, #24]
 8002306:	4313      	orrs	r3, r2
 8002308:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	69ba      	ldr	r2, [r7, #24]
 800230e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	f003 0303 	and.w	r3, r3, #3
 8002318:	2b02      	cmp	r3, #2
 800231a:	d123      	bne.n	8002364 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800231c:	69fb      	ldr	r3, [r7, #28]
 800231e:	08da      	lsrs	r2, r3, #3
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	3208      	adds	r2, #8
 8002324:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002328:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	f003 0307 	and.w	r3, r3, #7
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	220f      	movs	r2, #15
 8002334:	fa02 f303 	lsl.w	r3, r2, r3
 8002338:	43db      	mvns	r3, r3
 800233a:	69ba      	ldr	r2, [r7, #24]
 800233c:	4013      	ands	r3, r2
 800233e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	691a      	ldr	r2, [r3, #16]
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	f003 0307 	and.w	r3, r3, #7
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	fa02 f303 	lsl.w	r3, r2, r3
 8002350:	69ba      	ldr	r2, [r7, #24]
 8002352:	4313      	orrs	r3, r2
 8002354:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	08da      	lsrs	r2, r3, #3
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	3208      	adds	r2, #8
 800235e:	69b9      	ldr	r1, [r7, #24]
 8002360:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	005b      	lsls	r3, r3, #1
 800236e:	2203      	movs	r2, #3
 8002370:	fa02 f303 	lsl.w	r3, r2, r3
 8002374:	43db      	mvns	r3, r3
 8002376:	69ba      	ldr	r2, [r7, #24]
 8002378:	4013      	ands	r3, r2
 800237a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	f003 0203 	and.w	r2, r3, #3
 8002384:	69fb      	ldr	r3, [r7, #28]
 8002386:	005b      	lsls	r3, r3, #1
 8002388:	fa02 f303 	lsl.w	r3, r2, r3
 800238c:	69ba      	ldr	r2, [r7, #24]
 800238e:	4313      	orrs	r3, r2
 8002390:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	69ba      	ldr	r2, [r7, #24]
 8002396:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	f000 80ae 	beq.w	8002502 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023a6:	2300      	movs	r3, #0
 80023a8:	60fb      	str	r3, [r7, #12]
 80023aa:	4b5d      	ldr	r3, [pc, #372]	; (8002520 <HAL_GPIO_Init+0x300>)
 80023ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ae:	4a5c      	ldr	r2, [pc, #368]	; (8002520 <HAL_GPIO_Init+0x300>)
 80023b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023b4:	6453      	str	r3, [r2, #68]	; 0x44
 80023b6:	4b5a      	ldr	r3, [pc, #360]	; (8002520 <HAL_GPIO_Init+0x300>)
 80023b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023be:	60fb      	str	r3, [r7, #12]
 80023c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023c2:	4a58      	ldr	r2, [pc, #352]	; (8002524 <HAL_GPIO_Init+0x304>)
 80023c4:	69fb      	ldr	r3, [r7, #28]
 80023c6:	089b      	lsrs	r3, r3, #2
 80023c8:	3302      	adds	r3, #2
 80023ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80023d0:	69fb      	ldr	r3, [r7, #28]
 80023d2:	f003 0303 	and.w	r3, r3, #3
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	220f      	movs	r2, #15
 80023da:	fa02 f303 	lsl.w	r3, r2, r3
 80023de:	43db      	mvns	r3, r3
 80023e0:	69ba      	ldr	r2, [r7, #24]
 80023e2:	4013      	ands	r3, r2
 80023e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4a4f      	ldr	r2, [pc, #316]	; (8002528 <HAL_GPIO_Init+0x308>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d025      	beq.n	800243a <HAL_GPIO_Init+0x21a>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4a4e      	ldr	r2, [pc, #312]	; (800252c <HAL_GPIO_Init+0x30c>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d01f      	beq.n	8002436 <HAL_GPIO_Init+0x216>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4a4d      	ldr	r2, [pc, #308]	; (8002530 <HAL_GPIO_Init+0x310>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d019      	beq.n	8002432 <HAL_GPIO_Init+0x212>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4a4c      	ldr	r2, [pc, #304]	; (8002534 <HAL_GPIO_Init+0x314>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d013      	beq.n	800242e <HAL_GPIO_Init+0x20e>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	4a4b      	ldr	r2, [pc, #300]	; (8002538 <HAL_GPIO_Init+0x318>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d00d      	beq.n	800242a <HAL_GPIO_Init+0x20a>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	4a4a      	ldr	r2, [pc, #296]	; (800253c <HAL_GPIO_Init+0x31c>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d007      	beq.n	8002426 <HAL_GPIO_Init+0x206>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	4a49      	ldr	r2, [pc, #292]	; (8002540 <HAL_GPIO_Init+0x320>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d101      	bne.n	8002422 <HAL_GPIO_Init+0x202>
 800241e:	2306      	movs	r3, #6
 8002420:	e00c      	b.n	800243c <HAL_GPIO_Init+0x21c>
 8002422:	2307      	movs	r3, #7
 8002424:	e00a      	b.n	800243c <HAL_GPIO_Init+0x21c>
 8002426:	2305      	movs	r3, #5
 8002428:	e008      	b.n	800243c <HAL_GPIO_Init+0x21c>
 800242a:	2304      	movs	r3, #4
 800242c:	e006      	b.n	800243c <HAL_GPIO_Init+0x21c>
 800242e:	2303      	movs	r3, #3
 8002430:	e004      	b.n	800243c <HAL_GPIO_Init+0x21c>
 8002432:	2302      	movs	r3, #2
 8002434:	e002      	b.n	800243c <HAL_GPIO_Init+0x21c>
 8002436:	2301      	movs	r3, #1
 8002438:	e000      	b.n	800243c <HAL_GPIO_Init+0x21c>
 800243a:	2300      	movs	r3, #0
 800243c:	69fa      	ldr	r2, [r7, #28]
 800243e:	f002 0203 	and.w	r2, r2, #3
 8002442:	0092      	lsls	r2, r2, #2
 8002444:	4093      	lsls	r3, r2
 8002446:	69ba      	ldr	r2, [r7, #24]
 8002448:	4313      	orrs	r3, r2
 800244a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800244c:	4935      	ldr	r1, [pc, #212]	; (8002524 <HAL_GPIO_Init+0x304>)
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	089b      	lsrs	r3, r3, #2
 8002452:	3302      	adds	r3, #2
 8002454:	69ba      	ldr	r2, [r7, #24]
 8002456:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800245a:	4b3a      	ldr	r3, [pc, #232]	; (8002544 <HAL_GPIO_Init+0x324>)
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	43db      	mvns	r3, r3
 8002464:	69ba      	ldr	r2, [r7, #24]
 8002466:	4013      	ands	r3, r2
 8002468:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d003      	beq.n	800247e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002476:	69ba      	ldr	r2, [r7, #24]
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	4313      	orrs	r3, r2
 800247c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800247e:	4a31      	ldr	r2, [pc, #196]	; (8002544 <HAL_GPIO_Init+0x324>)
 8002480:	69bb      	ldr	r3, [r7, #24]
 8002482:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002484:	4b2f      	ldr	r3, [pc, #188]	; (8002544 <HAL_GPIO_Init+0x324>)
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	43db      	mvns	r3, r3
 800248e:	69ba      	ldr	r2, [r7, #24]
 8002490:	4013      	ands	r3, r2
 8002492:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800249c:	2b00      	cmp	r3, #0
 800249e:	d003      	beq.n	80024a8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80024a0:	69ba      	ldr	r2, [r7, #24]
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	4313      	orrs	r3, r2
 80024a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80024a8:	4a26      	ldr	r2, [pc, #152]	; (8002544 <HAL_GPIO_Init+0x324>)
 80024aa:	69bb      	ldr	r3, [r7, #24]
 80024ac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80024ae:	4b25      	ldr	r3, [pc, #148]	; (8002544 <HAL_GPIO_Init+0x324>)
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	43db      	mvns	r3, r3
 80024b8:	69ba      	ldr	r2, [r7, #24]
 80024ba:	4013      	ands	r3, r2
 80024bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d003      	beq.n	80024d2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80024ca:	69ba      	ldr	r2, [r7, #24]
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	4313      	orrs	r3, r2
 80024d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024d2:	4a1c      	ldr	r2, [pc, #112]	; (8002544 <HAL_GPIO_Init+0x324>)
 80024d4:	69bb      	ldr	r3, [r7, #24]
 80024d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024d8:	4b1a      	ldr	r3, [pc, #104]	; (8002544 <HAL_GPIO_Init+0x324>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	43db      	mvns	r3, r3
 80024e2:	69ba      	ldr	r2, [r7, #24]
 80024e4:	4013      	ands	r3, r2
 80024e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d003      	beq.n	80024fc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80024f4:	69ba      	ldr	r2, [r7, #24]
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	4313      	orrs	r3, r2
 80024fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024fc:	4a11      	ldr	r2, [pc, #68]	; (8002544 <HAL_GPIO_Init+0x324>)
 80024fe:	69bb      	ldr	r3, [r7, #24]
 8002500:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	3301      	adds	r3, #1
 8002506:	61fb      	str	r3, [r7, #28]
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	2b0f      	cmp	r3, #15
 800250c:	f67f ae96 	bls.w	800223c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002510:	bf00      	nop
 8002512:	bf00      	nop
 8002514:	3724      	adds	r7, #36	; 0x24
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr
 800251e:	bf00      	nop
 8002520:	40023800 	.word	0x40023800
 8002524:	40013800 	.word	0x40013800
 8002528:	40020000 	.word	0x40020000
 800252c:	40020400 	.word	0x40020400
 8002530:	40020800 	.word	0x40020800
 8002534:	40020c00 	.word	0x40020c00
 8002538:	40021000 	.word	0x40021000
 800253c:	40021400 	.word	0x40021400
 8002540:	40021800 	.word	0x40021800
 8002544:	40013c00 	.word	0x40013c00

08002548 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002548:	b480      	push	{r7}
 800254a:	b085      	sub	sp, #20
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
 8002550:	460b      	mov	r3, r1
 8002552:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	691a      	ldr	r2, [r3, #16]
 8002558:	887b      	ldrh	r3, [r7, #2]
 800255a:	4013      	ands	r3, r2
 800255c:	2b00      	cmp	r3, #0
 800255e:	d002      	beq.n	8002566 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002560:	2301      	movs	r3, #1
 8002562:	73fb      	strb	r3, [r7, #15]
 8002564:	e001      	b.n	800256a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002566:	2300      	movs	r3, #0
 8002568:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800256a:	7bfb      	ldrb	r3, [r7, #15]
}
 800256c:	4618      	mov	r0, r3
 800256e:	3714      	adds	r7, #20
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr

08002578 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002578:	b480      	push	{r7}
 800257a:	b083      	sub	sp, #12
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
 8002580:	460b      	mov	r3, r1
 8002582:	807b      	strh	r3, [r7, #2]
 8002584:	4613      	mov	r3, r2
 8002586:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002588:	787b      	ldrb	r3, [r7, #1]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d003      	beq.n	8002596 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800258e:	887a      	ldrh	r2, [r7, #2]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002594:	e003      	b.n	800259e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002596:	887b      	ldrh	r3, [r7, #2]
 8002598:	041a      	lsls	r2, r3, #16
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	619a      	str	r2, [r3, #24]
}
 800259e:	bf00      	nop
 80025a0:	370c      	adds	r7, #12
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr
	...

080025ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b084      	sub	sp, #16
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d101      	bne.n	80025be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e12b      	b.n	8002816 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d106      	bne.n	80025d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2200      	movs	r2, #0
 80025ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f7fe fd9a 	bl	800110c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2224      	movs	r2, #36	; 0x24
 80025dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f022 0201 	bic.w	r2, r2, #1
 80025ee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80025fe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800260e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002610:	f000 fd6a 	bl	80030e8 <HAL_RCC_GetPCLK1Freq>
 8002614:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	4a81      	ldr	r2, [pc, #516]	; (8002820 <HAL_I2C_Init+0x274>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d807      	bhi.n	8002630 <HAL_I2C_Init+0x84>
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	4a80      	ldr	r2, [pc, #512]	; (8002824 <HAL_I2C_Init+0x278>)
 8002624:	4293      	cmp	r3, r2
 8002626:	bf94      	ite	ls
 8002628:	2301      	movls	r3, #1
 800262a:	2300      	movhi	r3, #0
 800262c:	b2db      	uxtb	r3, r3
 800262e:	e006      	b.n	800263e <HAL_I2C_Init+0x92>
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	4a7d      	ldr	r2, [pc, #500]	; (8002828 <HAL_I2C_Init+0x27c>)
 8002634:	4293      	cmp	r3, r2
 8002636:	bf94      	ite	ls
 8002638:	2301      	movls	r3, #1
 800263a:	2300      	movhi	r3, #0
 800263c:	b2db      	uxtb	r3, r3
 800263e:	2b00      	cmp	r3, #0
 8002640:	d001      	beq.n	8002646 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	e0e7      	b.n	8002816 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	4a78      	ldr	r2, [pc, #480]	; (800282c <HAL_I2C_Init+0x280>)
 800264a:	fba2 2303 	umull	r2, r3, r2, r3
 800264e:	0c9b      	lsrs	r3, r3, #18
 8002650:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	68ba      	ldr	r2, [r7, #8]
 8002662:	430a      	orrs	r2, r1
 8002664:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	6a1b      	ldr	r3, [r3, #32]
 800266c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	4a6a      	ldr	r2, [pc, #424]	; (8002820 <HAL_I2C_Init+0x274>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d802      	bhi.n	8002680 <HAL_I2C_Init+0xd4>
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	3301      	adds	r3, #1
 800267e:	e009      	b.n	8002694 <HAL_I2C_Init+0xe8>
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002686:	fb02 f303 	mul.w	r3, r2, r3
 800268a:	4a69      	ldr	r2, [pc, #420]	; (8002830 <HAL_I2C_Init+0x284>)
 800268c:	fba2 2303 	umull	r2, r3, r2, r3
 8002690:	099b      	lsrs	r3, r3, #6
 8002692:	3301      	adds	r3, #1
 8002694:	687a      	ldr	r2, [r7, #4]
 8002696:	6812      	ldr	r2, [r2, #0]
 8002698:	430b      	orrs	r3, r1
 800269a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	69db      	ldr	r3, [r3, #28]
 80026a2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80026a6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	495c      	ldr	r1, [pc, #368]	; (8002820 <HAL_I2C_Init+0x274>)
 80026b0:	428b      	cmp	r3, r1
 80026b2:	d819      	bhi.n	80026e8 <HAL_I2C_Init+0x13c>
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	1e59      	subs	r1, r3, #1
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	005b      	lsls	r3, r3, #1
 80026be:	fbb1 f3f3 	udiv	r3, r1, r3
 80026c2:	1c59      	adds	r1, r3, #1
 80026c4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80026c8:	400b      	ands	r3, r1
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d00a      	beq.n	80026e4 <HAL_I2C_Init+0x138>
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	1e59      	subs	r1, r3, #1
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	005b      	lsls	r3, r3, #1
 80026d8:	fbb1 f3f3 	udiv	r3, r1, r3
 80026dc:	3301      	adds	r3, #1
 80026de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026e2:	e051      	b.n	8002788 <HAL_I2C_Init+0x1dc>
 80026e4:	2304      	movs	r3, #4
 80026e6:	e04f      	b.n	8002788 <HAL_I2C_Init+0x1dc>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d111      	bne.n	8002714 <HAL_I2C_Init+0x168>
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	1e58      	subs	r0, r3, #1
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6859      	ldr	r1, [r3, #4]
 80026f8:	460b      	mov	r3, r1
 80026fa:	005b      	lsls	r3, r3, #1
 80026fc:	440b      	add	r3, r1
 80026fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002702:	3301      	adds	r3, #1
 8002704:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002708:	2b00      	cmp	r3, #0
 800270a:	bf0c      	ite	eq
 800270c:	2301      	moveq	r3, #1
 800270e:	2300      	movne	r3, #0
 8002710:	b2db      	uxtb	r3, r3
 8002712:	e012      	b.n	800273a <HAL_I2C_Init+0x18e>
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	1e58      	subs	r0, r3, #1
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6859      	ldr	r1, [r3, #4]
 800271c:	460b      	mov	r3, r1
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	440b      	add	r3, r1
 8002722:	0099      	lsls	r1, r3, #2
 8002724:	440b      	add	r3, r1
 8002726:	fbb0 f3f3 	udiv	r3, r0, r3
 800272a:	3301      	adds	r3, #1
 800272c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002730:	2b00      	cmp	r3, #0
 8002732:	bf0c      	ite	eq
 8002734:	2301      	moveq	r3, #1
 8002736:	2300      	movne	r3, #0
 8002738:	b2db      	uxtb	r3, r3
 800273a:	2b00      	cmp	r3, #0
 800273c:	d001      	beq.n	8002742 <HAL_I2C_Init+0x196>
 800273e:	2301      	movs	r3, #1
 8002740:	e022      	b.n	8002788 <HAL_I2C_Init+0x1dc>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d10e      	bne.n	8002768 <HAL_I2C_Init+0x1bc>
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	1e58      	subs	r0, r3, #1
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6859      	ldr	r1, [r3, #4]
 8002752:	460b      	mov	r3, r1
 8002754:	005b      	lsls	r3, r3, #1
 8002756:	440b      	add	r3, r1
 8002758:	fbb0 f3f3 	udiv	r3, r0, r3
 800275c:	3301      	adds	r3, #1
 800275e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002762:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002766:	e00f      	b.n	8002788 <HAL_I2C_Init+0x1dc>
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	1e58      	subs	r0, r3, #1
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6859      	ldr	r1, [r3, #4]
 8002770:	460b      	mov	r3, r1
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	440b      	add	r3, r1
 8002776:	0099      	lsls	r1, r3, #2
 8002778:	440b      	add	r3, r1
 800277a:	fbb0 f3f3 	udiv	r3, r0, r3
 800277e:	3301      	adds	r3, #1
 8002780:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002784:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002788:	6879      	ldr	r1, [r7, #4]
 800278a:	6809      	ldr	r1, [r1, #0]
 800278c:	4313      	orrs	r3, r2
 800278e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	69da      	ldr	r2, [r3, #28]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6a1b      	ldr	r3, [r3, #32]
 80027a2:	431a      	orrs	r2, r3
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	430a      	orrs	r2, r1
 80027aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80027b6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80027ba:	687a      	ldr	r2, [r7, #4]
 80027bc:	6911      	ldr	r1, [r2, #16]
 80027be:	687a      	ldr	r2, [r7, #4]
 80027c0:	68d2      	ldr	r2, [r2, #12]
 80027c2:	4311      	orrs	r1, r2
 80027c4:	687a      	ldr	r2, [r7, #4]
 80027c6:	6812      	ldr	r2, [r2, #0]
 80027c8:	430b      	orrs	r3, r1
 80027ca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	68db      	ldr	r3, [r3, #12]
 80027d2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	695a      	ldr	r2, [r3, #20]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	699b      	ldr	r3, [r3, #24]
 80027de:	431a      	orrs	r2, r3
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	430a      	orrs	r2, r1
 80027e6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f042 0201 	orr.w	r2, r2, #1
 80027f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2200      	movs	r2, #0
 80027fc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2220      	movs	r2, #32
 8002802:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2200      	movs	r2, #0
 800280a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2200      	movs	r2, #0
 8002810:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002814:	2300      	movs	r3, #0
}
 8002816:	4618      	mov	r0, r3
 8002818:	3710      	adds	r7, #16
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	000186a0 	.word	0x000186a0
 8002824:	001e847f 	.word	0x001e847f
 8002828:	003d08ff 	.word	0x003d08ff
 800282c:	431bde83 	.word	0x431bde83
 8002830:	10624dd3 	.word	0x10624dd3

08002834 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b088      	sub	sp, #32
 8002838:	af02      	add	r7, sp, #8
 800283a:	60f8      	str	r0, [r7, #12]
 800283c:	4608      	mov	r0, r1
 800283e:	4611      	mov	r1, r2
 8002840:	461a      	mov	r2, r3
 8002842:	4603      	mov	r3, r0
 8002844:	817b      	strh	r3, [r7, #10]
 8002846:	460b      	mov	r3, r1
 8002848:	813b      	strh	r3, [r7, #8]
 800284a:	4613      	mov	r3, r2
 800284c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800284e:	f7ff fb13 	bl	8001e78 <HAL_GetTick>
 8002852:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800285a:	b2db      	uxtb	r3, r3
 800285c:	2b20      	cmp	r3, #32
 800285e:	f040 80d9 	bne.w	8002a14 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	9300      	str	r3, [sp, #0]
 8002866:	2319      	movs	r3, #25
 8002868:	2201      	movs	r2, #1
 800286a:	496d      	ldr	r1, [pc, #436]	; (8002a20 <HAL_I2C_Mem_Write+0x1ec>)
 800286c:	68f8      	ldr	r0, [r7, #12]
 800286e:	f000 f971 	bl	8002b54 <I2C_WaitOnFlagUntilTimeout>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d001      	beq.n	800287c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002878:	2302      	movs	r3, #2
 800287a:	e0cc      	b.n	8002a16 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002882:	2b01      	cmp	r3, #1
 8002884:	d101      	bne.n	800288a <HAL_I2C_Mem_Write+0x56>
 8002886:	2302      	movs	r3, #2
 8002888:	e0c5      	b.n	8002a16 <HAL_I2C_Mem_Write+0x1e2>
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2201      	movs	r2, #1
 800288e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 0301 	and.w	r3, r3, #1
 800289c:	2b01      	cmp	r3, #1
 800289e:	d007      	beq.n	80028b0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f042 0201 	orr.w	r2, r2, #1
 80028ae:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028be:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	2221      	movs	r2, #33	; 0x21
 80028c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2240      	movs	r2, #64	; 0x40
 80028cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	2200      	movs	r2, #0
 80028d4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	6a3a      	ldr	r2, [r7, #32]
 80028da:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80028e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028e6:	b29a      	uxth	r2, r3
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	4a4d      	ldr	r2, [pc, #308]	; (8002a24 <HAL_I2C_Mem_Write+0x1f0>)
 80028f0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80028f2:	88f8      	ldrh	r0, [r7, #6]
 80028f4:	893a      	ldrh	r2, [r7, #8]
 80028f6:	8979      	ldrh	r1, [r7, #10]
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	9301      	str	r3, [sp, #4]
 80028fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028fe:	9300      	str	r3, [sp, #0]
 8002900:	4603      	mov	r3, r0
 8002902:	68f8      	ldr	r0, [r7, #12]
 8002904:	f000 f890 	bl	8002a28 <I2C_RequestMemoryWrite>
 8002908:	4603      	mov	r3, r0
 800290a:	2b00      	cmp	r3, #0
 800290c:	d052      	beq.n	80029b4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e081      	b.n	8002a16 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002912:	697a      	ldr	r2, [r7, #20]
 8002914:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002916:	68f8      	ldr	r0, [r7, #12]
 8002918:	f000 f9f2 	bl	8002d00 <I2C_WaitOnTXEFlagUntilTimeout>
 800291c:	4603      	mov	r3, r0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d00d      	beq.n	800293e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002926:	2b04      	cmp	r3, #4
 8002928:	d107      	bne.n	800293a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002938:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e06b      	b.n	8002a16 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002942:	781a      	ldrb	r2, [r3, #0]
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800294e:	1c5a      	adds	r2, r3, #1
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002958:	3b01      	subs	r3, #1
 800295a:	b29a      	uxth	r2, r3
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002964:	b29b      	uxth	r3, r3
 8002966:	3b01      	subs	r3, #1
 8002968:	b29a      	uxth	r2, r3
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	695b      	ldr	r3, [r3, #20]
 8002974:	f003 0304 	and.w	r3, r3, #4
 8002978:	2b04      	cmp	r3, #4
 800297a:	d11b      	bne.n	80029b4 <HAL_I2C_Mem_Write+0x180>
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002980:	2b00      	cmp	r3, #0
 8002982:	d017      	beq.n	80029b4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002988:	781a      	ldrb	r2, [r3, #0]
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002994:	1c5a      	adds	r2, r3, #1
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800299e:	3b01      	subs	r3, #1
 80029a0:	b29a      	uxth	r2, r3
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029aa:	b29b      	uxth	r3, r3
 80029ac:	3b01      	subs	r3, #1
 80029ae:	b29a      	uxth	r2, r3
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d1aa      	bne.n	8002912 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029bc:	697a      	ldr	r2, [r7, #20]
 80029be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80029c0:	68f8      	ldr	r0, [r7, #12]
 80029c2:	f000 f9de 	bl	8002d82 <I2C_WaitOnBTFFlagUntilTimeout>
 80029c6:	4603      	mov	r3, r0
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d00d      	beq.n	80029e8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d0:	2b04      	cmp	r3, #4
 80029d2:	d107      	bne.n	80029e4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029e2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	e016      	b.n	8002a16 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2220      	movs	r2, #32
 80029fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2200      	movs	r2, #0
 8002a04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002a10:	2300      	movs	r3, #0
 8002a12:	e000      	b.n	8002a16 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002a14:	2302      	movs	r3, #2
  }
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3718      	adds	r7, #24
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	bf00      	nop
 8002a20:	00100002 	.word	0x00100002
 8002a24:	ffff0000 	.word	0xffff0000

08002a28 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b088      	sub	sp, #32
 8002a2c:	af02      	add	r7, sp, #8
 8002a2e:	60f8      	str	r0, [r7, #12]
 8002a30:	4608      	mov	r0, r1
 8002a32:	4611      	mov	r1, r2
 8002a34:	461a      	mov	r2, r3
 8002a36:	4603      	mov	r3, r0
 8002a38:	817b      	strh	r3, [r7, #10]
 8002a3a:	460b      	mov	r3, r1
 8002a3c:	813b      	strh	r3, [r7, #8]
 8002a3e:	4613      	mov	r3, r2
 8002a40:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a50:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a54:	9300      	str	r3, [sp, #0]
 8002a56:	6a3b      	ldr	r3, [r7, #32]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002a5e:	68f8      	ldr	r0, [r7, #12]
 8002a60:	f000 f878 	bl	8002b54 <I2C_WaitOnFlagUntilTimeout>
 8002a64:	4603      	mov	r3, r0
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d00d      	beq.n	8002a86 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a78:	d103      	bne.n	8002a82 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a80:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002a82:	2303      	movs	r3, #3
 8002a84:	e05f      	b.n	8002b46 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002a86:	897b      	ldrh	r3, [r7, #10]
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	461a      	mov	r2, r3
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002a94:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a98:	6a3a      	ldr	r2, [r7, #32]
 8002a9a:	492d      	ldr	r1, [pc, #180]	; (8002b50 <I2C_RequestMemoryWrite+0x128>)
 8002a9c:	68f8      	ldr	r0, [r7, #12]
 8002a9e:	f000 f8b0 	bl	8002c02 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d001      	beq.n	8002aac <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e04c      	b.n	8002b46 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002aac:	2300      	movs	r3, #0
 8002aae:	617b      	str	r3, [r7, #20]
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	695b      	ldr	r3, [r3, #20]
 8002ab6:	617b      	str	r3, [r7, #20]
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	699b      	ldr	r3, [r3, #24]
 8002abe:	617b      	str	r3, [r7, #20]
 8002ac0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ac2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ac4:	6a39      	ldr	r1, [r7, #32]
 8002ac6:	68f8      	ldr	r0, [r7, #12]
 8002ac8:	f000 f91a 	bl	8002d00 <I2C_WaitOnTXEFlagUntilTimeout>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d00d      	beq.n	8002aee <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad6:	2b04      	cmp	r3, #4
 8002ad8:	d107      	bne.n	8002aea <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ae8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e02b      	b.n	8002b46 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002aee:	88fb      	ldrh	r3, [r7, #6]
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d105      	bne.n	8002b00 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002af4:	893b      	ldrh	r3, [r7, #8]
 8002af6:	b2da      	uxtb	r2, r3
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	611a      	str	r2, [r3, #16]
 8002afe:	e021      	b.n	8002b44 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002b00:	893b      	ldrh	r3, [r7, #8]
 8002b02:	0a1b      	lsrs	r3, r3, #8
 8002b04:	b29b      	uxth	r3, r3
 8002b06:	b2da      	uxtb	r2, r3
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b10:	6a39      	ldr	r1, [r7, #32]
 8002b12:	68f8      	ldr	r0, [r7, #12]
 8002b14:	f000 f8f4 	bl	8002d00 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d00d      	beq.n	8002b3a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b22:	2b04      	cmp	r3, #4
 8002b24:	d107      	bne.n	8002b36 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b34:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e005      	b.n	8002b46 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002b3a:	893b      	ldrh	r3, [r7, #8]
 8002b3c:	b2da      	uxtb	r2, r3
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002b44:	2300      	movs	r3, #0
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3718      	adds	r7, #24
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	00010002 	.word	0x00010002

08002b54 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b084      	sub	sp, #16
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	60f8      	str	r0, [r7, #12]
 8002b5c:	60b9      	str	r1, [r7, #8]
 8002b5e:	603b      	str	r3, [r7, #0]
 8002b60:	4613      	mov	r3, r2
 8002b62:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b64:	e025      	b.n	8002bb2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b6c:	d021      	beq.n	8002bb2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b6e:	f7ff f983 	bl	8001e78 <HAL_GetTick>
 8002b72:	4602      	mov	r2, r0
 8002b74:	69bb      	ldr	r3, [r7, #24]
 8002b76:	1ad3      	subs	r3, r2, r3
 8002b78:	683a      	ldr	r2, [r7, #0]
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	d302      	bcc.n	8002b84 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d116      	bne.n	8002bb2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2200      	movs	r2, #0
 8002b88:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2220      	movs	r2, #32
 8002b8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	2200      	movs	r2, #0
 8002b96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9e:	f043 0220 	orr.w	r2, r3, #32
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e023      	b.n	8002bfa <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	0c1b      	lsrs	r3, r3, #16
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d10d      	bne.n	8002bd8 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	695b      	ldr	r3, [r3, #20]
 8002bc2:	43da      	mvns	r2, r3
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	b29b      	uxth	r3, r3
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	bf0c      	ite	eq
 8002bce:	2301      	moveq	r3, #1
 8002bd0:	2300      	movne	r3, #0
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	e00c      	b.n	8002bf2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	699b      	ldr	r3, [r3, #24]
 8002bde:	43da      	mvns	r2, r3
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	4013      	ands	r3, r2
 8002be4:	b29b      	uxth	r3, r3
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	bf0c      	ite	eq
 8002bea:	2301      	moveq	r3, #1
 8002bec:	2300      	movne	r3, #0
 8002bee:	b2db      	uxtb	r3, r3
 8002bf0:	461a      	mov	r2, r3
 8002bf2:	79fb      	ldrb	r3, [r7, #7]
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d0b6      	beq.n	8002b66 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002bf8:	2300      	movs	r3, #0
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3710      	adds	r7, #16
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}

08002c02 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002c02:	b580      	push	{r7, lr}
 8002c04:	b084      	sub	sp, #16
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	60f8      	str	r0, [r7, #12]
 8002c0a:	60b9      	str	r1, [r7, #8]
 8002c0c:	607a      	str	r2, [r7, #4]
 8002c0e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c10:	e051      	b.n	8002cb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	695b      	ldr	r3, [r3, #20]
 8002c18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c20:	d123      	bne.n	8002c6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c30:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002c3a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	2220      	movs	r2, #32
 8002c46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c56:	f043 0204 	orr.w	r2, r3, #4
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2200      	movs	r2, #0
 8002c62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	e046      	b.n	8002cf8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c70:	d021      	beq.n	8002cb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c72:	f7ff f901 	bl	8001e78 <HAL_GetTick>
 8002c76:	4602      	mov	r2, r0
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	1ad3      	subs	r3, r2, r3
 8002c7c:	687a      	ldr	r2, [r7, #4]
 8002c7e:	429a      	cmp	r2, r3
 8002c80:	d302      	bcc.n	8002c88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d116      	bne.n	8002cb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2220      	movs	r2, #32
 8002c92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca2:	f043 0220 	orr.w	r2, r3, #32
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2200      	movs	r2, #0
 8002cae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e020      	b.n	8002cf8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	0c1b      	lsrs	r3, r3, #16
 8002cba:	b2db      	uxtb	r3, r3
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d10c      	bne.n	8002cda <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	695b      	ldr	r3, [r3, #20]
 8002cc6:	43da      	mvns	r2, r3
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	4013      	ands	r3, r2
 8002ccc:	b29b      	uxth	r3, r3
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	bf14      	ite	ne
 8002cd2:	2301      	movne	r3, #1
 8002cd4:	2300      	moveq	r3, #0
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	e00b      	b.n	8002cf2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	699b      	ldr	r3, [r3, #24]
 8002ce0:	43da      	mvns	r2, r3
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	b29b      	uxth	r3, r3
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	bf14      	ite	ne
 8002cec:	2301      	movne	r3, #1
 8002cee:	2300      	moveq	r3, #0
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d18d      	bne.n	8002c12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002cf6:	2300      	movs	r3, #0
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	3710      	adds	r7, #16
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}

08002d00 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b084      	sub	sp, #16
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	60f8      	str	r0, [r7, #12]
 8002d08:	60b9      	str	r1, [r7, #8]
 8002d0a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d0c:	e02d      	b.n	8002d6a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002d0e:	68f8      	ldr	r0, [r7, #12]
 8002d10:	f000 f878 	bl	8002e04 <I2C_IsAcknowledgeFailed>
 8002d14:	4603      	mov	r3, r0
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d001      	beq.n	8002d1e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e02d      	b.n	8002d7a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d24:	d021      	beq.n	8002d6a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d26:	f7ff f8a7 	bl	8001e78 <HAL_GetTick>
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	1ad3      	subs	r3, r2, r3
 8002d30:	68ba      	ldr	r2, [r7, #8]
 8002d32:	429a      	cmp	r2, r3
 8002d34:	d302      	bcc.n	8002d3c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d116      	bne.n	8002d6a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	2220      	movs	r2, #32
 8002d46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d56:	f043 0220 	orr.w	r2, r3, #32
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	2200      	movs	r2, #0
 8002d62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e007      	b.n	8002d7a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	695b      	ldr	r3, [r3, #20]
 8002d70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d74:	2b80      	cmp	r3, #128	; 0x80
 8002d76:	d1ca      	bne.n	8002d0e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002d78:	2300      	movs	r3, #0
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3710      	adds	r7, #16
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}

08002d82 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d82:	b580      	push	{r7, lr}
 8002d84:	b084      	sub	sp, #16
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	60f8      	str	r0, [r7, #12]
 8002d8a:	60b9      	str	r1, [r7, #8]
 8002d8c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002d8e:	e02d      	b.n	8002dec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002d90:	68f8      	ldr	r0, [r7, #12]
 8002d92:	f000 f837 	bl	8002e04 <I2C_IsAcknowledgeFailed>
 8002d96:	4603      	mov	r3, r0
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d001      	beq.n	8002da0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e02d      	b.n	8002dfc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002da6:	d021      	beq.n	8002dec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002da8:	f7ff f866 	bl	8001e78 <HAL_GetTick>
 8002dac:	4602      	mov	r2, r0
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	68ba      	ldr	r2, [r7, #8]
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d302      	bcc.n	8002dbe <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d116      	bne.n	8002dec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2220      	movs	r2, #32
 8002dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd8:	f043 0220 	orr.w	r2, r3, #32
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2200      	movs	r2, #0
 8002de4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e007      	b.n	8002dfc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	695b      	ldr	r3, [r3, #20]
 8002df2:	f003 0304 	and.w	r3, r3, #4
 8002df6:	2b04      	cmp	r3, #4
 8002df8:	d1ca      	bne.n	8002d90 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002dfa:	2300      	movs	r3, #0
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	3710      	adds	r7, #16
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}

08002e04 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b083      	sub	sp, #12
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	695b      	ldr	r3, [r3, #20]
 8002e12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e1a:	d11b      	bne.n	8002e54 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002e24:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2220      	movs	r2, #32
 8002e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2200      	movs	r2, #0
 8002e38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e40:	f043 0204 	orr.w	r2, r3, #4
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	e000      	b.n	8002e56 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002e54:	2300      	movs	r3, #0
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	370c      	adds	r7, #12
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr
	...

08002e64 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b082      	sub	sp, #8
 8002e68:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002e6e:	2300      	movs	r3, #0
 8002e70:	603b      	str	r3, [r7, #0]
 8002e72:	4b20      	ldr	r3, [pc, #128]	; (8002ef4 <HAL_PWREx_EnableOverDrive+0x90>)
 8002e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e76:	4a1f      	ldr	r2, [pc, #124]	; (8002ef4 <HAL_PWREx_EnableOverDrive+0x90>)
 8002e78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e7c:	6413      	str	r3, [r2, #64]	; 0x40
 8002e7e:	4b1d      	ldr	r3, [pc, #116]	; (8002ef4 <HAL_PWREx_EnableOverDrive+0x90>)
 8002e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e86:	603b      	str	r3, [r7, #0]
 8002e88:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002e8a:	4b1b      	ldr	r3, [pc, #108]	; (8002ef8 <HAL_PWREx_EnableOverDrive+0x94>)
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e90:	f7fe fff2 	bl	8001e78 <HAL_GetTick>
 8002e94:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002e96:	e009      	b.n	8002eac <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002e98:	f7fe ffee 	bl	8001e78 <HAL_GetTick>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ea6:	d901      	bls.n	8002eac <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002ea8:	2303      	movs	r3, #3
 8002eaa:	e01f      	b.n	8002eec <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002eac:	4b13      	ldr	r3, [pc, #76]	; (8002efc <HAL_PWREx_EnableOverDrive+0x98>)
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002eb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002eb8:	d1ee      	bne.n	8002e98 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002eba:	4b11      	ldr	r3, [pc, #68]	; (8002f00 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ec0:	f7fe ffda 	bl	8001e78 <HAL_GetTick>
 8002ec4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002ec6:	e009      	b.n	8002edc <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002ec8:	f7fe ffd6 	bl	8001e78 <HAL_GetTick>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ed6:	d901      	bls.n	8002edc <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002ed8:	2303      	movs	r3, #3
 8002eda:	e007      	b.n	8002eec <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002edc:	4b07      	ldr	r3, [pc, #28]	; (8002efc <HAL_PWREx_EnableOverDrive+0x98>)
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ee4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002ee8:	d1ee      	bne.n	8002ec8 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002eea:	2300      	movs	r3, #0
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	3708      	adds	r7, #8
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}
 8002ef4:	40023800 	.word	0x40023800
 8002ef8:	420e0040 	.word	0x420e0040
 8002efc:	40007000 	.word	0x40007000
 8002f00:	420e0044 	.word	0x420e0044

08002f04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b084      	sub	sp, #16
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
 8002f0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d101      	bne.n	8002f18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	e0cc      	b.n	80030b2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f18:	4b68      	ldr	r3, [pc, #416]	; (80030bc <HAL_RCC_ClockConfig+0x1b8>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 030f 	and.w	r3, r3, #15
 8002f20:	683a      	ldr	r2, [r7, #0]
 8002f22:	429a      	cmp	r2, r3
 8002f24:	d90c      	bls.n	8002f40 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f26:	4b65      	ldr	r3, [pc, #404]	; (80030bc <HAL_RCC_ClockConfig+0x1b8>)
 8002f28:	683a      	ldr	r2, [r7, #0]
 8002f2a:	b2d2      	uxtb	r2, r2
 8002f2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f2e:	4b63      	ldr	r3, [pc, #396]	; (80030bc <HAL_RCC_ClockConfig+0x1b8>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 030f 	and.w	r3, r3, #15
 8002f36:	683a      	ldr	r2, [r7, #0]
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d001      	beq.n	8002f40 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e0b8      	b.n	80030b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 0302 	and.w	r3, r3, #2
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d020      	beq.n	8002f8e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 0304 	and.w	r3, r3, #4
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d005      	beq.n	8002f64 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f58:	4b59      	ldr	r3, [pc, #356]	; (80030c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	4a58      	ldr	r2, [pc, #352]	; (80030c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f5e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002f62:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 0308 	and.w	r3, r3, #8
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d005      	beq.n	8002f7c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f70:	4b53      	ldr	r3, [pc, #332]	; (80030c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	4a52      	ldr	r2, [pc, #328]	; (80030c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f76:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002f7a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f7c:	4b50      	ldr	r3, [pc, #320]	; (80030c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	494d      	ldr	r1, [pc, #308]	; (80030c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 0301 	and.w	r3, r3, #1
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d044      	beq.n	8003024 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d107      	bne.n	8002fb2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fa2:	4b47      	ldr	r3, [pc, #284]	; (80030c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d119      	bne.n	8002fe2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e07f      	b.n	80030b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	2b02      	cmp	r3, #2
 8002fb8:	d003      	beq.n	8002fc2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fbe:	2b03      	cmp	r3, #3
 8002fc0:	d107      	bne.n	8002fd2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fc2:	4b3f      	ldr	r3, [pc, #252]	; (80030c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d109      	bne.n	8002fe2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e06f      	b.n	80030b2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fd2:	4b3b      	ldr	r3, [pc, #236]	; (80030c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 0302 	and.w	r3, r3, #2
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d101      	bne.n	8002fe2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e067      	b.n	80030b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fe2:	4b37      	ldr	r3, [pc, #220]	; (80030c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	f023 0203 	bic.w	r2, r3, #3
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	4934      	ldr	r1, [pc, #208]	; (80030c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ff4:	f7fe ff40 	bl	8001e78 <HAL_GetTick>
 8002ff8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ffa:	e00a      	b.n	8003012 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ffc:	f7fe ff3c 	bl	8001e78 <HAL_GetTick>
 8003000:	4602      	mov	r2, r0
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	1ad3      	subs	r3, r2, r3
 8003006:	f241 3288 	movw	r2, #5000	; 0x1388
 800300a:	4293      	cmp	r3, r2
 800300c:	d901      	bls.n	8003012 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800300e:	2303      	movs	r3, #3
 8003010:	e04f      	b.n	80030b2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003012:	4b2b      	ldr	r3, [pc, #172]	; (80030c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	f003 020c 	and.w	r2, r3, #12
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	429a      	cmp	r2, r3
 8003022:	d1eb      	bne.n	8002ffc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003024:	4b25      	ldr	r3, [pc, #148]	; (80030bc <HAL_RCC_ClockConfig+0x1b8>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 030f 	and.w	r3, r3, #15
 800302c:	683a      	ldr	r2, [r7, #0]
 800302e:	429a      	cmp	r2, r3
 8003030:	d20c      	bcs.n	800304c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003032:	4b22      	ldr	r3, [pc, #136]	; (80030bc <HAL_RCC_ClockConfig+0x1b8>)
 8003034:	683a      	ldr	r2, [r7, #0]
 8003036:	b2d2      	uxtb	r2, r2
 8003038:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800303a:	4b20      	ldr	r3, [pc, #128]	; (80030bc <HAL_RCC_ClockConfig+0x1b8>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 030f 	and.w	r3, r3, #15
 8003042:	683a      	ldr	r2, [r7, #0]
 8003044:	429a      	cmp	r2, r3
 8003046:	d001      	beq.n	800304c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	e032      	b.n	80030b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 0304 	and.w	r3, r3, #4
 8003054:	2b00      	cmp	r3, #0
 8003056:	d008      	beq.n	800306a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003058:	4b19      	ldr	r3, [pc, #100]	; (80030c0 <HAL_RCC_ClockConfig+0x1bc>)
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	4916      	ldr	r1, [pc, #88]	; (80030c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003066:	4313      	orrs	r3, r2
 8003068:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 0308 	and.w	r3, r3, #8
 8003072:	2b00      	cmp	r3, #0
 8003074:	d009      	beq.n	800308a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003076:	4b12      	ldr	r3, [pc, #72]	; (80030c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	691b      	ldr	r3, [r3, #16]
 8003082:	00db      	lsls	r3, r3, #3
 8003084:	490e      	ldr	r1, [pc, #56]	; (80030c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003086:	4313      	orrs	r3, r2
 8003088:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800308a:	f000 f855 	bl	8003138 <HAL_RCC_GetSysClockFreq>
 800308e:	4602      	mov	r2, r0
 8003090:	4b0b      	ldr	r3, [pc, #44]	; (80030c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	091b      	lsrs	r3, r3, #4
 8003096:	f003 030f 	and.w	r3, r3, #15
 800309a:	490a      	ldr	r1, [pc, #40]	; (80030c4 <HAL_RCC_ClockConfig+0x1c0>)
 800309c:	5ccb      	ldrb	r3, [r1, r3]
 800309e:	fa22 f303 	lsr.w	r3, r2, r3
 80030a2:	4a09      	ldr	r2, [pc, #36]	; (80030c8 <HAL_RCC_ClockConfig+0x1c4>)
 80030a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80030a6:	4b09      	ldr	r3, [pc, #36]	; (80030cc <HAL_RCC_ClockConfig+0x1c8>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4618      	mov	r0, r3
 80030ac:	f7fe fea0 	bl	8001df0 <HAL_InitTick>

  return HAL_OK;
 80030b0:	2300      	movs	r3, #0
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3710      	adds	r7, #16
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}
 80030ba:	bf00      	nop
 80030bc:	40023c00 	.word	0x40023c00
 80030c0:	40023800 	.word	0x40023800
 80030c4:	080089c8 	.word	0x080089c8
 80030c8:	20000000 	.word	0x20000000
 80030cc:	20000004 	.word	0x20000004

080030d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030d0:	b480      	push	{r7}
 80030d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030d4:	4b03      	ldr	r3, [pc, #12]	; (80030e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80030d6:	681b      	ldr	r3, [r3, #0]
}
 80030d8:	4618      	mov	r0, r3
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr
 80030e2:	bf00      	nop
 80030e4:	20000000 	.word	0x20000000

080030e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80030ec:	f7ff fff0 	bl	80030d0 <HAL_RCC_GetHCLKFreq>
 80030f0:	4602      	mov	r2, r0
 80030f2:	4b05      	ldr	r3, [pc, #20]	; (8003108 <HAL_RCC_GetPCLK1Freq+0x20>)
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	0a9b      	lsrs	r3, r3, #10
 80030f8:	f003 0307 	and.w	r3, r3, #7
 80030fc:	4903      	ldr	r1, [pc, #12]	; (800310c <HAL_RCC_GetPCLK1Freq+0x24>)
 80030fe:	5ccb      	ldrb	r3, [r1, r3]
 8003100:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003104:	4618      	mov	r0, r3
 8003106:	bd80      	pop	{r7, pc}
 8003108:	40023800 	.word	0x40023800
 800310c:	080089d8 	.word	0x080089d8

08003110 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003114:	f7ff ffdc 	bl	80030d0 <HAL_RCC_GetHCLKFreq>
 8003118:	4602      	mov	r2, r0
 800311a:	4b05      	ldr	r3, [pc, #20]	; (8003130 <HAL_RCC_GetPCLK2Freq+0x20>)
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	0b5b      	lsrs	r3, r3, #13
 8003120:	f003 0307 	and.w	r3, r3, #7
 8003124:	4903      	ldr	r1, [pc, #12]	; (8003134 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003126:	5ccb      	ldrb	r3, [r1, r3]
 8003128:	fa22 f303 	lsr.w	r3, r2, r3
}
 800312c:	4618      	mov	r0, r3
 800312e:	bd80      	pop	{r7, pc}
 8003130:	40023800 	.word	0x40023800
 8003134:	080089d8 	.word	0x080089d8

08003138 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003138:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800313c:	b0ae      	sub	sp, #184	; 0xb8
 800313e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003140:	2300      	movs	r3, #0
 8003142:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8003146:	2300      	movs	r3, #0
 8003148:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 800314c:	2300      	movs	r3, #0
 800314e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8003152:	2300      	movs	r3, #0
 8003154:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8003158:	2300      	movs	r3, #0
 800315a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800315e:	4bcb      	ldr	r3, [pc, #812]	; (800348c <HAL_RCC_GetSysClockFreq+0x354>)
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	f003 030c 	and.w	r3, r3, #12
 8003166:	2b0c      	cmp	r3, #12
 8003168:	f200 8206 	bhi.w	8003578 <HAL_RCC_GetSysClockFreq+0x440>
 800316c:	a201      	add	r2, pc, #4	; (adr r2, 8003174 <HAL_RCC_GetSysClockFreq+0x3c>)
 800316e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003172:	bf00      	nop
 8003174:	080031a9 	.word	0x080031a9
 8003178:	08003579 	.word	0x08003579
 800317c:	08003579 	.word	0x08003579
 8003180:	08003579 	.word	0x08003579
 8003184:	080031b1 	.word	0x080031b1
 8003188:	08003579 	.word	0x08003579
 800318c:	08003579 	.word	0x08003579
 8003190:	08003579 	.word	0x08003579
 8003194:	080031b9 	.word	0x080031b9
 8003198:	08003579 	.word	0x08003579
 800319c:	08003579 	.word	0x08003579
 80031a0:	08003579 	.word	0x08003579
 80031a4:	080033a9 	.word	0x080033a9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80031a8:	4bb9      	ldr	r3, [pc, #740]	; (8003490 <HAL_RCC_GetSysClockFreq+0x358>)
 80031aa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80031ae:	e1e7      	b.n	8003580 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80031b0:	4bb8      	ldr	r3, [pc, #736]	; (8003494 <HAL_RCC_GetSysClockFreq+0x35c>)
 80031b2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80031b6:	e1e3      	b.n	8003580 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80031b8:	4bb4      	ldr	r3, [pc, #720]	; (800348c <HAL_RCC_GetSysClockFreq+0x354>)
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80031c0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80031c4:	4bb1      	ldr	r3, [pc, #708]	; (800348c <HAL_RCC_GetSysClockFreq+0x354>)
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d071      	beq.n	80032b4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031d0:	4bae      	ldr	r3, [pc, #696]	; (800348c <HAL_RCC_GetSysClockFreq+0x354>)
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	099b      	lsrs	r3, r3, #6
 80031d6:	2200      	movs	r2, #0
 80031d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80031dc:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80031e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80031e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031e8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80031ec:	2300      	movs	r3, #0
 80031ee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80031f2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80031f6:	4622      	mov	r2, r4
 80031f8:	462b      	mov	r3, r5
 80031fa:	f04f 0000 	mov.w	r0, #0
 80031fe:	f04f 0100 	mov.w	r1, #0
 8003202:	0159      	lsls	r1, r3, #5
 8003204:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003208:	0150      	lsls	r0, r2, #5
 800320a:	4602      	mov	r2, r0
 800320c:	460b      	mov	r3, r1
 800320e:	4621      	mov	r1, r4
 8003210:	1a51      	subs	r1, r2, r1
 8003212:	6439      	str	r1, [r7, #64]	; 0x40
 8003214:	4629      	mov	r1, r5
 8003216:	eb63 0301 	sbc.w	r3, r3, r1
 800321a:	647b      	str	r3, [r7, #68]	; 0x44
 800321c:	f04f 0200 	mov.w	r2, #0
 8003220:	f04f 0300 	mov.w	r3, #0
 8003224:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8003228:	4649      	mov	r1, r9
 800322a:	018b      	lsls	r3, r1, #6
 800322c:	4641      	mov	r1, r8
 800322e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003232:	4641      	mov	r1, r8
 8003234:	018a      	lsls	r2, r1, #6
 8003236:	4641      	mov	r1, r8
 8003238:	1a51      	subs	r1, r2, r1
 800323a:	63b9      	str	r1, [r7, #56]	; 0x38
 800323c:	4649      	mov	r1, r9
 800323e:	eb63 0301 	sbc.w	r3, r3, r1
 8003242:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003244:	f04f 0200 	mov.w	r2, #0
 8003248:	f04f 0300 	mov.w	r3, #0
 800324c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8003250:	4649      	mov	r1, r9
 8003252:	00cb      	lsls	r3, r1, #3
 8003254:	4641      	mov	r1, r8
 8003256:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800325a:	4641      	mov	r1, r8
 800325c:	00ca      	lsls	r2, r1, #3
 800325e:	4610      	mov	r0, r2
 8003260:	4619      	mov	r1, r3
 8003262:	4603      	mov	r3, r0
 8003264:	4622      	mov	r2, r4
 8003266:	189b      	adds	r3, r3, r2
 8003268:	633b      	str	r3, [r7, #48]	; 0x30
 800326a:	462b      	mov	r3, r5
 800326c:	460a      	mov	r2, r1
 800326e:	eb42 0303 	adc.w	r3, r2, r3
 8003272:	637b      	str	r3, [r7, #52]	; 0x34
 8003274:	f04f 0200 	mov.w	r2, #0
 8003278:	f04f 0300 	mov.w	r3, #0
 800327c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003280:	4629      	mov	r1, r5
 8003282:	024b      	lsls	r3, r1, #9
 8003284:	4621      	mov	r1, r4
 8003286:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800328a:	4621      	mov	r1, r4
 800328c:	024a      	lsls	r2, r1, #9
 800328e:	4610      	mov	r0, r2
 8003290:	4619      	mov	r1, r3
 8003292:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003296:	2200      	movs	r2, #0
 8003298:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800329c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80032a0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80032a4:	f7fd fcf0 	bl	8000c88 <__aeabi_uldivmod>
 80032a8:	4602      	mov	r2, r0
 80032aa:	460b      	mov	r3, r1
 80032ac:	4613      	mov	r3, r2
 80032ae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80032b2:	e067      	b.n	8003384 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032b4:	4b75      	ldr	r3, [pc, #468]	; (800348c <HAL_RCC_GetSysClockFreq+0x354>)
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	099b      	lsrs	r3, r3, #6
 80032ba:	2200      	movs	r2, #0
 80032bc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80032c0:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80032c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80032c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032cc:	67bb      	str	r3, [r7, #120]	; 0x78
 80032ce:	2300      	movs	r3, #0
 80032d0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80032d2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80032d6:	4622      	mov	r2, r4
 80032d8:	462b      	mov	r3, r5
 80032da:	f04f 0000 	mov.w	r0, #0
 80032de:	f04f 0100 	mov.w	r1, #0
 80032e2:	0159      	lsls	r1, r3, #5
 80032e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80032e8:	0150      	lsls	r0, r2, #5
 80032ea:	4602      	mov	r2, r0
 80032ec:	460b      	mov	r3, r1
 80032ee:	4621      	mov	r1, r4
 80032f0:	1a51      	subs	r1, r2, r1
 80032f2:	62b9      	str	r1, [r7, #40]	; 0x28
 80032f4:	4629      	mov	r1, r5
 80032f6:	eb63 0301 	sbc.w	r3, r3, r1
 80032fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032fc:	f04f 0200 	mov.w	r2, #0
 8003300:	f04f 0300 	mov.w	r3, #0
 8003304:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003308:	4649      	mov	r1, r9
 800330a:	018b      	lsls	r3, r1, #6
 800330c:	4641      	mov	r1, r8
 800330e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003312:	4641      	mov	r1, r8
 8003314:	018a      	lsls	r2, r1, #6
 8003316:	4641      	mov	r1, r8
 8003318:	ebb2 0a01 	subs.w	sl, r2, r1
 800331c:	4649      	mov	r1, r9
 800331e:	eb63 0b01 	sbc.w	fp, r3, r1
 8003322:	f04f 0200 	mov.w	r2, #0
 8003326:	f04f 0300 	mov.w	r3, #0
 800332a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800332e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003332:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003336:	4692      	mov	sl, r2
 8003338:	469b      	mov	fp, r3
 800333a:	4623      	mov	r3, r4
 800333c:	eb1a 0303 	adds.w	r3, sl, r3
 8003340:	623b      	str	r3, [r7, #32]
 8003342:	462b      	mov	r3, r5
 8003344:	eb4b 0303 	adc.w	r3, fp, r3
 8003348:	627b      	str	r3, [r7, #36]	; 0x24
 800334a:	f04f 0200 	mov.w	r2, #0
 800334e:	f04f 0300 	mov.w	r3, #0
 8003352:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003356:	4629      	mov	r1, r5
 8003358:	028b      	lsls	r3, r1, #10
 800335a:	4621      	mov	r1, r4
 800335c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003360:	4621      	mov	r1, r4
 8003362:	028a      	lsls	r2, r1, #10
 8003364:	4610      	mov	r0, r2
 8003366:	4619      	mov	r1, r3
 8003368:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800336c:	2200      	movs	r2, #0
 800336e:	673b      	str	r3, [r7, #112]	; 0x70
 8003370:	677a      	str	r2, [r7, #116]	; 0x74
 8003372:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003376:	f7fd fc87 	bl	8000c88 <__aeabi_uldivmod>
 800337a:	4602      	mov	r2, r0
 800337c:	460b      	mov	r3, r1
 800337e:	4613      	mov	r3, r2
 8003380:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003384:	4b41      	ldr	r3, [pc, #260]	; (800348c <HAL_RCC_GetSysClockFreq+0x354>)
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	0c1b      	lsrs	r3, r3, #16
 800338a:	f003 0303 	and.w	r3, r3, #3
 800338e:	3301      	adds	r3, #1
 8003390:	005b      	lsls	r3, r3, #1
 8003392:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8003396:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800339a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800339e:	fbb2 f3f3 	udiv	r3, r2, r3
 80033a2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80033a6:	e0eb      	b.n	8003580 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033a8:	4b38      	ldr	r3, [pc, #224]	; (800348c <HAL_RCC_GetSysClockFreq+0x354>)
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80033b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80033b4:	4b35      	ldr	r3, [pc, #212]	; (800348c <HAL_RCC_GetSysClockFreq+0x354>)
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d06b      	beq.n	8003498 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033c0:	4b32      	ldr	r3, [pc, #200]	; (800348c <HAL_RCC_GetSysClockFreq+0x354>)
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	099b      	lsrs	r3, r3, #6
 80033c6:	2200      	movs	r2, #0
 80033c8:	66bb      	str	r3, [r7, #104]	; 0x68
 80033ca:	66fa      	str	r2, [r7, #108]	; 0x6c
 80033cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80033ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033d2:	663b      	str	r3, [r7, #96]	; 0x60
 80033d4:	2300      	movs	r3, #0
 80033d6:	667b      	str	r3, [r7, #100]	; 0x64
 80033d8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80033dc:	4622      	mov	r2, r4
 80033de:	462b      	mov	r3, r5
 80033e0:	f04f 0000 	mov.w	r0, #0
 80033e4:	f04f 0100 	mov.w	r1, #0
 80033e8:	0159      	lsls	r1, r3, #5
 80033ea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033ee:	0150      	lsls	r0, r2, #5
 80033f0:	4602      	mov	r2, r0
 80033f2:	460b      	mov	r3, r1
 80033f4:	4621      	mov	r1, r4
 80033f6:	1a51      	subs	r1, r2, r1
 80033f8:	61b9      	str	r1, [r7, #24]
 80033fa:	4629      	mov	r1, r5
 80033fc:	eb63 0301 	sbc.w	r3, r3, r1
 8003400:	61fb      	str	r3, [r7, #28]
 8003402:	f04f 0200 	mov.w	r2, #0
 8003406:	f04f 0300 	mov.w	r3, #0
 800340a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800340e:	4659      	mov	r1, fp
 8003410:	018b      	lsls	r3, r1, #6
 8003412:	4651      	mov	r1, sl
 8003414:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003418:	4651      	mov	r1, sl
 800341a:	018a      	lsls	r2, r1, #6
 800341c:	4651      	mov	r1, sl
 800341e:	ebb2 0801 	subs.w	r8, r2, r1
 8003422:	4659      	mov	r1, fp
 8003424:	eb63 0901 	sbc.w	r9, r3, r1
 8003428:	f04f 0200 	mov.w	r2, #0
 800342c:	f04f 0300 	mov.w	r3, #0
 8003430:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003434:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003438:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800343c:	4690      	mov	r8, r2
 800343e:	4699      	mov	r9, r3
 8003440:	4623      	mov	r3, r4
 8003442:	eb18 0303 	adds.w	r3, r8, r3
 8003446:	613b      	str	r3, [r7, #16]
 8003448:	462b      	mov	r3, r5
 800344a:	eb49 0303 	adc.w	r3, r9, r3
 800344e:	617b      	str	r3, [r7, #20]
 8003450:	f04f 0200 	mov.w	r2, #0
 8003454:	f04f 0300 	mov.w	r3, #0
 8003458:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800345c:	4629      	mov	r1, r5
 800345e:	024b      	lsls	r3, r1, #9
 8003460:	4621      	mov	r1, r4
 8003462:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003466:	4621      	mov	r1, r4
 8003468:	024a      	lsls	r2, r1, #9
 800346a:	4610      	mov	r0, r2
 800346c:	4619      	mov	r1, r3
 800346e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003472:	2200      	movs	r2, #0
 8003474:	65bb      	str	r3, [r7, #88]	; 0x58
 8003476:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003478:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800347c:	f7fd fc04 	bl	8000c88 <__aeabi_uldivmod>
 8003480:	4602      	mov	r2, r0
 8003482:	460b      	mov	r3, r1
 8003484:	4613      	mov	r3, r2
 8003486:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800348a:	e065      	b.n	8003558 <HAL_RCC_GetSysClockFreq+0x420>
 800348c:	40023800 	.word	0x40023800
 8003490:	00f42400 	.word	0x00f42400
 8003494:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003498:	4b3d      	ldr	r3, [pc, #244]	; (8003590 <HAL_RCC_GetSysClockFreq+0x458>)
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	099b      	lsrs	r3, r3, #6
 800349e:	2200      	movs	r2, #0
 80034a0:	4618      	mov	r0, r3
 80034a2:	4611      	mov	r1, r2
 80034a4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80034a8:	653b      	str	r3, [r7, #80]	; 0x50
 80034aa:	2300      	movs	r3, #0
 80034ac:	657b      	str	r3, [r7, #84]	; 0x54
 80034ae:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80034b2:	4642      	mov	r2, r8
 80034b4:	464b      	mov	r3, r9
 80034b6:	f04f 0000 	mov.w	r0, #0
 80034ba:	f04f 0100 	mov.w	r1, #0
 80034be:	0159      	lsls	r1, r3, #5
 80034c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034c4:	0150      	lsls	r0, r2, #5
 80034c6:	4602      	mov	r2, r0
 80034c8:	460b      	mov	r3, r1
 80034ca:	4641      	mov	r1, r8
 80034cc:	1a51      	subs	r1, r2, r1
 80034ce:	60b9      	str	r1, [r7, #8]
 80034d0:	4649      	mov	r1, r9
 80034d2:	eb63 0301 	sbc.w	r3, r3, r1
 80034d6:	60fb      	str	r3, [r7, #12]
 80034d8:	f04f 0200 	mov.w	r2, #0
 80034dc:	f04f 0300 	mov.w	r3, #0
 80034e0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80034e4:	4659      	mov	r1, fp
 80034e6:	018b      	lsls	r3, r1, #6
 80034e8:	4651      	mov	r1, sl
 80034ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80034ee:	4651      	mov	r1, sl
 80034f0:	018a      	lsls	r2, r1, #6
 80034f2:	4651      	mov	r1, sl
 80034f4:	1a54      	subs	r4, r2, r1
 80034f6:	4659      	mov	r1, fp
 80034f8:	eb63 0501 	sbc.w	r5, r3, r1
 80034fc:	f04f 0200 	mov.w	r2, #0
 8003500:	f04f 0300 	mov.w	r3, #0
 8003504:	00eb      	lsls	r3, r5, #3
 8003506:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800350a:	00e2      	lsls	r2, r4, #3
 800350c:	4614      	mov	r4, r2
 800350e:	461d      	mov	r5, r3
 8003510:	4643      	mov	r3, r8
 8003512:	18e3      	adds	r3, r4, r3
 8003514:	603b      	str	r3, [r7, #0]
 8003516:	464b      	mov	r3, r9
 8003518:	eb45 0303 	adc.w	r3, r5, r3
 800351c:	607b      	str	r3, [r7, #4]
 800351e:	f04f 0200 	mov.w	r2, #0
 8003522:	f04f 0300 	mov.w	r3, #0
 8003526:	e9d7 4500 	ldrd	r4, r5, [r7]
 800352a:	4629      	mov	r1, r5
 800352c:	028b      	lsls	r3, r1, #10
 800352e:	4621      	mov	r1, r4
 8003530:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003534:	4621      	mov	r1, r4
 8003536:	028a      	lsls	r2, r1, #10
 8003538:	4610      	mov	r0, r2
 800353a:	4619      	mov	r1, r3
 800353c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003540:	2200      	movs	r2, #0
 8003542:	64bb      	str	r3, [r7, #72]	; 0x48
 8003544:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003546:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800354a:	f7fd fb9d 	bl	8000c88 <__aeabi_uldivmod>
 800354e:	4602      	mov	r2, r0
 8003550:	460b      	mov	r3, r1
 8003552:	4613      	mov	r3, r2
 8003554:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003558:	4b0d      	ldr	r3, [pc, #52]	; (8003590 <HAL_RCC_GetSysClockFreq+0x458>)
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	0f1b      	lsrs	r3, r3, #28
 800355e:	f003 0307 	and.w	r3, r3, #7
 8003562:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8003566:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800356a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800356e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003572:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003576:	e003      	b.n	8003580 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003578:	4b06      	ldr	r3, [pc, #24]	; (8003594 <HAL_RCC_GetSysClockFreq+0x45c>)
 800357a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800357e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003580:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003584:	4618      	mov	r0, r3
 8003586:	37b8      	adds	r7, #184	; 0xb8
 8003588:	46bd      	mov	sp, r7
 800358a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800358e:	bf00      	nop
 8003590:	40023800 	.word	0x40023800
 8003594:	00f42400 	.word	0x00f42400

08003598 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b086      	sub	sp, #24
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d101      	bne.n	80035aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e28d      	b.n	8003ac6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 0301 	and.w	r3, r3, #1
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	f000 8083 	beq.w	80036be <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80035b8:	4b94      	ldr	r3, [pc, #592]	; (800380c <HAL_RCC_OscConfig+0x274>)
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	f003 030c 	and.w	r3, r3, #12
 80035c0:	2b04      	cmp	r3, #4
 80035c2:	d019      	beq.n	80035f8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80035c4:	4b91      	ldr	r3, [pc, #580]	; (800380c <HAL_RCC_OscConfig+0x274>)
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80035cc:	2b08      	cmp	r3, #8
 80035ce:	d106      	bne.n	80035de <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80035d0:	4b8e      	ldr	r3, [pc, #568]	; (800380c <HAL_RCC_OscConfig+0x274>)
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035dc:	d00c      	beq.n	80035f8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035de:	4b8b      	ldr	r3, [pc, #556]	; (800380c <HAL_RCC_OscConfig+0x274>)
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80035e6:	2b0c      	cmp	r3, #12
 80035e8:	d112      	bne.n	8003610 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035ea:	4b88      	ldr	r3, [pc, #544]	; (800380c <HAL_RCC_OscConfig+0x274>)
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035f6:	d10b      	bne.n	8003610 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035f8:	4b84      	ldr	r3, [pc, #528]	; (800380c <HAL_RCC_OscConfig+0x274>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003600:	2b00      	cmp	r3, #0
 8003602:	d05b      	beq.n	80036bc <HAL_RCC_OscConfig+0x124>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d157      	bne.n	80036bc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	e25a      	b.n	8003ac6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003618:	d106      	bne.n	8003628 <HAL_RCC_OscConfig+0x90>
 800361a:	4b7c      	ldr	r3, [pc, #496]	; (800380c <HAL_RCC_OscConfig+0x274>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a7b      	ldr	r2, [pc, #492]	; (800380c <HAL_RCC_OscConfig+0x274>)
 8003620:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003624:	6013      	str	r3, [r2, #0]
 8003626:	e01d      	b.n	8003664 <HAL_RCC_OscConfig+0xcc>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003630:	d10c      	bne.n	800364c <HAL_RCC_OscConfig+0xb4>
 8003632:	4b76      	ldr	r3, [pc, #472]	; (800380c <HAL_RCC_OscConfig+0x274>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a75      	ldr	r2, [pc, #468]	; (800380c <HAL_RCC_OscConfig+0x274>)
 8003638:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800363c:	6013      	str	r3, [r2, #0]
 800363e:	4b73      	ldr	r3, [pc, #460]	; (800380c <HAL_RCC_OscConfig+0x274>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a72      	ldr	r2, [pc, #456]	; (800380c <HAL_RCC_OscConfig+0x274>)
 8003644:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003648:	6013      	str	r3, [r2, #0]
 800364a:	e00b      	b.n	8003664 <HAL_RCC_OscConfig+0xcc>
 800364c:	4b6f      	ldr	r3, [pc, #444]	; (800380c <HAL_RCC_OscConfig+0x274>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a6e      	ldr	r2, [pc, #440]	; (800380c <HAL_RCC_OscConfig+0x274>)
 8003652:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003656:	6013      	str	r3, [r2, #0]
 8003658:	4b6c      	ldr	r3, [pc, #432]	; (800380c <HAL_RCC_OscConfig+0x274>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a6b      	ldr	r2, [pc, #428]	; (800380c <HAL_RCC_OscConfig+0x274>)
 800365e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003662:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d013      	beq.n	8003694 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800366c:	f7fe fc04 	bl	8001e78 <HAL_GetTick>
 8003670:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003672:	e008      	b.n	8003686 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003674:	f7fe fc00 	bl	8001e78 <HAL_GetTick>
 8003678:	4602      	mov	r2, r0
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	1ad3      	subs	r3, r2, r3
 800367e:	2b64      	cmp	r3, #100	; 0x64
 8003680:	d901      	bls.n	8003686 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003682:	2303      	movs	r3, #3
 8003684:	e21f      	b.n	8003ac6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003686:	4b61      	ldr	r3, [pc, #388]	; (800380c <HAL_RCC_OscConfig+0x274>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800368e:	2b00      	cmp	r3, #0
 8003690:	d0f0      	beq.n	8003674 <HAL_RCC_OscConfig+0xdc>
 8003692:	e014      	b.n	80036be <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003694:	f7fe fbf0 	bl	8001e78 <HAL_GetTick>
 8003698:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800369a:	e008      	b.n	80036ae <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800369c:	f7fe fbec 	bl	8001e78 <HAL_GetTick>
 80036a0:	4602      	mov	r2, r0
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	1ad3      	subs	r3, r2, r3
 80036a6:	2b64      	cmp	r3, #100	; 0x64
 80036a8:	d901      	bls.n	80036ae <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80036aa:	2303      	movs	r3, #3
 80036ac:	e20b      	b.n	8003ac6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036ae:	4b57      	ldr	r3, [pc, #348]	; (800380c <HAL_RCC_OscConfig+0x274>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d1f0      	bne.n	800369c <HAL_RCC_OscConfig+0x104>
 80036ba:	e000      	b.n	80036be <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 0302 	and.w	r3, r3, #2
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d06f      	beq.n	80037aa <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80036ca:	4b50      	ldr	r3, [pc, #320]	; (800380c <HAL_RCC_OscConfig+0x274>)
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	f003 030c 	and.w	r3, r3, #12
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d017      	beq.n	8003706 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80036d6:	4b4d      	ldr	r3, [pc, #308]	; (800380c <HAL_RCC_OscConfig+0x274>)
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80036de:	2b08      	cmp	r3, #8
 80036e0:	d105      	bne.n	80036ee <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80036e2:	4b4a      	ldr	r3, [pc, #296]	; (800380c <HAL_RCC_OscConfig+0x274>)
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d00b      	beq.n	8003706 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036ee:	4b47      	ldr	r3, [pc, #284]	; (800380c <HAL_RCC_OscConfig+0x274>)
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80036f6:	2b0c      	cmp	r3, #12
 80036f8:	d11c      	bne.n	8003734 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036fa:	4b44      	ldr	r3, [pc, #272]	; (800380c <HAL_RCC_OscConfig+0x274>)
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003702:	2b00      	cmp	r3, #0
 8003704:	d116      	bne.n	8003734 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003706:	4b41      	ldr	r3, [pc, #260]	; (800380c <HAL_RCC_OscConfig+0x274>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 0302 	and.w	r3, r3, #2
 800370e:	2b00      	cmp	r3, #0
 8003710:	d005      	beq.n	800371e <HAL_RCC_OscConfig+0x186>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	68db      	ldr	r3, [r3, #12]
 8003716:	2b01      	cmp	r3, #1
 8003718:	d001      	beq.n	800371e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	e1d3      	b.n	8003ac6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800371e:	4b3b      	ldr	r3, [pc, #236]	; (800380c <HAL_RCC_OscConfig+0x274>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	691b      	ldr	r3, [r3, #16]
 800372a:	00db      	lsls	r3, r3, #3
 800372c:	4937      	ldr	r1, [pc, #220]	; (800380c <HAL_RCC_OscConfig+0x274>)
 800372e:	4313      	orrs	r3, r2
 8003730:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003732:	e03a      	b.n	80037aa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d020      	beq.n	800377e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800373c:	4b34      	ldr	r3, [pc, #208]	; (8003810 <HAL_RCC_OscConfig+0x278>)
 800373e:	2201      	movs	r2, #1
 8003740:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003742:	f7fe fb99 	bl	8001e78 <HAL_GetTick>
 8003746:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003748:	e008      	b.n	800375c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800374a:	f7fe fb95 	bl	8001e78 <HAL_GetTick>
 800374e:	4602      	mov	r2, r0
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	1ad3      	subs	r3, r2, r3
 8003754:	2b02      	cmp	r3, #2
 8003756:	d901      	bls.n	800375c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003758:	2303      	movs	r3, #3
 800375a:	e1b4      	b.n	8003ac6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800375c:	4b2b      	ldr	r3, [pc, #172]	; (800380c <HAL_RCC_OscConfig+0x274>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f003 0302 	and.w	r3, r3, #2
 8003764:	2b00      	cmp	r3, #0
 8003766:	d0f0      	beq.n	800374a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003768:	4b28      	ldr	r3, [pc, #160]	; (800380c <HAL_RCC_OscConfig+0x274>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	691b      	ldr	r3, [r3, #16]
 8003774:	00db      	lsls	r3, r3, #3
 8003776:	4925      	ldr	r1, [pc, #148]	; (800380c <HAL_RCC_OscConfig+0x274>)
 8003778:	4313      	orrs	r3, r2
 800377a:	600b      	str	r3, [r1, #0]
 800377c:	e015      	b.n	80037aa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800377e:	4b24      	ldr	r3, [pc, #144]	; (8003810 <HAL_RCC_OscConfig+0x278>)
 8003780:	2200      	movs	r2, #0
 8003782:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003784:	f7fe fb78 	bl	8001e78 <HAL_GetTick>
 8003788:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800378a:	e008      	b.n	800379e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800378c:	f7fe fb74 	bl	8001e78 <HAL_GetTick>
 8003790:	4602      	mov	r2, r0
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	2b02      	cmp	r3, #2
 8003798:	d901      	bls.n	800379e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800379a:	2303      	movs	r3, #3
 800379c:	e193      	b.n	8003ac6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800379e:	4b1b      	ldr	r3, [pc, #108]	; (800380c <HAL_RCC_OscConfig+0x274>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 0302 	and.w	r3, r3, #2
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d1f0      	bne.n	800378c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 0308 	and.w	r3, r3, #8
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d036      	beq.n	8003824 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	695b      	ldr	r3, [r3, #20]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d016      	beq.n	80037ec <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037be:	4b15      	ldr	r3, [pc, #84]	; (8003814 <HAL_RCC_OscConfig+0x27c>)
 80037c0:	2201      	movs	r2, #1
 80037c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037c4:	f7fe fb58 	bl	8001e78 <HAL_GetTick>
 80037c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037ca:	e008      	b.n	80037de <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037cc:	f7fe fb54 	bl	8001e78 <HAL_GetTick>
 80037d0:	4602      	mov	r2, r0
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	1ad3      	subs	r3, r2, r3
 80037d6:	2b02      	cmp	r3, #2
 80037d8:	d901      	bls.n	80037de <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80037da:	2303      	movs	r3, #3
 80037dc:	e173      	b.n	8003ac6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037de:	4b0b      	ldr	r3, [pc, #44]	; (800380c <HAL_RCC_OscConfig+0x274>)
 80037e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037e2:	f003 0302 	and.w	r3, r3, #2
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d0f0      	beq.n	80037cc <HAL_RCC_OscConfig+0x234>
 80037ea:	e01b      	b.n	8003824 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037ec:	4b09      	ldr	r3, [pc, #36]	; (8003814 <HAL_RCC_OscConfig+0x27c>)
 80037ee:	2200      	movs	r2, #0
 80037f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037f2:	f7fe fb41 	bl	8001e78 <HAL_GetTick>
 80037f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037f8:	e00e      	b.n	8003818 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037fa:	f7fe fb3d 	bl	8001e78 <HAL_GetTick>
 80037fe:	4602      	mov	r2, r0
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	1ad3      	subs	r3, r2, r3
 8003804:	2b02      	cmp	r3, #2
 8003806:	d907      	bls.n	8003818 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003808:	2303      	movs	r3, #3
 800380a:	e15c      	b.n	8003ac6 <HAL_RCC_OscConfig+0x52e>
 800380c:	40023800 	.word	0x40023800
 8003810:	42470000 	.word	0x42470000
 8003814:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003818:	4b8a      	ldr	r3, [pc, #552]	; (8003a44 <HAL_RCC_OscConfig+0x4ac>)
 800381a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800381c:	f003 0302 	and.w	r3, r3, #2
 8003820:	2b00      	cmp	r3, #0
 8003822:	d1ea      	bne.n	80037fa <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f003 0304 	and.w	r3, r3, #4
 800382c:	2b00      	cmp	r3, #0
 800382e:	f000 8097 	beq.w	8003960 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003832:	2300      	movs	r3, #0
 8003834:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003836:	4b83      	ldr	r3, [pc, #524]	; (8003a44 <HAL_RCC_OscConfig+0x4ac>)
 8003838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800383a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800383e:	2b00      	cmp	r3, #0
 8003840:	d10f      	bne.n	8003862 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003842:	2300      	movs	r3, #0
 8003844:	60bb      	str	r3, [r7, #8]
 8003846:	4b7f      	ldr	r3, [pc, #508]	; (8003a44 <HAL_RCC_OscConfig+0x4ac>)
 8003848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800384a:	4a7e      	ldr	r2, [pc, #504]	; (8003a44 <HAL_RCC_OscConfig+0x4ac>)
 800384c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003850:	6413      	str	r3, [r2, #64]	; 0x40
 8003852:	4b7c      	ldr	r3, [pc, #496]	; (8003a44 <HAL_RCC_OscConfig+0x4ac>)
 8003854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003856:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800385a:	60bb      	str	r3, [r7, #8]
 800385c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800385e:	2301      	movs	r3, #1
 8003860:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003862:	4b79      	ldr	r3, [pc, #484]	; (8003a48 <HAL_RCC_OscConfig+0x4b0>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800386a:	2b00      	cmp	r3, #0
 800386c:	d118      	bne.n	80038a0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800386e:	4b76      	ldr	r3, [pc, #472]	; (8003a48 <HAL_RCC_OscConfig+0x4b0>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a75      	ldr	r2, [pc, #468]	; (8003a48 <HAL_RCC_OscConfig+0x4b0>)
 8003874:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003878:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800387a:	f7fe fafd 	bl	8001e78 <HAL_GetTick>
 800387e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003880:	e008      	b.n	8003894 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003882:	f7fe faf9 	bl	8001e78 <HAL_GetTick>
 8003886:	4602      	mov	r2, r0
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	1ad3      	subs	r3, r2, r3
 800388c:	2b02      	cmp	r3, #2
 800388e:	d901      	bls.n	8003894 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003890:	2303      	movs	r3, #3
 8003892:	e118      	b.n	8003ac6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003894:	4b6c      	ldr	r3, [pc, #432]	; (8003a48 <HAL_RCC_OscConfig+0x4b0>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800389c:	2b00      	cmp	r3, #0
 800389e:	d0f0      	beq.n	8003882 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d106      	bne.n	80038b6 <HAL_RCC_OscConfig+0x31e>
 80038a8:	4b66      	ldr	r3, [pc, #408]	; (8003a44 <HAL_RCC_OscConfig+0x4ac>)
 80038aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038ac:	4a65      	ldr	r2, [pc, #404]	; (8003a44 <HAL_RCC_OscConfig+0x4ac>)
 80038ae:	f043 0301 	orr.w	r3, r3, #1
 80038b2:	6713      	str	r3, [r2, #112]	; 0x70
 80038b4:	e01c      	b.n	80038f0 <HAL_RCC_OscConfig+0x358>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	2b05      	cmp	r3, #5
 80038bc:	d10c      	bne.n	80038d8 <HAL_RCC_OscConfig+0x340>
 80038be:	4b61      	ldr	r3, [pc, #388]	; (8003a44 <HAL_RCC_OscConfig+0x4ac>)
 80038c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038c2:	4a60      	ldr	r2, [pc, #384]	; (8003a44 <HAL_RCC_OscConfig+0x4ac>)
 80038c4:	f043 0304 	orr.w	r3, r3, #4
 80038c8:	6713      	str	r3, [r2, #112]	; 0x70
 80038ca:	4b5e      	ldr	r3, [pc, #376]	; (8003a44 <HAL_RCC_OscConfig+0x4ac>)
 80038cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038ce:	4a5d      	ldr	r2, [pc, #372]	; (8003a44 <HAL_RCC_OscConfig+0x4ac>)
 80038d0:	f043 0301 	orr.w	r3, r3, #1
 80038d4:	6713      	str	r3, [r2, #112]	; 0x70
 80038d6:	e00b      	b.n	80038f0 <HAL_RCC_OscConfig+0x358>
 80038d8:	4b5a      	ldr	r3, [pc, #360]	; (8003a44 <HAL_RCC_OscConfig+0x4ac>)
 80038da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038dc:	4a59      	ldr	r2, [pc, #356]	; (8003a44 <HAL_RCC_OscConfig+0x4ac>)
 80038de:	f023 0301 	bic.w	r3, r3, #1
 80038e2:	6713      	str	r3, [r2, #112]	; 0x70
 80038e4:	4b57      	ldr	r3, [pc, #348]	; (8003a44 <HAL_RCC_OscConfig+0x4ac>)
 80038e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038e8:	4a56      	ldr	r2, [pc, #344]	; (8003a44 <HAL_RCC_OscConfig+0x4ac>)
 80038ea:	f023 0304 	bic.w	r3, r3, #4
 80038ee:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d015      	beq.n	8003924 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038f8:	f7fe fabe 	bl	8001e78 <HAL_GetTick>
 80038fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038fe:	e00a      	b.n	8003916 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003900:	f7fe faba 	bl	8001e78 <HAL_GetTick>
 8003904:	4602      	mov	r2, r0
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	1ad3      	subs	r3, r2, r3
 800390a:	f241 3288 	movw	r2, #5000	; 0x1388
 800390e:	4293      	cmp	r3, r2
 8003910:	d901      	bls.n	8003916 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003912:	2303      	movs	r3, #3
 8003914:	e0d7      	b.n	8003ac6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003916:	4b4b      	ldr	r3, [pc, #300]	; (8003a44 <HAL_RCC_OscConfig+0x4ac>)
 8003918:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800391a:	f003 0302 	and.w	r3, r3, #2
 800391e:	2b00      	cmp	r3, #0
 8003920:	d0ee      	beq.n	8003900 <HAL_RCC_OscConfig+0x368>
 8003922:	e014      	b.n	800394e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003924:	f7fe faa8 	bl	8001e78 <HAL_GetTick>
 8003928:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800392a:	e00a      	b.n	8003942 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800392c:	f7fe faa4 	bl	8001e78 <HAL_GetTick>
 8003930:	4602      	mov	r2, r0
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	1ad3      	subs	r3, r2, r3
 8003936:	f241 3288 	movw	r2, #5000	; 0x1388
 800393a:	4293      	cmp	r3, r2
 800393c:	d901      	bls.n	8003942 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800393e:	2303      	movs	r3, #3
 8003940:	e0c1      	b.n	8003ac6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003942:	4b40      	ldr	r3, [pc, #256]	; (8003a44 <HAL_RCC_OscConfig+0x4ac>)
 8003944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003946:	f003 0302 	and.w	r3, r3, #2
 800394a:	2b00      	cmp	r3, #0
 800394c:	d1ee      	bne.n	800392c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800394e:	7dfb      	ldrb	r3, [r7, #23]
 8003950:	2b01      	cmp	r3, #1
 8003952:	d105      	bne.n	8003960 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003954:	4b3b      	ldr	r3, [pc, #236]	; (8003a44 <HAL_RCC_OscConfig+0x4ac>)
 8003956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003958:	4a3a      	ldr	r2, [pc, #232]	; (8003a44 <HAL_RCC_OscConfig+0x4ac>)
 800395a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800395e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	699b      	ldr	r3, [r3, #24]
 8003964:	2b00      	cmp	r3, #0
 8003966:	f000 80ad 	beq.w	8003ac4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800396a:	4b36      	ldr	r3, [pc, #216]	; (8003a44 <HAL_RCC_OscConfig+0x4ac>)
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	f003 030c 	and.w	r3, r3, #12
 8003972:	2b08      	cmp	r3, #8
 8003974:	d060      	beq.n	8003a38 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	699b      	ldr	r3, [r3, #24]
 800397a:	2b02      	cmp	r3, #2
 800397c:	d145      	bne.n	8003a0a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800397e:	4b33      	ldr	r3, [pc, #204]	; (8003a4c <HAL_RCC_OscConfig+0x4b4>)
 8003980:	2200      	movs	r2, #0
 8003982:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003984:	f7fe fa78 	bl	8001e78 <HAL_GetTick>
 8003988:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800398a:	e008      	b.n	800399e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800398c:	f7fe fa74 	bl	8001e78 <HAL_GetTick>
 8003990:	4602      	mov	r2, r0
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	1ad3      	subs	r3, r2, r3
 8003996:	2b02      	cmp	r3, #2
 8003998:	d901      	bls.n	800399e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800399a:	2303      	movs	r3, #3
 800399c:	e093      	b.n	8003ac6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800399e:	4b29      	ldr	r3, [pc, #164]	; (8003a44 <HAL_RCC_OscConfig+0x4ac>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d1f0      	bne.n	800398c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	69da      	ldr	r2, [r3, #28]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6a1b      	ldr	r3, [r3, #32]
 80039b2:	431a      	orrs	r2, r3
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b8:	019b      	lsls	r3, r3, #6
 80039ba:	431a      	orrs	r2, r3
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039c0:	085b      	lsrs	r3, r3, #1
 80039c2:	3b01      	subs	r3, #1
 80039c4:	041b      	lsls	r3, r3, #16
 80039c6:	431a      	orrs	r2, r3
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039cc:	061b      	lsls	r3, r3, #24
 80039ce:	431a      	orrs	r2, r3
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039d4:	071b      	lsls	r3, r3, #28
 80039d6:	491b      	ldr	r1, [pc, #108]	; (8003a44 <HAL_RCC_OscConfig+0x4ac>)
 80039d8:	4313      	orrs	r3, r2
 80039da:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039dc:	4b1b      	ldr	r3, [pc, #108]	; (8003a4c <HAL_RCC_OscConfig+0x4b4>)
 80039de:	2201      	movs	r2, #1
 80039e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039e2:	f7fe fa49 	bl	8001e78 <HAL_GetTick>
 80039e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039e8:	e008      	b.n	80039fc <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039ea:	f7fe fa45 	bl	8001e78 <HAL_GetTick>
 80039ee:	4602      	mov	r2, r0
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	1ad3      	subs	r3, r2, r3
 80039f4:	2b02      	cmp	r3, #2
 80039f6:	d901      	bls.n	80039fc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80039f8:	2303      	movs	r3, #3
 80039fa:	e064      	b.n	8003ac6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039fc:	4b11      	ldr	r3, [pc, #68]	; (8003a44 <HAL_RCC_OscConfig+0x4ac>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d0f0      	beq.n	80039ea <HAL_RCC_OscConfig+0x452>
 8003a08:	e05c      	b.n	8003ac4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a0a:	4b10      	ldr	r3, [pc, #64]	; (8003a4c <HAL_RCC_OscConfig+0x4b4>)
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a10:	f7fe fa32 	bl	8001e78 <HAL_GetTick>
 8003a14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a16:	e008      	b.n	8003a2a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a18:	f7fe fa2e 	bl	8001e78 <HAL_GetTick>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	1ad3      	subs	r3, r2, r3
 8003a22:	2b02      	cmp	r3, #2
 8003a24:	d901      	bls.n	8003a2a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003a26:	2303      	movs	r3, #3
 8003a28:	e04d      	b.n	8003ac6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a2a:	4b06      	ldr	r3, [pc, #24]	; (8003a44 <HAL_RCC_OscConfig+0x4ac>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d1f0      	bne.n	8003a18 <HAL_RCC_OscConfig+0x480>
 8003a36:	e045      	b.n	8003ac4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	699b      	ldr	r3, [r3, #24]
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	d107      	bne.n	8003a50 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	e040      	b.n	8003ac6 <HAL_RCC_OscConfig+0x52e>
 8003a44:	40023800 	.word	0x40023800
 8003a48:	40007000 	.word	0x40007000
 8003a4c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003a50:	4b1f      	ldr	r3, [pc, #124]	; (8003ad0 <HAL_RCC_OscConfig+0x538>)
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	699b      	ldr	r3, [r3, #24]
 8003a5a:	2b01      	cmp	r3, #1
 8003a5c:	d030      	beq.n	8003ac0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d129      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a76:	429a      	cmp	r2, r3
 8003a78:	d122      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a7a:	68fa      	ldr	r2, [r7, #12]
 8003a7c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003a80:	4013      	ands	r3, r2
 8003a82:	687a      	ldr	r2, [r7, #4]
 8003a84:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003a86:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d119      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a96:	085b      	lsrs	r3, r3, #1
 8003a98:	3b01      	subs	r3, #1
 8003a9a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	d10f      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aaa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003aac:	429a      	cmp	r2, r3
 8003aae:	d107      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aba:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003abc:	429a      	cmp	r2, r3
 8003abe:	d001      	beq.n	8003ac4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	e000      	b.n	8003ac6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003ac4:	2300      	movs	r3, #0
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3718      	adds	r7, #24
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	bf00      	nop
 8003ad0:	40023800 	.word	0x40023800

08003ad4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b082      	sub	sp, #8
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d101      	bne.n	8003ae6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e07b      	b.n	8003bde <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d108      	bne.n	8003b00 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003af6:	d009      	beq.n	8003b0c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2200      	movs	r2, #0
 8003afc:	61da      	str	r2, [r3, #28]
 8003afe:	e005      	b.n	8003b0c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2200      	movs	r2, #0
 8003b04:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d106      	bne.n	8003b2c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2200      	movs	r2, #0
 8003b22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003b26:	6878      	ldr	r0, [r7, #4]
 8003b28:	f7fd fe84 	bl	8001834 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2202      	movs	r2, #2
 8003b30:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b42:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003b54:	431a      	orrs	r2, r3
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	68db      	ldr	r3, [r3, #12]
 8003b5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b5e:	431a      	orrs	r2, r3
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	691b      	ldr	r3, [r3, #16]
 8003b64:	f003 0302 	and.w	r3, r3, #2
 8003b68:	431a      	orrs	r2, r3
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	695b      	ldr	r3, [r3, #20]
 8003b6e:	f003 0301 	and.w	r3, r3, #1
 8003b72:	431a      	orrs	r2, r3
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	699b      	ldr	r3, [r3, #24]
 8003b78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b7c:	431a      	orrs	r2, r3
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	69db      	ldr	r3, [r3, #28]
 8003b82:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003b86:	431a      	orrs	r2, r3
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6a1b      	ldr	r3, [r3, #32]
 8003b8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b90:	ea42 0103 	orr.w	r1, r2, r3
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b98:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	430a      	orrs	r2, r1
 8003ba2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	699b      	ldr	r3, [r3, #24]
 8003ba8:	0c1b      	lsrs	r3, r3, #16
 8003baa:	f003 0104 	and.w	r1, r3, #4
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb2:	f003 0210 	and.w	r2, r3, #16
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	430a      	orrs	r2, r1
 8003bbc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	69da      	ldr	r2, [r3, #28]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003bcc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003bdc:	2300      	movs	r3, #0
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	3708      	adds	r7, #8
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}

08003be6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003be6:	b580      	push	{r7, lr}
 8003be8:	b088      	sub	sp, #32
 8003bea:	af00      	add	r7, sp, #0
 8003bec:	60f8      	str	r0, [r7, #12]
 8003bee:	60b9      	str	r1, [r7, #8]
 8003bf0:	603b      	str	r3, [r7, #0]
 8003bf2:	4613      	mov	r3, r2
 8003bf4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d101      	bne.n	8003c08 <HAL_SPI_Transmit+0x22>
 8003c04:	2302      	movs	r3, #2
 8003c06:	e126      	b.n	8003e56 <HAL_SPI_Transmit+0x270>
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003c10:	f7fe f932 	bl	8001e78 <HAL_GetTick>
 8003c14:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003c16:	88fb      	ldrh	r3, [r7, #6]
 8003c18:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d002      	beq.n	8003c2c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003c26:	2302      	movs	r3, #2
 8003c28:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003c2a:	e10b      	b.n	8003e44 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d002      	beq.n	8003c38 <HAL_SPI_Transmit+0x52>
 8003c32:	88fb      	ldrh	r3, [r7, #6]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d102      	bne.n	8003c3e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003c3c:	e102      	b.n	8003e44 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2203      	movs	r2, #3
 8003c42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	68ba      	ldr	r2, [r7, #8]
 8003c50:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	88fa      	ldrh	r2, [r7, #6]
 8003c56:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	88fa      	ldrh	r2, [r7, #6]
 8003c5c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	2200      	movs	r2, #0
 8003c62:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2200      	movs	r2, #0
 8003c68:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2200      	movs	r2, #0
 8003c74:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c84:	d10f      	bne.n	8003ca6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c94:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	681a      	ldr	r2, [r3, #0]
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ca4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cb0:	2b40      	cmp	r3, #64	; 0x40
 8003cb2:	d007      	beq.n	8003cc4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003cc2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	68db      	ldr	r3, [r3, #12]
 8003cc8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ccc:	d14b      	bne.n	8003d66 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d002      	beq.n	8003cdc <HAL_SPI_Transmit+0xf6>
 8003cd6:	8afb      	ldrh	r3, [r7, #22]
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	d13e      	bne.n	8003d5a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce0:	881a      	ldrh	r2, [r3, #0]
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cec:	1c9a      	adds	r2, r3, #2
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cf6:	b29b      	uxth	r3, r3
 8003cf8:	3b01      	subs	r3, #1
 8003cfa:	b29a      	uxth	r2, r3
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003d00:	e02b      	b.n	8003d5a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	f003 0302 	and.w	r3, r3, #2
 8003d0c:	2b02      	cmp	r3, #2
 8003d0e:	d112      	bne.n	8003d36 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d14:	881a      	ldrh	r2, [r3, #0]
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d20:	1c9a      	adds	r2, r3, #2
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d2a:	b29b      	uxth	r3, r3
 8003d2c:	3b01      	subs	r3, #1
 8003d2e:	b29a      	uxth	r2, r3
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	86da      	strh	r2, [r3, #54]	; 0x36
 8003d34:	e011      	b.n	8003d5a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d36:	f7fe f89f 	bl	8001e78 <HAL_GetTick>
 8003d3a:	4602      	mov	r2, r0
 8003d3c:	69bb      	ldr	r3, [r7, #24]
 8003d3e:	1ad3      	subs	r3, r2, r3
 8003d40:	683a      	ldr	r2, [r7, #0]
 8003d42:	429a      	cmp	r2, r3
 8003d44:	d803      	bhi.n	8003d4e <HAL_SPI_Transmit+0x168>
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d4c:	d102      	bne.n	8003d54 <HAL_SPI_Transmit+0x16e>
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d102      	bne.n	8003d5a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003d54:	2303      	movs	r3, #3
 8003d56:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003d58:	e074      	b.n	8003e44 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d5e:	b29b      	uxth	r3, r3
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d1ce      	bne.n	8003d02 <HAL_SPI_Transmit+0x11c>
 8003d64:	e04c      	b.n	8003e00 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d002      	beq.n	8003d74 <HAL_SPI_Transmit+0x18e>
 8003d6e:	8afb      	ldrh	r3, [r7, #22]
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d140      	bne.n	8003df6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	330c      	adds	r3, #12
 8003d7e:	7812      	ldrb	r2, [r2, #0]
 8003d80:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d86:	1c5a      	adds	r2, r3, #1
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d90:	b29b      	uxth	r3, r3
 8003d92:	3b01      	subs	r3, #1
 8003d94:	b29a      	uxth	r2, r3
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003d9a:	e02c      	b.n	8003df6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	f003 0302 	and.w	r3, r3, #2
 8003da6:	2b02      	cmp	r3, #2
 8003da8:	d113      	bne.n	8003dd2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	330c      	adds	r3, #12
 8003db4:	7812      	ldrb	r2, [r2, #0]
 8003db6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dbc:	1c5a      	adds	r2, r3, #1
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003dc6:	b29b      	uxth	r3, r3
 8003dc8:	3b01      	subs	r3, #1
 8003dca:	b29a      	uxth	r2, r3
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	86da      	strh	r2, [r3, #54]	; 0x36
 8003dd0:	e011      	b.n	8003df6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003dd2:	f7fe f851 	bl	8001e78 <HAL_GetTick>
 8003dd6:	4602      	mov	r2, r0
 8003dd8:	69bb      	ldr	r3, [r7, #24]
 8003dda:	1ad3      	subs	r3, r2, r3
 8003ddc:	683a      	ldr	r2, [r7, #0]
 8003dde:	429a      	cmp	r2, r3
 8003de0:	d803      	bhi.n	8003dea <HAL_SPI_Transmit+0x204>
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003de8:	d102      	bne.n	8003df0 <HAL_SPI_Transmit+0x20a>
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d102      	bne.n	8003df6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003df0:	2303      	movs	r3, #3
 8003df2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003df4:	e026      	b.n	8003e44 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003dfa:	b29b      	uxth	r3, r3
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d1cd      	bne.n	8003d9c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003e00:	69ba      	ldr	r2, [r7, #24]
 8003e02:	6839      	ldr	r1, [r7, #0]
 8003e04:	68f8      	ldr	r0, [r7, #12]
 8003e06:	f000 fa55 	bl	80042b4 <SPI_EndRxTxTransaction>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d002      	beq.n	8003e16 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2220      	movs	r2, #32
 8003e14:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d10a      	bne.n	8003e34 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003e1e:	2300      	movs	r3, #0
 8003e20:	613b      	str	r3, [r7, #16]
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	68db      	ldr	r3, [r3, #12]
 8003e28:	613b      	str	r3, [r7, #16]
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	613b      	str	r3, [r7, #16]
 8003e32:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d002      	beq.n	8003e42 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	77fb      	strb	r3, [r7, #31]
 8003e40:	e000      	b.n	8003e44 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003e42:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2201      	movs	r2, #1
 8003e48:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003e54:	7ffb      	ldrb	r3, [r7, #31]
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	3720      	adds	r7, #32
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}

08003e5e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003e5e:	b580      	push	{r7, lr}
 8003e60:	b08c      	sub	sp, #48	; 0x30
 8003e62:	af00      	add	r7, sp, #0
 8003e64:	60f8      	str	r0, [r7, #12]
 8003e66:	60b9      	str	r1, [r7, #8]
 8003e68:	607a      	str	r2, [r7, #4]
 8003e6a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003e70:	2300      	movs	r3, #0
 8003e72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003e7c:	2b01      	cmp	r3, #1
 8003e7e:	d101      	bne.n	8003e84 <HAL_SPI_TransmitReceive+0x26>
 8003e80:	2302      	movs	r3, #2
 8003e82:	e18a      	b.n	800419a <HAL_SPI_TransmitReceive+0x33c>
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2201      	movs	r2, #1
 8003e88:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003e8c:	f7fd fff4 	bl	8001e78 <HAL_GetTick>
 8003e90:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e98:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003ea2:	887b      	ldrh	r3, [r7, #2]
 8003ea4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003ea6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003eaa:	2b01      	cmp	r3, #1
 8003eac:	d00f      	beq.n	8003ece <HAL_SPI_TransmitReceive+0x70>
 8003eae:	69fb      	ldr	r3, [r7, #28]
 8003eb0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003eb4:	d107      	bne.n	8003ec6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d103      	bne.n	8003ec6 <HAL_SPI_TransmitReceive+0x68>
 8003ebe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003ec2:	2b04      	cmp	r3, #4
 8003ec4:	d003      	beq.n	8003ece <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003ec6:	2302      	movs	r3, #2
 8003ec8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003ecc:	e15b      	b.n	8004186 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d005      	beq.n	8003ee0 <HAL_SPI_TransmitReceive+0x82>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d002      	beq.n	8003ee0 <HAL_SPI_TransmitReceive+0x82>
 8003eda:	887b      	ldrh	r3, [r7, #2]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d103      	bne.n	8003ee8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003ee6:	e14e      	b.n	8004186 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003eee:	b2db      	uxtb	r3, r3
 8003ef0:	2b04      	cmp	r3, #4
 8003ef2:	d003      	beq.n	8003efc <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2205      	movs	r2, #5
 8003ef8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2200      	movs	r2, #0
 8003f00:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	687a      	ldr	r2, [r7, #4]
 8003f06:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	887a      	ldrh	r2, [r7, #2]
 8003f0c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	887a      	ldrh	r2, [r7, #2]
 8003f12:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	68ba      	ldr	r2, [r7, #8]
 8003f18:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	887a      	ldrh	r2, [r7, #2]
 8003f1e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	887a      	ldrh	r2, [r7, #2]
 8003f24:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f3c:	2b40      	cmp	r3, #64	; 0x40
 8003f3e:	d007      	beq.n	8003f50 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f4e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	68db      	ldr	r3, [r3, #12]
 8003f54:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f58:	d178      	bne.n	800404c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d002      	beq.n	8003f68 <HAL_SPI_TransmitReceive+0x10a>
 8003f62:	8b7b      	ldrh	r3, [r7, #26]
 8003f64:	2b01      	cmp	r3, #1
 8003f66:	d166      	bne.n	8004036 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f6c:	881a      	ldrh	r2, [r3, #0]
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f78:	1c9a      	adds	r2, r3, #2
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f82:	b29b      	uxth	r3, r3
 8003f84:	3b01      	subs	r3, #1
 8003f86:	b29a      	uxth	r2, r3
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f8c:	e053      	b.n	8004036 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	f003 0302 	and.w	r3, r3, #2
 8003f98:	2b02      	cmp	r3, #2
 8003f9a:	d11b      	bne.n	8003fd4 <HAL_SPI_TransmitReceive+0x176>
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fa0:	b29b      	uxth	r3, r3
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d016      	beq.n	8003fd4 <HAL_SPI_TransmitReceive+0x176>
 8003fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fa8:	2b01      	cmp	r3, #1
 8003faa:	d113      	bne.n	8003fd4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fb0:	881a      	ldrh	r2, [r3, #0]
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fbc:	1c9a      	adds	r2, r3, #2
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fc6:	b29b      	uxth	r3, r3
 8003fc8:	3b01      	subs	r3, #1
 8003fca:	b29a      	uxth	r2, r3
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	689b      	ldr	r3, [r3, #8]
 8003fda:	f003 0301 	and.w	r3, r3, #1
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	d119      	bne.n	8004016 <HAL_SPI_TransmitReceive+0x1b8>
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fe6:	b29b      	uxth	r3, r3
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d014      	beq.n	8004016 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	68da      	ldr	r2, [r3, #12]
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ff6:	b292      	uxth	r2, r2
 8003ff8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ffe:	1c9a      	adds	r2, r3, #2
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004008:	b29b      	uxth	r3, r3
 800400a:	3b01      	subs	r3, #1
 800400c:	b29a      	uxth	r2, r3
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004012:	2301      	movs	r3, #1
 8004014:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004016:	f7fd ff2f 	bl	8001e78 <HAL_GetTick>
 800401a:	4602      	mov	r2, r0
 800401c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800401e:	1ad3      	subs	r3, r2, r3
 8004020:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004022:	429a      	cmp	r2, r3
 8004024:	d807      	bhi.n	8004036 <HAL_SPI_TransmitReceive+0x1d8>
 8004026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004028:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800402c:	d003      	beq.n	8004036 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800402e:	2303      	movs	r3, #3
 8004030:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004034:	e0a7      	b.n	8004186 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800403a:	b29b      	uxth	r3, r3
 800403c:	2b00      	cmp	r3, #0
 800403e:	d1a6      	bne.n	8003f8e <HAL_SPI_TransmitReceive+0x130>
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004044:	b29b      	uxth	r3, r3
 8004046:	2b00      	cmp	r3, #0
 8004048:	d1a1      	bne.n	8003f8e <HAL_SPI_TransmitReceive+0x130>
 800404a:	e07c      	b.n	8004146 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d002      	beq.n	800405a <HAL_SPI_TransmitReceive+0x1fc>
 8004054:	8b7b      	ldrh	r3, [r7, #26]
 8004056:	2b01      	cmp	r3, #1
 8004058:	d16b      	bne.n	8004132 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	330c      	adds	r3, #12
 8004064:	7812      	ldrb	r2, [r2, #0]
 8004066:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800406c:	1c5a      	adds	r2, r3, #1
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004076:	b29b      	uxth	r3, r3
 8004078:	3b01      	subs	r3, #1
 800407a:	b29a      	uxth	r2, r3
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004080:	e057      	b.n	8004132 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	f003 0302 	and.w	r3, r3, #2
 800408c:	2b02      	cmp	r3, #2
 800408e:	d11c      	bne.n	80040ca <HAL_SPI_TransmitReceive+0x26c>
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004094:	b29b      	uxth	r3, r3
 8004096:	2b00      	cmp	r3, #0
 8004098:	d017      	beq.n	80040ca <HAL_SPI_TransmitReceive+0x26c>
 800409a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800409c:	2b01      	cmp	r3, #1
 800409e:	d114      	bne.n	80040ca <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	330c      	adds	r3, #12
 80040aa:	7812      	ldrb	r2, [r2, #0]
 80040ac:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040b2:	1c5a      	adds	r2, r3, #1
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040bc:	b29b      	uxth	r3, r3
 80040be:	3b01      	subs	r3, #1
 80040c0:	b29a      	uxth	r2, r3
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80040c6:	2300      	movs	r3, #0
 80040c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	f003 0301 	and.w	r3, r3, #1
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	d119      	bne.n	800410c <HAL_SPI_TransmitReceive+0x2ae>
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040dc:	b29b      	uxth	r3, r3
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d014      	beq.n	800410c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	68da      	ldr	r2, [r3, #12]
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ec:	b2d2      	uxtb	r2, r2
 80040ee:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040f4:	1c5a      	adds	r2, r3, #1
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040fe:	b29b      	uxth	r3, r3
 8004100:	3b01      	subs	r3, #1
 8004102:	b29a      	uxth	r2, r3
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004108:	2301      	movs	r3, #1
 800410a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800410c:	f7fd feb4 	bl	8001e78 <HAL_GetTick>
 8004110:	4602      	mov	r2, r0
 8004112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004114:	1ad3      	subs	r3, r2, r3
 8004116:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004118:	429a      	cmp	r2, r3
 800411a:	d803      	bhi.n	8004124 <HAL_SPI_TransmitReceive+0x2c6>
 800411c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800411e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004122:	d102      	bne.n	800412a <HAL_SPI_TransmitReceive+0x2cc>
 8004124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004126:	2b00      	cmp	r3, #0
 8004128:	d103      	bne.n	8004132 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800412a:	2303      	movs	r3, #3
 800412c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004130:	e029      	b.n	8004186 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004136:	b29b      	uxth	r3, r3
 8004138:	2b00      	cmp	r3, #0
 800413a:	d1a2      	bne.n	8004082 <HAL_SPI_TransmitReceive+0x224>
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004140:	b29b      	uxth	r3, r3
 8004142:	2b00      	cmp	r3, #0
 8004144:	d19d      	bne.n	8004082 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004146:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004148:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800414a:	68f8      	ldr	r0, [r7, #12]
 800414c:	f000 f8b2 	bl	80042b4 <SPI_EndRxTxTransaction>
 8004150:	4603      	mov	r3, r0
 8004152:	2b00      	cmp	r3, #0
 8004154:	d006      	beq.n	8004164 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2220      	movs	r2, #32
 8004160:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004162:	e010      	b.n	8004186 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d10b      	bne.n	8004184 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800416c:	2300      	movs	r3, #0
 800416e:	617b      	str	r3, [r7, #20]
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	68db      	ldr	r3, [r3, #12]
 8004176:	617b      	str	r3, [r7, #20]
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	617b      	str	r3, [r7, #20]
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	e000      	b.n	8004186 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004184:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	2201      	movs	r2, #1
 800418a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2200      	movs	r2, #0
 8004192:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004196:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800419a:	4618      	mov	r0, r3
 800419c:	3730      	adds	r7, #48	; 0x30
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}
	...

080041a4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b088      	sub	sp, #32
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	60f8      	str	r0, [r7, #12]
 80041ac:	60b9      	str	r1, [r7, #8]
 80041ae:	603b      	str	r3, [r7, #0]
 80041b0:	4613      	mov	r3, r2
 80041b2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80041b4:	f7fd fe60 	bl	8001e78 <HAL_GetTick>
 80041b8:	4602      	mov	r2, r0
 80041ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041bc:	1a9b      	subs	r3, r3, r2
 80041be:	683a      	ldr	r2, [r7, #0]
 80041c0:	4413      	add	r3, r2
 80041c2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80041c4:	f7fd fe58 	bl	8001e78 <HAL_GetTick>
 80041c8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80041ca:	4b39      	ldr	r3, [pc, #228]	; (80042b0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	015b      	lsls	r3, r3, #5
 80041d0:	0d1b      	lsrs	r3, r3, #20
 80041d2:	69fa      	ldr	r2, [r7, #28]
 80041d4:	fb02 f303 	mul.w	r3, r2, r3
 80041d8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80041da:	e054      	b.n	8004286 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80041e2:	d050      	beq.n	8004286 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80041e4:	f7fd fe48 	bl	8001e78 <HAL_GetTick>
 80041e8:	4602      	mov	r2, r0
 80041ea:	69bb      	ldr	r3, [r7, #24]
 80041ec:	1ad3      	subs	r3, r2, r3
 80041ee:	69fa      	ldr	r2, [r7, #28]
 80041f0:	429a      	cmp	r2, r3
 80041f2:	d902      	bls.n	80041fa <SPI_WaitFlagStateUntilTimeout+0x56>
 80041f4:	69fb      	ldr	r3, [r7, #28]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d13d      	bne.n	8004276 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	685a      	ldr	r2, [r3, #4]
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004208:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004212:	d111      	bne.n	8004238 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800421c:	d004      	beq.n	8004228 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004226:	d107      	bne.n	8004238 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004236:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800423c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004240:	d10f      	bne.n	8004262 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	681a      	ldr	r2, [r3, #0]
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004250:	601a      	str	r2, [r3, #0]
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	681a      	ldr	r2, [r3, #0]
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004260:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2201      	movs	r2, #1
 8004266:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2200      	movs	r2, #0
 800426e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004272:	2303      	movs	r3, #3
 8004274:	e017      	b.n	80042a6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d101      	bne.n	8004280 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800427c:	2300      	movs	r3, #0
 800427e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	3b01      	subs	r3, #1
 8004284:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	689a      	ldr	r2, [r3, #8]
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	4013      	ands	r3, r2
 8004290:	68ba      	ldr	r2, [r7, #8]
 8004292:	429a      	cmp	r2, r3
 8004294:	bf0c      	ite	eq
 8004296:	2301      	moveq	r3, #1
 8004298:	2300      	movne	r3, #0
 800429a:	b2db      	uxtb	r3, r3
 800429c:	461a      	mov	r2, r3
 800429e:	79fb      	ldrb	r3, [r7, #7]
 80042a0:	429a      	cmp	r2, r3
 80042a2:	d19b      	bne.n	80041dc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80042a4:	2300      	movs	r3, #0
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	3720      	adds	r7, #32
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}
 80042ae:	bf00      	nop
 80042b0:	20000000 	.word	0x20000000

080042b4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b088      	sub	sp, #32
 80042b8:	af02      	add	r7, sp, #8
 80042ba:	60f8      	str	r0, [r7, #12]
 80042bc:	60b9      	str	r1, [r7, #8]
 80042be:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80042c0:	4b1b      	ldr	r3, [pc, #108]	; (8004330 <SPI_EndRxTxTransaction+0x7c>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a1b      	ldr	r2, [pc, #108]	; (8004334 <SPI_EndRxTxTransaction+0x80>)
 80042c6:	fba2 2303 	umull	r2, r3, r2, r3
 80042ca:	0d5b      	lsrs	r3, r3, #21
 80042cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80042d0:	fb02 f303 	mul.w	r3, r2, r3
 80042d4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042de:	d112      	bne.n	8004306 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	9300      	str	r3, [sp, #0]
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	2200      	movs	r2, #0
 80042e8:	2180      	movs	r1, #128	; 0x80
 80042ea:	68f8      	ldr	r0, [r7, #12]
 80042ec:	f7ff ff5a 	bl	80041a4 <SPI_WaitFlagStateUntilTimeout>
 80042f0:	4603      	mov	r3, r0
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d016      	beq.n	8004324 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042fa:	f043 0220 	orr.w	r2, r3, #32
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004302:	2303      	movs	r3, #3
 8004304:	e00f      	b.n	8004326 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d00a      	beq.n	8004322 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	3b01      	subs	r3, #1
 8004310:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	689b      	ldr	r3, [r3, #8]
 8004318:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800431c:	2b80      	cmp	r3, #128	; 0x80
 800431e:	d0f2      	beq.n	8004306 <SPI_EndRxTxTransaction+0x52>
 8004320:	e000      	b.n	8004324 <SPI_EndRxTxTransaction+0x70>
        break;
 8004322:	bf00      	nop
  }

  return HAL_OK;
 8004324:	2300      	movs	r3, #0
}
 8004326:	4618      	mov	r0, r3
 8004328:	3718      	adds	r7, #24
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}
 800432e:	bf00      	nop
 8004330:	20000000 	.word	0x20000000
 8004334:	165e9f81 	.word	0x165e9f81

08004338 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b082      	sub	sp, #8
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d101      	bne.n	800434a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004346:	2301      	movs	r3, #1
 8004348:	e041      	b.n	80043ce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004350:	b2db      	uxtb	r3, r3
 8004352:	2b00      	cmp	r3, #0
 8004354:	d106      	bne.n	8004364 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2200      	movs	r2, #0
 800435a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	f7fd fc40 	bl	8001be4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2202      	movs	r2, #2
 8004368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681a      	ldr	r2, [r3, #0]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	3304      	adds	r3, #4
 8004374:	4619      	mov	r1, r3
 8004376:	4610      	mov	r0, r2
 8004378:	f000 fa96 	bl	80048a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2201      	movs	r2, #1
 8004380:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2201      	movs	r2, #1
 8004388:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2201      	movs	r2, #1
 8004390:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2201      	movs	r2, #1
 8004398:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2201      	movs	r2, #1
 80043a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2201      	movs	r2, #1
 80043a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2201      	movs	r2, #1
 80043b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2201      	movs	r2, #1
 80043b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2201      	movs	r2, #1
 80043c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2201      	movs	r2, #1
 80043c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80043cc:	2300      	movs	r3, #0
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	3708      	adds	r7, #8
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}
	...

080043d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80043d8:	b480      	push	{r7}
 80043da:	b085      	sub	sp, #20
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043e6:	b2db      	uxtb	r3, r3
 80043e8:	2b01      	cmp	r3, #1
 80043ea:	d001      	beq.n	80043f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80043ec:	2301      	movs	r3, #1
 80043ee:	e04e      	b.n	800448e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2202      	movs	r2, #2
 80043f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	68da      	ldr	r2, [r3, #12]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f042 0201 	orr.w	r2, r2, #1
 8004406:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a23      	ldr	r2, [pc, #140]	; (800449c <HAL_TIM_Base_Start_IT+0xc4>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d022      	beq.n	8004458 <HAL_TIM_Base_Start_IT+0x80>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800441a:	d01d      	beq.n	8004458 <HAL_TIM_Base_Start_IT+0x80>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a1f      	ldr	r2, [pc, #124]	; (80044a0 <HAL_TIM_Base_Start_IT+0xc8>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d018      	beq.n	8004458 <HAL_TIM_Base_Start_IT+0x80>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a1e      	ldr	r2, [pc, #120]	; (80044a4 <HAL_TIM_Base_Start_IT+0xcc>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d013      	beq.n	8004458 <HAL_TIM_Base_Start_IT+0x80>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a1c      	ldr	r2, [pc, #112]	; (80044a8 <HAL_TIM_Base_Start_IT+0xd0>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d00e      	beq.n	8004458 <HAL_TIM_Base_Start_IT+0x80>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a1b      	ldr	r2, [pc, #108]	; (80044ac <HAL_TIM_Base_Start_IT+0xd4>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d009      	beq.n	8004458 <HAL_TIM_Base_Start_IT+0x80>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a19      	ldr	r2, [pc, #100]	; (80044b0 <HAL_TIM_Base_Start_IT+0xd8>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d004      	beq.n	8004458 <HAL_TIM_Base_Start_IT+0x80>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a18      	ldr	r2, [pc, #96]	; (80044b4 <HAL_TIM_Base_Start_IT+0xdc>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d111      	bne.n	800447c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	689b      	ldr	r3, [r3, #8]
 800445e:	f003 0307 	and.w	r3, r3, #7
 8004462:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2b06      	cmp	r3, #6
 8004468:	d010      	beq.n	800448c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f042 0201 	orr.w	r2, r2, #1
 8004478:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800447a:	e007      	b.n	800448c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	681a      	ldr	r2, [r3, #0]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f042 0201 	orr.w	r2, r2, #1
 800448a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800448c:	2300      	movs	r3, #0
}
 800448e:	4618      	mov	r0, r3
 8004490:	3714      	adds	r7, #20
 8004492:	46bd      	mov	sp, r7
 8004494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004498:	4770      	bx	lr
 800449a:	bf00      	nop
 800449c:	40010000 	.word	0x40010000
 80044a0:	40000400 	.word	0x40000400
 80044a4:	40000800 	.word	0x40000800
 80044a8:	40000c00 	.word	0x40000c00
 80044ac:	40010400 	.word	0x40010400
 80044b0:	40014000 	.word	0x40014000
 80044b4:	40001800 	.word	0x40001800

080044b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b082      	sub	sp, #8
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	691b      	ldr	r3, [r3, #16]
 80044c6:	f003 0302 	and.w	r3, r3, #2
 80044ca:	2b02      	cmp	r3, #2
 80044cc:	d122      	bne.n	8004514 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	68db      	ldr	r3, [r3, #12]
 80044d4:	f003 0302 	and.w	r3, r3, #2
 80044d8:	2b02      	cmp	r3, #2
 80044da:	d11b      	bne.n	8004514 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f06f 0202 	mvn.w	r2, #2
 80044e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2201      	movs	r2, #1
 80044ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	699b      	ldr	r3, [r3, #24]
 80044f2:	f003 0303 	and.w	r3, r3, #3
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d003      	beq.n	8004502 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80044fa:	6878      	ldr	r0, [r7, #4]
 80044fc:	f000 f9b5 	bl	800486a <HAL_TIM_IC_CaptureCallback>
 8004500:	e005      	b.n	800450e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	f000 f9a7 	bl	8004856 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004508:	6878      	ldr	r0, [r7, #4]
 800450a:	f000 f9b8 	bl	800487e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2200      	movs	r2, #0
 8004512:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	691b      	ldr	r3, [r3, #16]
 800451a:	f003 0304 	and.w	r3, r3, #4
 800451e:	2b04      	cmp	r3, #4
 8004520:	d122      	bne.n	8004568 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	68db      	ldr	r3, [r3, #12]
 8004528:	f003 0304 	and.w	r3, r3, #4
 800452c:	2b04      	cmp	r3, #4
 800452e:	d11b      	bne.n	8004568 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f06f 0204 	mvn.w	r2, #4
 8004538:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2202      	movs	r2, #2
 800453e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	699b      	ldr	r3, [r3, #24]
 8004546:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800454a:	2b00      	cmp	r3, #0
 800454c:	d003      	beq.n	8004556 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	f000 f98b 	bl	800486a <HAL_TIM_IC_CaptureCallback>
 8004554:	e005      	b.n	8004562 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f000 f97d 	bl	8004856 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800455c:	6878      	ldr	r0, [r7, #4]
 800455e:	f000 f98e 	bl	800487e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2200      	movs	r2, #0
 8004566:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	691b      	ldr	r3, [r3, #16]
 800456e:	f003 0308 	and.w	r3, r3, #8
 8004572:	2b08      	cmp	r3, #8
 8004574:	d122      	bne.n	80045bc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	68db      	ldr	r3, [r3, #12]
 800457c:	f003 0308 	and.w	r3, r3, #8
 8004580:	2b08      	cmp	r3, #8
 8004582:	d11b      	bne.n	80045bc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f06f 0208 	mvn.w	r2, #8
 800458c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2204      	movs	r2, #4
 8004592:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	69db      	ldr	r3, [r3, #28]
 800459a:	f003 0303 	and.w	r3, r3, #3
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d003      	beq.n	80045aa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f000 f961 	bl	800486a <HAL_TIM_IC_CaptureCallback>
 80045a8:	e005      	b.n	80045b6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f000 f953 	bl	8004856 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045b0:	6878      	ldr	r0, [r7, #4]
 80045b2:	f000 f964 	bl	800487e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2200      	movs	r2, #0
 80045ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	691b      	ldr	r3, [r3, #16]
 80045c2:	f003 0310 	and.w	r3, r3, #16
 80045c6:	2b10      	cmp	r3, #16
 80045c8:	d122      	bne.n	8004610 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	68db      	ldr	r3, [r3, #12]
 80045d0:	f003 0310 	and.w	r3, r3, #16
 80045d4:	2b10      	cmp	r3, #16
 80045d6:	d11b      	bne.n	8004610 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f06f 0210 	mvn.w	r2, #16
 80045e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2208      	movs	r2, #8
 80045e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	69db      	ldr	r3, [r3, #28]
 80045ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d003      	beq.n	80045fe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f000 f937 	bl	800486a <HAL_TIM_IC_CaptureCallback>
 80045fc:	e005      	b.n	800460a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f000 f929 	bl	8004856 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004604:	6878      	ldr	r0, [r7, #4]
 8004606:	f000 f93a 	bl	800487e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2200      	movs	r2, #0
 800460e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	691b      	ldr	r3, [r3, #16]
 8004616:	f003 0301 	and.w	r3, r3, #1
 800461a:	2b01      	cmp	r3, #1
 800461c:	d10e      	bne.n	800463c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	68db      	ldr	r3, [r3, #12]
 8004624:	f003 0301 	and.w	r3, r3, #1
 8004628:	2b01      	cmp	r3, #1
 800462a:	d107      	bne.n	800463c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f06f 0201 	mvn.w	r2, #1
 8004634:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	f7fc fdc6 	bl	80011c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	691b      	ldr	r3, [r3, #16]
 8004642:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004646:	2b80      	cmp	r3, #128	; 0x80
 8004648:	d10e      	bne.n	8004668 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	68db      	ldr	r3, [r3, #12]
 8004650:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004654:	2b80      	cmp	r3, #128	; 0x80
 8004656:	d107      	bne.n	8004668 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004660:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	f000 fae0 	bl	8004c28 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	691b      	ldr	r3, [r3, #16]
 800466e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004672:	2b40      	cmp	r3, #64	; 0x40
 8004674:	d10e      	bne.n	8004694 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	68db      	ldr	r3, [r3, #12]
 800467c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004680:	2b40      	cmp	r3, #64	; 0x40
 8004682:	d107      	bne.n	8004694 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800468c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f000 f8ff 	bl	8004892 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	691b      	ldr	r3, [r3, #16]
 800469a:	f003 0320 	and.w	r3, r3, #32
 800469e:	2b20      	cmp	r3, #32
 80046a0:	d10e      	bne.n	80046c0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	68db      	ldr	r3, [r3, #12]
 80046a8:	f003 0320 	and.w	r3, r3, #32
 80046ac:	2b20      	cmp	r3, #32
 80046ae:	d107      	bne.n	80046c0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f06f 0220 	mvn.w	r2, #32
 80046b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f000 faaa 	bl	8004c14 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80046c0:	bf00      	nop
 80046c2:	3708      	adds	r7, #8
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}

080046c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b084      	sub	sp, #16
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
 80046d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80046d2:	2300      	movs	r3, #0
 80046d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046dc:	2b01      	cmp	r3, #1
 80046de:	d101      	bne.n	80046e4 <HAL_TIM_ConfigClockSource+0x1c>
 80046e0:	2302      	movs	r3, #2
 80046e2:	e0b4      	b.n	800484e <HAL_TIM_ConfigClockSource+0x186>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2201      	movs	r2, #1
 80046e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2202      	movs	r2, #2
 80046f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	689b      	ldr	r3, [r3, #8]
 80046fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004702:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800470a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	68ba      	ldr	r2, [r7, #8]
 8004712:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800471c:	d03e      	beq.n	800479c <HAL_TIM_ConfigClockSource+0xd4>
 800471e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004722:	f200 8087 	bhi.w	8004834 <HAL_TIM_ConfigClockSource+0x16c>
 8004726:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800472a:	f000 8086 	beq.w	800483a <HAL_TIM_ConfigClockSource+0x172>
 800472e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004732:	d87f      	bhi.n	8004834 <HAL_TIM_ConfigClockSource+0x16c>
 8004734:	2b70      	cmp	r3, #112	; 0x70
 8004736:	d01a      	beq.n	800476e <HAL_TIM_ConfigClockSource+0xa6>
 8004738:	2b70      	cmp	r3, #112	; 0x70
 800473a:	d87b      	bhi.n	8004834 <HAL_TIM_ConfigClockSource+0x16c>
 800473c:	2b60      	cmp	r3, #96	; 0x60
 800473e:	d050      	beq.n	80047e2 <HAL_TIM_ConfigClockSource+0x11a>
 8004740:	2b60      	cmp	r3, #96	; 0x60
 8004742:	d877      	bhi.n	8004834 <HAL_TIM_ConfigClockSource+0x16c>
 8004744:	2b50      	cmp	r3, #80	; 0x50
 8004746:	d03c      	beq.n	80047c2 <HAL_TIM_ConfigClockSource+0xfa>
 8004748:	2b50      	cmp	r3, #80	; 0x50
 800474a:	d873      	bhi.n	8004834 <HAL_TIM_ConfigClockSource+0x16c>
 800474c:	2b40      	cmp	r3, #64	; 0x40
 800474e:	d058      	beq.n	8004802 <HAL_TIM_ConfigClockSource+0x13a>
 8004750:	2b40      	cmp	r3, #64	; 0x40
 8004752:	d86f      	bhi.n	8004834 <HAL_TIM_ConfigClockSource+0x16c>
 8004754:	2b30      	cmp	r3, #48	; 0x30
 8004756:	d064      	beq.n	8004822 <HAL_TIM_ConfigClockSource+0x15a>
 8004758:	2b30      	cmp	r3, #48	; 0x30
 800475a:	d86b      	bhi.n	8004834 <HAL_TIM_ConfigClockSource+0x16c>
 800475c:	2b20      	cmp	r3, #32
 800475e:	d060      	beq.n	8004822 <HAL_TIM_ConfigClockSource+0x15a>
 8004760:	2b20      	cmp	r3, #32
 8004762:	d867      	bhi.n	8004834 <HAL_TIM_ConfigClockSource+0x16c>
 8004764:	2b00      	cmp	r3, #0
 8004766:	d05c      	beq.n	8004822 <HAL_TIM_ConfigClockSource+0x15a>
 8004768:	2b10      	cmp	r3, #16
 800476a:	d05a      	beq.n	8004822 <HAL_TIM_ConfigClockSource+0x15a>
 800476c:	e062      	b.n	8004834 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6818      	ldr	r0, [r3, #0]
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	6899      	ldr	r1, [r3, #8]
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	685a      	ldr	r2, [r3, #4]
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	68db      	ldr	r3, [r3, #12]
 800477e:	f000 f9ad 	bl	8004adc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004790:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	68ba      	ldr	r2, [r7, #8]
 8004798:	609a      	str	r2, [r3, #8]
      break;
 800479a:	e04f      	b.n	800483c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6818      	ldr	r0, [r3, #0]
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	6899      	ldr	r1, [r3, #8]
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	685a      	ldr	r2, [r3, #4]
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	68db      	ldr	r3, [r3, #12]
 80047ac:	f000 f996 	bl	8004adc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	689a      	ldr	r2, [r3, #8]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80047be:	609a      	str	r2, [r3, #8]
      break;
 80047c0:	e03c      	b.n	800483c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6818      	ldr	r0, [r3, #0]
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	6859      	ldr	r1, [r3, #4]
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	68db      	ldr	r3, [r3, #12]
 80047ce:	461a      	mov	r2, r3
 80047d0:	f000 f90a 	bl	80049e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	2150      	movs	r1, #80	; 0x50
 80047da:	4618      	mov	r0, r3
 80047dc:	f000 f963 	bl	8004aa6 <TIM_ITRx_SetConfig>
      break;
 80047e0:	e02c      	b.n	800483c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6818      	ldr	r0, [r3, #0]
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	6859      	ldr	r1, [r3, #4]
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	68db      	ldr	r3, [r3, #12]
 80047ee:	461a      	mov	r2, r3
 80047f0:	f000 f929 	bl	8004a46 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	2160      	movs	r1, #96	; 0x60
 80047fa:	4618      	mov	r0, r3
 80047fc:	f000 f953 	bl	8004aa6 <TIM_ITRx_SetConfig>
      break;
 8004800:	e01c      	b.n	800483c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6818      	ldr	r0, [r3, #0]
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	6859      	ldr	r1, [r3, #4]
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	68db      	ldr	r3, [r3, #12]
 800480e:	461a      	mov	r2, r3
 8004810:	f000 f8ea 	bl	80049e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	2140      	movs	r1, #64	; 0x40
 800481a:	4618      	mov	r0, r3
 800481c:	f000 f943 	bl	8004aa6 <TIM_ITRx_SetConfig>
      break;
 8004820:	e00c      	b.n	800483c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4619      	mov	r1, r3
 800482c:	4610      	mov	r0, r2
 800482e:	f000 f93a 	bl	8004aa6 <TIM_ITRx_SetConfig>
      break;
 8004832:	e003      	b.n	800483c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004834:	2301      	movs	r3, #1
 8004836:	73fb      	strb	r3, [r7, #15]
      break;
 8004838:	e000      	b.n	800483c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800483a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2201      	movs	r2, #1
 8004840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2200      	movs	r2, #0
 8004848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800484c:	7bfb      	ldrb	r3, [r7, #15]
}
 800484e:	4618      	mov	r0, r3
 8004850:	3710      	adds	r7, #16
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}

08004856 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004856:	b480      	push	{r7}
 8004858:	b083      	sub	sp, #12
 800485a:	af00      	add	r7, sp, #0
 800485c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800485e:	bf00      	nop
 8004860:	370c      	adds	r7, #12
 8004862:	46bd      	mov	sp, r7
 8004864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004868:	4770      	bx	lr

0800486a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800486a:	b480      	push	{r7}
 800486c:	b083      	sub	sp, #12
 800486e:	af00      	add	r7, sp, #0
 8004870:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004872:	bf00      	nop
 8004874:	370c      	adds	r7, #12
 8004876:	46bd      	mov	sp, r7
 8004878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487c:	4770      	bx	lr

0800487e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800487e:	b480      	push	{r7}
 8004880:	b083      	sub	sp, #12
 8004882:	af00      	add	r7, sp, #0
 8004884:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004886:	bf00      	nop
 8004888:	370c      	adds	r7, #12
 800488a:	46bd      	mov	sp, r7
 800488c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004890:	4770      	bx	lr

08004892 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004892:	b480      	push	{r7}
 8004894:	b083      	sub	sp, #12
 8004896:	af00      	add	r7, sp, #0
 8004898:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800489a:	bf00      	nop
 800489c:	370c      	adds	r7, #12
 800489e:	46bd      	mov	sp, r7
 80048a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a4:	4770      	bx	lr
	...

080048a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b085      	sub	sp, #20
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
 80048b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	4a40      	ldr	r2, [pc, #256]	; (80049bc <TIM_Base_SetConfig+0x114>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d013      	beq.n	80048e8 <TIM_Base_SetConfig+0x40>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048c6:	d00f      	beq.n	80048e8 <TIM_Base_SetConfig+0x40>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	4a3d      	ldr	r2, [pc, #244]	; (80049c0 <TIM_Base_SetConfig+0x118>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d00b      	beq.n	80048e8 <TIM_Base_SetConfig+0x40>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	4a3c      	ldr	r2, [pc, #240]	; (80049c4 <TIM_Base_SetConfig+0x11c>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d007      	beq.n	80048e8 <TIM_Base_SetConfig+0x40>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	4a3b      	ldr	r2, [pc, #236]	; (80049c8 <TIM_Base_SetConfig+0x120>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d003      	beq.n	80048e8 <TIM_Base_SetConfig+0x40>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	4a3a      	ldr	r2, [pc, #232]	; (80049cc <TIM_Base_SetConfig+0x124>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d108      	bne.n	80048fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	68fa      	ldr	r2, [r7, #12]
 80048f6:	4313      	orrs	r3, r2
 80048f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	4a2f      	ldr	r2, [pc, #188]	; (80049bc <TIM_Base_SetConfig+0x114>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d02b      	beq.n	800495a <TIM_Base_SetConfig+0xb2>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004908:	d027      	beq.n	800495a <TIM_Base_SetConfig+0xb2>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	4a2c      	ldr	r2, [pc, #176]	; (80049c0 <TIM_Base_SetConfig+0x118>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d023      	beq.n	800495a <TIM_Base_SetConfig+0xb2>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	4a2b      	ldr	r2, [pc, #172]	; (80049c4 <TIM_Base_SetConfig+0x11c>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d01f      	beq.n	800495a <TIM_Base_SetConfig+0xb2>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	4a2a      	ldr	r2, [pc, #168]	; (80049c8 <TIM_Base_SetConfig+0x120>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d01b      	beq.n	800495a <TIM_Base_SetConfig+0xb2>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	4a29      	ldr	r2, [pc, #164]	; (80049cc <TIM_Base_SetConfig+0x124>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d017      	beq.n	800495a <TIM_Base_SetConfig+0xb2>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	4a28      	ldr	r2, [pc, #160]	; (80049d0 <TIM_Base_SetConfig+0x128>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d013      	beq.n	800495a <TIM_Base_SetConfig+0xb2>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	4a27      	ldr	r2, [pc, #156]	; (80049d4 <TIM_Base_SetConfig+0x12c>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d00f      	beq.n	800495a <TIM_Base_SetConfig+0xb2>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	4a26      	ldr	r2, [pc, #152]	; (80049d8 <TIM_Base_SetConfig+0x130>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d00b      	beq.n	800495a <TIM_Base_SetConfig+0xb2>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	4a25      	ldr	r2, [pc, #148]	; (80049dc <TIM_Base_SetConfig+0x134>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d007      	beq.n	800495a <TIM_Base_SetConfig+0xb2>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	4a24      	ldr	r2, [pc, #144]	; (80049e0 <TIM_Base_SetConfig+0x138>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d003      	beq.n	800495a <TIM_Base_SetConfig+0xb2>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	4a23      	ldr	r2, [pc, #140]	; (80049e4 <TIM_Base_SetConfig+0x13c>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d108      	bne.n	800496c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004960:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	68db      	ldr	r3, [r3, #12]
 8004966:	68fa      	ldr	r2, [r7, #12]
 8004968:	4313      	orrs	r3, r2
 800496a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	695b      	ldr	r3, [r3, #20]
 8004976:	4313      	orrs	r3, r2
 8004978:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	68fa      	ldr	r2, [r7, #12]
 800497e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	689a      	ldr	r2, [r3, #8]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	681a      	ldr	r2, [r3, #0]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	4a0a      	ldr	r2, [pc, #40]	; (80049bc <TIM_Base_SetConfig+0x114>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d003      	beq.n	80049a0 <TIM_Base_SetConfig+0xf8>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	4a0c      	ldr	r2, [pc, #48]	; (80049cc <TIM_Base_SetConfig+0x124>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d103      	bne.n	80049a8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	691a      	ldr	r2, [r3, #16]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2201      	movs	r2, #1
 80049ac:	615a      	str	r2, [r3, #20]
}
 80049ae:	bf00      	nop
 80049b0:	3714      	adds	r7, #20
 80049b2:	46bd      	mov	sp, r7
 80049b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b8:	4770      	bx	lr
 80049ba:	bf00      	nop
 80049bc:	40010000 	.word	0x40010000
 80049c0:	40000400 	.word	0x40000400
 80049c4:	40000800 	.word	0x40000800
 80049c8:	40000c00 	.word	0x40000c00
 80049cc:	40010400 	.word	0x40010400
 80049d0:	40014000 	.word	0x40014000
 80049d4:	40014400 	.word	0x40014400
 80049d8:	40014800 	.word	0x40014800
 80049dc:	40001800 	.word	0x40001800
 80049e0:	40001c00 	.word	0x40001c00
 80049e4:	40002000 	.word	0x40002000

080049e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b087      	sub	sp, #28
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	60f8      	str	r0, [r7, #12]
 80049f0:	60b9      	str	r1, [r7, #8]
 80049f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	6a1b      	ldr	r3, [r3, #32]
 80049f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	6a1b      	ldr	r3, [r3, #32]
 80049fe:	f023 0201 	bic.w	r2, r3, #1
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	699b      	ldr	r3, [r3, #24]
 8004a0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	011b      	lsls	r3, r3, #4
 8004a18:	693a      	ldr	r2, [r7, #16]
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	f023 030a 	bic.w	r3, r3, #10
 8004a24:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004a26:	697a      	ldr	r2, [r7, #20]
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	693a      	ldr	r2, [r7, #16]
 8004a32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	697a      	ldr	r2, [r7, #20]
 8004a38:	621a      	str	r2, [r3, #32]
}
 8004a3a:	bf00      	nop
 8004a3c:	371c      	adds	r7, #28
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a44:	4770      	bx	lr

08004a46 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a46:	b480      	push	{r7}
 8004a48:	b087      	sub	sp, #28
 8004a4a:	af00      	add	r7, sp, #0
 8004a4c:	60f8      	str	r0, [r7, #12]
 8004a4e:	60b9      	str	r1, [r7, #8]
 8004a50:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	6a1b      	ldr	r3, [r3, #32]
 8004a56:	f023 0210 	bic.w	r2, r3, #16
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	699b      	ldr	r3, [r3, #24]
 8004a62:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	6a1b      	ldr	r3, [r3, #32]
 8004a68:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004a70:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	031b      	lsls	r3, r3, #12
 8004a76:	697a      	ldr	r2, [r7, #20]
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a7c:	693b      	ldr	r3, [r7, #16]
 8004a7e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004a82:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	011b      	lsls	r3, r3, #4
 8004a88:	693a      	ldr	r2, [r7, #16]
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	697a      	ldr	r2, [r7, #20]
 8004a92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	693a      	ldr	r2, [r7, #16]
 8004a98:	621a      	str	r2, [r3, #32]
}
 8004a9a:	bf00      	nop
 8004a9c:	371c      	adds	r7, #28
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa4:	4770      	bx	lr

08004aa6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004aa6:	b480      	push	{r7}
 8004aa8:	b085      	sub	sp, #20
 8004aaa:	af00      	add	r7, sp, #0
 8004aac:	6078      	str	r0, [r7, #4]
 8004aae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	689b      	ldr	r3, [r3, #8]
 8004ab4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004abc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004abe:	683a      	ldr	r2, [r7, #0]
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	f043 0307 	orr.w	r3, r3, #7
 8004ac8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	68fa      	ldr	r2, [r7, #12]
 8004ace:	609a      	str	r2, [r3, #8]
}
 8004ad0:	bf00      	nop
 8004ad2:	3714      	adds	r7, #20
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ada:	4770      	bx	lr

08004adc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b087      	sub	sp, #28
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	60f8      	str	r0, [r7, #12]
 8004ae4:	60b9      	str	r1, [r7, #8]
 8004ae6:	607a      	str	r2, [r7, #4]
 8004ae8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	689b      	ldr	r3, [r3, #8]
 8004aee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004af6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	021a      	lsls	r2, r3, #8
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	431a      	orrs	r2, r3
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	4313      	orrs	r3, r2
 8004b04:	697a      	ldr	r2, [r7, #20]
 8004b06:	4313      	orrs	r3, r2
 8004b08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	697a      	ldr	r2, [r7, #20]
 8004b0e:	609a      	str	r2, [r3, #8]
}
 8004b10:	bf00      	nop
 8004b12:	371c      	adds	r7, #28
 8004b14:	46bd      	mov	sp, r7
 8004b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1a:	4770      	bx	lr

08004b1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b085      	sub	sp, #20
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
 8004b24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b2c:	2b01      	cmp	r3, #1
 8004b2e:	d101      	bne.n	8004b34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b30:	2302      	movs	r3, #2
 8004b32:	e05a      	b.n	8004bea <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2201      	movs	r2, #1
 8004b38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2202      	movs	r2, #2
 8004b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	689b      	ldr	r3, [r3, #8]
 8004b52:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b5a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	68fa      	ldr	r2, [r7, #12]
 8004b62:	4313      	orrs	r3, r2
 8004b64:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	68fa      	ldr	r2, [r7, #12]
 8004b6c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a21      	ldr	r2, [pc, #132]	; (8004bf8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d022      	beq.n	8004bbe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b80:	d01d      	beq.n	8004bbe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a1d      	ldr	r2, [pc, #116]	; (8004bfc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d018      	beq.n	8004bbe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a1b      	ldr	r2, [pc, #108]	; (8004c00 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d013      	beq.n	8004bbe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a1a      	ldr	r2, [pc, #104]	; (8004c04 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d00e      	beq.n	8004bbe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a18      	ldr	r2, [pc, #96]	; (8004c08 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d009      	beq.n	8004bbe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a17      	ldr	r2, [pc, #92]	; (8004c0c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d004      	beq.n	8004bbe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a15      	ldr	r2, [pc, #84]	; (8004c10 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d10c      	bne.n	8004bd8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004bc4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	68ba      	ldr	r2, [r7, #8]
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	68ba      	ldr	r2, [r7, #8]
 8004bd6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2201      	movs	r2, #1
 8004bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2200      	movs	r2, #0
 8004be4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004be8:	2300      	movs	r3, #0
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	3714      	adds	r7, #20
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf4:	4770      	bx	lr
 8004bf6:	bf00      	nop
 8004bf8:	40010000 	.word	0x40010000
 8004bfc:	40000400 	.word	0x40000400
 8004c00:	40000800 	.word	0x40000800
 8004c04:	40000c00 	.word	0x40000c00
 8004c08:	40010400 	.word	0x40010400
 8004c0c:	40014000 	.word	0x40014000
 8004c10:	40001800 	.word	0x40001800

08004c14 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004c14:	b480      	push	{r7}
 8004c16:	b083      	sub	sp, #12
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004c1c:	bf00      	nop
 8004c1e:	370c      	adds	r7, #12
 8004c20:	46bd      	mov	sp, r7
 8004c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c26:	4770      	bx	lr

08004c28 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b083      	sub	sp, #12
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c30:	bf00      	nop
 8004c32:	370c      	adds	r7, #12
 8004c34:	46bd      	mov	sp, r7
 8004c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3a:	4770      	bx	lr

08004c3c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b082      	sub	sp, #8
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d101      	bne.n	8004c4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	e03f      	b.n	8004cce <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c54:	b2db      	uxtb	r3, r3
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d106      	bne.n	8004c68 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c62:	6878      	ldr	r0, [r7, #4]
 8004c64:	f7fd f828 	bl	8001cb8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2224      	movs	r2, #36	; 0x24
 8004c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	68da      	ldr	r2, [r3, #12]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004c7e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004c80:	6878      	ldr	r0, [r7, #4]
 8004c82:	f000 fd7b 	bl	800577c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	691a      	ldr	r2, [r3, #16]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004c94:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	695a      	ldr	r2, [r3, #20]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ca4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	68da      	ldr	r2, [r3, #12]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004cb4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2220      	movs	r2, #32
 8004cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2220      	movs	r2, #32
 8004cc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004ccc:	2300      	movs	r3, #0
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	3708      	adds	r7, #8
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}

08004cd6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004cd6:	b580      	push	{r7, lr}
 8004cd8:	b08a      	sub	sp, #40	; 0x28
 8004cda:	af02      	add	r7, sp, #8
 8004cdc:	60f8      	str	r0, [r7, #12]
 8004cde:	60b9      	str	r1, [r7, #8]
 8004ce0:	603b      	str	r3, [r7, #0]
 8004ce2:	4613      	mov	r3, r2
 8004ce4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cf0:	b2db      	uxtb	r3, r3
 8004cf2:	2b20      	cmp	r3, #32
 8004cf4:	d17c      	bne.n	8004df0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d002      	beq.n	8004d02 <HAL_UART_Transmit+0x2c>
 8004cfc:	88fb      	ldrh	r3, [r7, #6]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d101      	bne.n	8004d06 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
 8004d04:	e075      	b.n	8004df2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	d101      	bne.n	8004d14 <HAL_UART_Transmit+0x3e>
 8004d10:	2302      	movs	r3, #2
 8004d12:	e06e      	b.n	8004df2 <HAL_UART_Transmit+0x11c>
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	2201      	movs	r2, #1
 8004d18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2221      	movs	r2, #33	; 0x21
 8004d26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004d2a:	f7fd f8a5 	bl	8001e78 <HAL_GetTick>
 8004d2e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	88fa      	ldrh	r2, [r7, #6]
 8004d34:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	88fa      	ldrh	r2, [r7, #6]
 8004d3a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	689b      	ldr	r3, [r3, #8]
 8004d40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d44:	d108      	bne.n	8004d58 <HAL_UART_Transmit+0x82>
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	691b      	ldr	r3, [r3, #16]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d104      	bne.n	8004d58 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004d4e:	2300      	movs	r3, #0
 8004d50:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	61bb      	str	r3, [r7, #24]
 8004d56:	e003      	b.n	8004d60 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	2200      	movs	r2, #0
 8004d64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004d68:	e02a      	b.n	8004dc0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	9300      	str	r3, [sp, #0]
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	2200      	movs	r2, #0
 8004d72:	2180      	movs	r1, #128	; 0x80
 8004d74:	68f8      	ldr	r0, [r7, #12]
 8004d76:	f000 faf9 	bl	800536c <UART_WaitOnFlagUntilTimeout>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d001      	beq.n	8004d84 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004d80:	2303      	movs	r3, #3
 8004d82:	e036      	b.n	8004df2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004d84:	69fb      	ldr	r3, [r7, #28]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d10b      	bne.n	8004da2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004d8a:	69bb      	ldr	r3, [r7, #24]
 8004d8c:	881b      	ldrh	r3, [r3, #0]
 8004d8e:	461a      	mov	r2, r3
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d98:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004d9a:	69bb      	ldr	r3, [r7, #24]
 8004d9c:	3302      	adds	r3, #2
 8004d9e:	61bb      	str	r3, [r7, #24]
 8004da0:	e007      	b.n	8004db2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004da2:	69fb      	ldr	r3, [r7, #28]
 8004da4:	781a      	ldrb	r2, [r3, #0]
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004dac:	69fb      	ldr	r3, [r7, #28]
 8004dae:	3301      	adds	r3, #1
 8004db0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004db6:	b29b      	uxth	r3, r3
 8004db8:	3b01      	subs	r3, #1
 8004dba:	b29a      	uxth	r2, r3
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004dc4:	b29b      	uxth	r3, r3
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d1cf      	bne.n	8004d6a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	9300      	str	r3, [sp, #0]
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	2140      	movs	r1, #64	; 0x40
 8004dd4:	68f8      	ldr	r0, [r7, #12]
 8004dd6:	f000 fac9 	bl	800536c <UART_WaitOnFlagUntilTimeout>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d001      	beq.n	8004de4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004de0:	2303      	movs	r3, #3
 8004de2:	e006      	b.n	8004df2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	2220      	movs	r2, #32
 8004de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004dec:	2300      	movs	r3, #0
 8004dee:	e000      	b.n	8004df2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004df0:	2302      	movs	r3, #2
  }
}
 8004df2:	4618      	mov	r0, r3
 8004df4:	3720      	adds	r7, #32
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd80      	pop	{r7, pc}
	...

08004dfc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b0ba      	sub	sp, #232	; 0xe8
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	68db      	ldr	r3, [r3, #12]
 8004e14:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	695b      	ldr	r3, [r3, #20]
 8004e1e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004e22:	2300      	movs	r3, #0
 8004e24:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004e28:	2300      	movs	r3, #0
 8004e2a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004e2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e32:	f003 030f 	and.w	r3, r3, #15
 8004e36:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004e3a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d10f      	bne.n	8004e62 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004e42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e46:	f003 0320 	and.w	r3, r3, #32
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d009      	beq.n	8004e62 <HAL_UART_IRQHandler+0x66>
 8004e4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e52:	f003 0320 	and.w	r3, r3, #32
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d003      	beq.n	8004e62 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004e5a:	6878      	ldr	r0, [r7, #4]
 8004e5c:	f000 fbd3 	bl	8005606 <UART_Receive_IT>
      return;
 8004e60:	e256      	b.n	8005310 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004e62:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	f000 80de 	beq.w	8005028 <HAL_UART_IRQHandler+0x22c>
 8004e6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e70:	f003 0301 	and.w	r3, r3, #1
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d106      	bne.n	8004e86 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004e78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e7c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	f000 80d1 	beq.w	8005028 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004e86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e8a:	f003 0301 	and.w	r3, r3, #1
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d00b      	beq.n	8004eaa <HAL_UART_IRQHandler+0xae>
 8004e92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d005      	beq.n	8004eaa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea2:	f043 0201 	orr.w	r2, r3, #1
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004eaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004eae:	f003 0304 	and.w	r3, r3, #4
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d00b      	beq.n	8004ece <HAL_UART_IRQHandler+0xd2>
 8004eb6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004eba:	f003 0301 	and.w	r3, r3, #1
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d005      	beq.n	8004ece <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ec6:	f043 0202 	orr.w	r2, r3, #2
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004ece:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ed2:	f003 0302 	and.w	r3, r3, #2
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d00b      	beq.n	8004ef2 <HAL_UART_IRQHandler+0xf6>
 8004eda:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ede:	f003 0301 	and.w	r3, r3, #1
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d005      	beq.n	8004ef2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eea:	f043 0204 	orr.w	r2, r3, #4
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004ef2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ef6:	f003 0308 	and.w	r3, r3, #8
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d011      	beq.n	8004f22 <HAL_UART_IRQHandler+0x126>
 8004efe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f02:	f003 0320 	and.w	r3, r3, #32
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d105      	bne.n	8004f16 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004f0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f0e:	f003 0301 	and.w	r3, r3, #1
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d005      	beq.n	8004f22 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f1a:	f043 0208 	orr.w	r2, r3, #8
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	f000 81ed 	beq.w	8005306 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004f2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f30:	f003 0320 	and.w	r3, r3, #32
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d008      	beq.n	8004f4a <HAL_UART_IRQHandler+0x14e>
 8004f38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f3c:	f003 0320 	and.w	r3, r3, #32
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d002      	beq.n	8004f4a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004f44:	6878      	ldr	r0, [r7, #4]
 8004f46:	f000 fb5e 	bl	8005606 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	695b      	ldr	r3, [r3, #20]
 8004f50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f54:	2b40      	cmp	r3, #64	; 0x40
 8004f56:	bf0c      	ite	eq
 8004f58:	2301      	moveq	r3, #1
 8004f5a:	2300      	movne	r3, #0
 8004f5c:	b2db      	uxtb	r3, r3
 8004f5e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f66:	f003 0308 	and.w	r3, r3, #8
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d103      	bne.n	8004f76 <HAL_UART_IRQHandler+0x17a>
 8004f6e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d04f      	beq.n	8005016 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f000 fa66 	bl	8005448 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	695b      	ldr	r3, [r3, #20]
 8004f82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f86:	2b40      	cmp	r3, #64	; 0x40
 8004f88:	d141      	bne.n	800500e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	3314      	adds	r3, #20
 8004f90:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f94:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004f98:	e853 3f00 	ldrex	r3, [r3]
 8004f9c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004fa0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004fa4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fa8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	3314      	adds	r3, #20
 8004fb2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004fb6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004fba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fbe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004fc2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004fc6:	e841 2300 	strex	r3, r2, [r1]
 8004fca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004fce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d1d9      	bne.n	8004f8a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d013      	beq.n	8005006 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fe2:	4a7d      	ldr	r2, [pc, #500]	; (80051d8 <HAL_UART_IRQHandler+0x3dc>)
 8004fe4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fea:	4618      	mov	r0, r3
 8004fec:	f7fd f8f5 	bl	80021da <HAL_DMA_Abort_IT>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d016      	beq.n	8005024 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ffa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ffc:	687a      	ldr	r2, [r7, #4]
 8004ffe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005000:	4610      	mov	r0, r2
 8005002:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005004:	e00e      	b.n	8005024 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f000 f99a 	bl	8005340 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800500c:	e00a      	b.n	8005024 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800500e:	6878      	ldr	r0, [r7, #4]
 8005010:	f000 f996 	bl	8005340 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005014:	e006      	b.n	8005024 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f000 f992 	bl	8005340 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2200      	movs	r2, #0
 8005020:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005022:	e170      	b.n	8005306 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005024:	bf00      	nop
    return;
 8005026:	e16e      	b.n	8005306 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800502c:	2b01      	cmp	r3, #1
 800502e:	f040 814a 	bne.w	80052c6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005032:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005036:	f003 0310 	and.w	r3, r3, #16
 800503a:	2b00      	cmp	r3, #0
 800503c:	f000 8143 	beq.w	80052c6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005040:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005044:	f003 0310 	and.w	r3, r3, #16
 8005048:	2b00      	cmp	r3, #0
 800504a:	f000 813c 	beq.w	80052c6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800504e:	2300      	movs	r3, #0
 8005050:	60bb      	str	r3, [r7, #8]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	60bb      	str	r3, [r7, #8]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	60bb      	str	r3, [r7, #8]
 8005062:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	695b      	ldr	r3, [r3, #20]
 800506a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800506e:	2b40      	cmp	r3, #64	; 0x40
 8005070:	f040 80b4 	bne.w	80051dc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005080:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005084:	2b00      	cmp	r3, #0
 8005086:	f000 8140 	beq.w	800530a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800508e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005092:	429a      	cmp	r2, r3
 8005094:	f080 8139 	bcs.w	800530a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800509e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050a4:	69db      	ldr	r3, [r3, #28]
 80050a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050aa:	f000 8088 	beq.w	80051be <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	330c      	adds	r3, #12
 80050b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80050bc:	e853 3f00 	ldrex	r3, [r3]
 80050c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80050c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80050c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80050cc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	330c      	adds	r3, #12
 80050d6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80050da:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80050de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050e2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80050e6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80050ea:	e841 2300 	strex	r3, r2, [r1]
 80050ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80050f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d1d9      	bne.n	80050ae <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	3314      	adds	r3, #20
 8005100:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005102:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005104:	e853 3f00 	ldrex	r3, [r3]
 8005108:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800510a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800510c:	f023 0301 	bic.w	r3, r3, #1
 8005110:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	3314      	adds	r3, #20
 800511a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800511e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005122:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005124:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005126:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800512a:	e841 2300 	strex	r3, r2, [r1]
 800512e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005130:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005132:	2b00      	cmp	r3, #0
 8005134:	d1e1      	bne.n	80050fa <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	3314      	adds	r3, #20
 800513c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800513e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005140:	e853 3f00 	ldrex	r3, [r3]
 8005144:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005146:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005148:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800514c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	3314      	adds	r3, #20
 8005156:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800515a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800515c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800515e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005160:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005162:	e841 2300 	strex	r3, r2, [r1]
 8005166:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005168:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800516a:	2b00      	cmp	r3, #0
 800516c:	d1e3      	bne.n	8005136 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2220      	movs	r2, #32
 8005172:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2200      	movs	r2, #0
 800517a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	330c      	adds	r3, #12
 8005182:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005184:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005186:	e853 3f00 	ldrex	r3, [r3]
 800518a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800518c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800518e:	f023 0310 	bic.w	r3, r3, #16
 8005192:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	330c      	adds	r3, #12
 800519c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80051a0:	65ba      	str	r2, [r7, #88]	; 0x58
 80051a2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051a4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80051a6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80051a8:	e841 2300 	strex	r3, r2, [r1]
 80051ac:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80051ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d1e3      	bne.n	800517c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051b8:	4618      	mov	r0, r3
 80051ba:	f7fc ff9e 	bl	80020fa <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80051c6:	b29b      	uxth	r3, r3
 80051c8:	1ad3      	subs	r3, r2, r3
 80051ca:	b29b      	uxth	r3, r3
 80051cc:	4619      	mov	r1, r3
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	f000 f8c0 	bl	8005354 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80051d4:	e099      	b.n	800530a <HAL_UART_IRQHandler+0x50e>
 80051d6:	bf00      	nop
 80051d8:	0800550f 	.word	0x0800550f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80051e4:	b29b      	uxth	r3, r3
 80051e6:	1ad3      	subs	r3, r2, r3
 80051e8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80051f0:	b29b      	uxth	r3, r3
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	f000 808b 	beq.w	800530e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80051f8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	f000 8086 	beq.w	800530e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	330c      	adds	r3, #12
 8005208:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800520a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800520c:	e853 3f00 	ldrex	r3, [r3]
 8005210:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005212:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005214:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005218:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	330c      	adds	r3, #12
 8005222:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005226:	647a      	str	r2, [r7, #68]	; 0x44
 8005228:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800522a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800522c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800522e:	e841 2300 	strex	r3, r2, [r1]
 8005232:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005234:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005236:	2b00      	cmp	r3, #0
 8005238:	d1e3      	bne.n	8005202 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	3314      	adds	r3, #20
 8005240:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005244:	e853 3f00 	ldrex	r3, [r3]
 8005248:	623b      	str	r3, [r7, #32]
   return(result);
 800524a:	6a3b      	ldr	r3, [r7, #32]
 800524c:	f023 0301 	bic.w	r3, r3, #1
 8005250:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	3314      	adds	r3, #20
 800525a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800525e:	633a      	str	r2, [r7, #48]	; 0x30
 8005260:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005262:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005264:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005266:	e841 2300 	strex	r3, r2, [r1]
 800526a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800526c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800526e:	2b00      	cmp	r3, #0
 8005270:	d1e3      	bne.n	800523a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2220      	movs	r2, #32
 8005276:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2200      	movs	r2, #0
 800527e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	330c      	adds	r3, #12
 8005286:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	e853 3f00 	ldrex	r3, [r3]
 800528e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	f023 0310 	bic.w	r3, r3, #16
 8005296:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	330c      	adds	r3, #12
 80052a0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80052a4:	61fa      	str	r2, [r7, #28]
 80052a6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052a8:	69b9      	ldr	r1, [r7, #24]
 80052aa:	69fa      	ldr	r2, [r7, #28]
 80052ac:	e841 2300 	strex	r3, r2, [r1]
 80052b0:	617b      	str	r3, [r7, #20]
   return(result);
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d1e3      	bne.n	8005280 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80052b8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80052bc:	4619      	mov	r1, r3
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	f000 f848 	bl	8005354 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80052c4:	e023      	b.n	800530e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80052c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d009      	beq.n	80052e6 <HAL_UART_IRQHandler+0x4ea>
 80052d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d003      	beq.n	80052e6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	f000 f929 	bl	8005536 <UART_Transmit_IT>
    return;
 80052e4:	e014      	b.n	8005310 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80052e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d00e      	beq.n	8005310 <HAL_UART_IRQHandler+0x514>
 80052f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d008      	beq.n	8005310 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80052fe:	6878      	ldr	r0, [r7, #4]
 8005300:	f000 f969 	bl	80055d6 <UART_EndTransmit_IT>
    return;
 8005304:	e004      	b.n	8005310 <HAL_UART_IRQHandler+0x514>
    return;
 8005306:	bf00      	nop
 8005308:	e002      	b.n	8005310 <HAL_UART_IRQHandler+0x514>
      return;
 800530a:	bf00      	nop
 800530c:	e000      	b.n	8005310 <HAL_UART_IRQHandler+0x514>
      return;
 800530e:	bf00      	nop
  }
}
 8005310:	37e8      	adds	r7, #232	; 0xe8
 8005312:	46bd      	mov	sp, r7
 8005314:	bd80      	pop	{r7, pc}
 8005316:	bf00      	nop

08005318 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005318:	b480      	push	{r7}
 800531a:	b083      	sub	sp, #12
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005320:	bf00      	nop
 8005322:	370c      	adds	r7, #12
 8005324:	46bd      	mov	sp, r7
 8005326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532a:	4770      	bx	lr

0800532c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800532c:	b480      	push	{r7}
 800532e:	b083      	sub	sp, #12
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005334:	bf00      	nop
 8005336:	370c      	adds	r7, #12
 8005338:	46bd      	mov	sp, r7
 800533a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533e:	4770      	bx	lr

08005340 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005340:	b480      	push	{r7}
 8005342:	b083      	sub	sp, #12
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005348:	bf00      	nop
 800534a:	370c      	adds	r7, #12
 800534c:	46bd      	mov	sp, r7
 800534e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005352:	4770      	bx	lr

08005354 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005354:	b480      	push	{r7}
 8005356:	b083      	sub	sp, #12
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
 800535c:	460b      	mov	r3, r1
 800535e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005360:	bf00      	nop
 8005362:	370c      	adds	r7, #12
 8005364:	46bd      	mov	sp, r7
 8005366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536a:	4770      	bx	lr

0800536c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b090      	sub	sp, #64	; 0x40
 8005370:	af00      	add	r7, sp, #0
 8005372:	60f8      	str	r0, [r7, #12]
 8005374:	60b9      	str	r1, [r7, #8]
 8005376:	603b      	str	r3, [r7, #0]
 8005378:	4613      	mov	r3, r2
 800537a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800537c:	e050      	b.n	8005420 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800537e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005380:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005384:	d04c      	beq.n	8005420 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005386:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005388:	2b00      	cmp	r3, #0
 800538a:	d007      	beq.n	800539c <UART_WaitOnFlagUntilTimeout+0x30>
 800538c:	f7fc fd74 	bl	8001e78 <HAL_GetTick>
 8005390:	4602      	mov	r2, r0
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	1ad3      	subs	r3, r2, r3
 8005396:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005398:	429a      	cmp	r2, r3
 800539a:	d241      	bcs.n	8005420 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	330c      	adds	r3, #12
 80053a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053a6:	e853 3f00 	ldrex	r3, [r3]
 80053aa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80053ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ae:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80053b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	330c      	adds	r3, #12
 80053ba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80053bc:	637a      	str	r2, [r7, #52]	; 0x34
 80053be:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053c0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80053c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80053c4:	e841 2300 	strex	r3, r2, [r1]
 80053c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80053ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d1e5      	bne.n	800539c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	3314      	adds	r3, #20
 80053d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	e853 3f00 	ldrex	r3, [r3]
 80053de:	613b      	str	r3, [r7, #16]
   return(result);
 80053e0:	693b      	ldr	r3, [r7, #16]
 80053e2:	f023 0301 	bic.w	r3, r3, #1
 80053e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	3314      	adds	r3, #20
 80053ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80053f0:	623a      	str	r2, [r7, #32]
 80053f2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053f4:	69f9      	ldr	r1, [r7, #28]
 80053f6:	6a3a      	ldr	r2, [r7, #32]
 80053f8:	e841 2300 	strex	r3, r2, [r1]
 80053fc:	61bb      	str	r3, [r7, #24]
   return(result);
 80053fe:	69bb      	ldr	r3, [r7, #24]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d1e5      	bne.n	80053d0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	2220      	movs	r2, #32
 8005408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	2220      	movs	r2, #32
 8005410:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	2200      	movs	r2, #0
 8005418:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800541c:	2303      	movs	r3, #3
 800541e:	e00f      	b.n	8005440 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	681a      	ldr	r2, [r3, #0]
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	4013      	ands	r3, r2
 800542a:	68ba      	ldr	r2, [r7, #8]
 800542c:	429a      	cmp	r2, r3
 800542e:	bf0c      	ite	eq
 8005430:	2301      	moveq	r3, #1
 8005432:	2300      	movne	r3, #0
 8005434:	b2db      	uxtb	r3, r3
 8005436:	461a      	mov	r2, r3
 8005438:	79fb      	ldrb	r3, [r7, #7]
 800543a:	429a      	cmp	r2, r3
 800543c:	d09f      	beq.n	800537e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800543e:	2300      	movs	r3, #0
}
 8005440:	4618      	mov	r0, r3
 8005442:	3740      	adds	r7, #64	; 0x40
 8005444:	46bd      	mov	sp, r7
 8005446:	bd80      	pop	{r7, pc}

08005448 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005448:	b480      	push	{r7}
 800544a:	b095      	sub	sp, #84	; 0x54
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	330c      	adds	r3, #12
 8005456:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005458:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800545a:	e853 3f00 	ldrex	r3, [r3]
 800545e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005462:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005466:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	330c      	adds	r3, #12
 800546e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005470:	643a      	str	r2, [r7, #64]	; 0x40
 8005472:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005474:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005476:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005478:	e841 2300 	strex	r3, r2, [r1]
 800547c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800547e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005480:	2b00      	cmp	r3, #0
 8005482:	d1e5      	bne.n	8005450 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	3314      	adds	r3, #20
 800548a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800548c:	6a3b      	ldr	r3, [r7, #32]
 800548e:	e853 3f00 	ldrex	r3, [r3]
 8005492:	61fb      	str	r3, [r7, #28]
   return(result);
 8005494:	69fb      	ldr	r3, [r7, #28]
 8005496:	f023 0301 	bic.w	r3, r3, #1
 800549a:	64bb      	str	r3, [r7, #72]	; 0x48
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	3314      	adds	r3, #20
 80054a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80054a4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80054a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80054aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054ac:	e841 2300 	strex	r3, r2, [r1]
 80054b0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80054b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d1e5      	bne.n	8005484 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054bc:	2b01      	cmp	r3, #1
 80054be:	d119      	bne.n	80054f4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	330c      	adds	r3, #12
 80054c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	e853 3f00 	ldrex	r3, [r3]
 80054ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	f023 0310 	bic.w	r3, r3, #16
 80054d6:	647b      	str	r3, [r7, #68]	; 0x44
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	330c      	adds	r3, #12
 80054de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80054e0:	61ba      	str	r2, [r7, #24]
 80054e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054e4:	6979      	ldr	r1, [r7, #20]
 80054e6:	69ba      	ldr	r2, [r7, #24]
 80054e8:	e841 2300 	strex	r3, r2, [r1]
 80054ec:	613b      	str	r3, [r7, #16]
   return(result);
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d1e5      	bne.n	80054c0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2220      	movs	r2, #32
 80054f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2200      	movs	r2, #0
 8005500:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005502:	bf00      	nop
 8005504:	3754      	adds	r7, #84	; 0x54
 8005506:	46bd      	mov	sp, r7
 8005508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550c:	4770      	bx	lr

0800550e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800550e:	b580      	push	{r7, lr}
 8005510:	b084      	sub	sp, #16
 8005512:	af00      	add	r7, sp, #0
 8005514:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800551a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	2200      	movs	r2, #0
 8005520:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	2200      	movs	r2, #0
 8005526:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005528:	68f8      	ldr	r0, [r7, #12]
 800552a:	f7ff ff09 	bl	8005340 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800552e:	bf00      	nop
 8005530:	3710      	adds	r7, #16
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}

08005536 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005536:	b480      	push	{r7}
 8005538:	b085      	sub	sp, #20
 800553a:	af00      	add	r7, sp, #0
 800553c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005544:	b2db      	uxtb	r3, r3
 8005546:	2b21      	cmp	r3, #33	; 0x21
 8005548:	d13e      	bne.n	80055c8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	689b      	ldr	r3, [r3, #8]
 800554e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005552:	d114      	bne.n	800557e <UART_Transmit_IT+0x48>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	691b      	ldr	r3, [r3, #16]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d110      	bne.n	800557e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6a1b      	ldr	r3, [r3, #32]
 8005560:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	881b      	ldrh	r3, [r3, #0]
 8005566:	461a      	mov	r2, r3
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005570:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6a1b      	ldr	r3, [r3, #32]
 8005576:	1c9a      	adds	r2, r3, #2
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	621a      	str	r2, [r3, #32]
 800557c:	e008      	b.n	8005590 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6a1b      	ldr	r3, [r3, #32]
 8005582:	1c59      	adds	r1, r3, #1
 8005584:	687a      	ldr	r2, [r7, #4]
 8005586:	6211      	str	r1, [r2, #32]
 8005588:	781a      	ldrb	r2, [r3, #0]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005594:	b29b      	uxth	r3, r3
 8005596:	3b01      	subs	r3, #1
 8005598:	b29b      	uxth	r3, r3
 800559a:	687a      	ldr	r2, [r7, #4]
 800559c:	4619      	mov	r1, r3
 800559e:	84d1      	strh	r1, [r2, #38]	; 0x26
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d10f      	bne.n	80055c4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	68da      	ldr	r2, [r3, #12]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80055b2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	68da      	ldr	r2, [r3, #12]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80055c2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80055c4:	2300      	movs	r3, #0
 80055c6:	e000      	b.n	80055ca <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80055c8:	2302      	movs	r3, #2
  }
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	3714      	adds	r7, #20
 80055ce:	46bd      	mov	sp, r7
 80055d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d4:	4770      	bx	lr

080055d6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80055d6:	b580      	push	{r7, lr}
 80055d8:	b082      	sub	sp, #8
 80055da:	af00      	add	r7, sp, #0
 80055dc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	68da      	ldr	r2, [r3, #12]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055ec:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2220      	movs	r2, #32
 80055f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	f7ff fe8e 	bl	8005318 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80055fc:	2300      	movs	r3, #0
}
 80055fe:	4618      	mov	r0, r3
 8005600:	3708      	adds	r7, #8
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}

08005606 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005606:	b580      	push	{r7, lr}
 8005608:	b08c      	sub	sp, #48	; 0x30
 800560a:	af00      	add	r7, sp, #0
 800560c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005614:	b2db      	uxtb	r3, r3
 8005616:	2b22      	cmp	r3, #34	; 0x22
 8005618:	f040 80ab 	bne.w	8005772 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	689b      	ldr	r3, [r3, #8]
 8005620:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005624:	d117      	bne.n	8005656 <UART_Receive_IT+0x50>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	691b      	ldr	r3, [r3, #16]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d113      	bne.n	8005656 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800562e:	2300      	movs	r3, #0
 8005630:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005636:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	b29b      	uxth	r3, r3
 8005640:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005644:	b29a      	uxth	r2, r3
 8005646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005648:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800564e:	1c9a      	adds	r2, r3, #2
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	629a      	str	r2, [r3, #40]	; 0x28
 8005654:	e026      	b.n	80056a4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800565a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800565c:	2300      	movs	r3, #0
 800565e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	689b      	ldr	r3, [r3, #8]
 8005664:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005668:	d007      	beq.n	800567a <UART_Receive_IT+0x74>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	689b      	ldr	r3, [r3, #8]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d10a      	bne.n	8005688 <UART_Receive_IT+0x82>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	691b      	ldr	r3, [r3, #16]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d106      	bne.n	8005688 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	b2da      	uxtb	r2, r3
 8005682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005684:	701a      	strb	r2, [r3, #0]
 8005686:	e008      	b.n	800569a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	b2db      	uxtb	r3, r3
 8005690:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005694:	b2da      	uxtb	r2, r3
 8005696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005698:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800569e:	1c5a      	adds	r2, r3, #1
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80056a8:	b29b      	uxth	r3, r3
 80056aa:	3b01      	subs	r3, #1
 80056ac:	b29b      	uxth	r3, r3
 80056ae:	687a      	ldr	r2, [r7, #4]
 80056b0:	4619      	mov	r1, r3
 80056b2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d15a      	bne.n	800576e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	68da      	ldr	r2, [r3, #12]
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f022 0220 	bic.w	r2, r2, #32
 80056c6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	68da      	ldr	r2, [r3, #12]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80056d6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	695a      	ldr	r2, [r3, #20]
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f022 0201 	bic.w	r2, r2, #1
 80056e6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2220      	movs	r2, #32
 80056ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056f4:	2b01      	cmp	r3, #1
 80056f6:	d135      	bne.n	8005764 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2200      	movs	r2, #0
 80056fc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	330c      	adds	r3, #12
 8005704:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	e853 3f00 	ldrex	r3, [r3]
 800570c:	613b      	str	r3, [r7, #16]
   return(result);
 800570e:	693b      	ldr	r3, [r7, #16]
 8005710:	f023 0310 	bic.w	r3, r3, #16
 8005714:	627b      	str	r3, [r7, #36]	; 0x24
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	330c      	adds	r3, #12
 800571c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800571e:	623a      	str	r2, [r7, #32]
 8005720:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005722:	69f9      	ldr	r1, [r7, #28]
 8005724:	6a3a      	ldr	r2, [r7, #32]
 8005726:	e841 2300 	strex	r3, r2, [r1]
 800572a:	61bb      	str	r3, [r7, #24]
   return(result);
 800572c:	69bb      	ldr	r3, [r7, #24]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d1e5      	bne.n	80056fe <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f003 0310 	and.w	r3, r3, #16
 800573c:	2b10      	cmp	r3, #16
 800573e:	d10a      	bne.n	8005756 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005740:	2300      	movs	r3, #0
 8005742:	60fb      	str	r3, [r7, #12]
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	60fb      	str	r3, [r7, #12]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	685b      	ldr	r3, [r3, #4]
 8005752:	60fb      	str	r3, [r7, #12]
 8005754:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800575a:	4619      	mov	r1, r3
 800575c:	6878      	ldr	r0, [r7, #4]
 800575e:	f7ff fdf9 	bl	8005354 <HAL_UARTEx_RxEventCallback>
 8005762:	e002      	b.n	800576a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005764:	6878      	ldr	r0, [r7, #4]
 8005766:	f7ff fde1 	bl	800532c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800576a:	2300      	movs	r3, #0
 800576c:	e002      	b.n	8005774 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800576e:	2300      	movs	r3, #0
 8005770:	e000      	b.n	8005774 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005772:	2302      	movs	r3, #2
  }
}
 8005774:	4618      	mov	r0, r3
 8005776:	3730      	adds	r7, #48	; 0x30
 8005778:	46bd      	mov	sp, r7
 800577a:	bd80      	pop	{r7, pc}

0800577c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800577c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005780:	b0c0      	sub	sp, #256	; 0x100
 8005782:	af00      	add	r7, sp, #0
 8005784:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005788:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	691b      	ldr	r3, [r3, #16]
 8005790:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005794:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005798:	68d9      	ldr	r1, [r3, #12]
 800579a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800579e:	681a      	ldr	r2, [r3, #0]
 80057a0:	ea40 0301 	orr.w	r3, r0, r1
 80057a4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80057a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057aa:	689a      	ldr	r2, [r3, #8]
 80057ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057b0:	691b      	ldr	r3, [r3, #16]
 80057b2:	431a      	orrs	r2, r3
 80057b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057b8:	695b      	ldr	r3, [r3, #20]
 80057ba:	431a      	orrs	r2, r3
 80057bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057c0:	69db      	ldr	r3, [r3, #28]
 80057c2:	4313      	orrs	r3, r2
 80057c4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80057c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	68db      	ldr	r3, [r3, #12]
 80057d0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80057d4:	f021 010c 	bic.w	r1, r1, #12
 80057d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057dc:	681a      	ldr	r2, [r3, #0]
 80057de:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80057e2:	430b      	orrs	r3, r1
 80057e4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80057e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	695b      	ldr	r3, [r3, #20]
 80057ee:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80057f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057f6:	6999      	ldr	r1, [r3, #24]
 80057f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057fc:	681a      	ldr	r2, [r3, #0]
 80057fe:	ea40 0301 	orr.w	r3, r0, r1
 8005802:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005804:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005808:	681a      	ldr	r2, [r3, #0]
 800580a:	4b8f      	ldr	r3, [pc, #572]	; (8005a48 <UART_SetConfig+0x2cc>)
 800580c:	429a      	cmp	r2, r3
 800580e:	d005      	beq.n	800581c <UART_SetConfig+0xa0>
 8005810:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005814:	681a      	ldr	r2, [r3, #0]
 8005816:	4b8d      	ldr	r3, [pc, #564]	; (8005a4c <UART_SetConfig+0x2d0>)
 8005818:	429a      	cmp	r2, r3
 800581a:	d104      	bne.n	8005826 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800581c:	f7fd fc78 	bl	8003110 <HAL_RCC_GetPCLK2Freq>
 8005820:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005824:	e003      	b.n	800582e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005826:	f7fd fc5f 	bl	80030e8 <HAL_RCC_GetPCLK1Freq>
 800582a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800582e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005832:	69db      	ldr	r3, [r3, #28]
 8005834:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005838:	f040 810c 	bne.w	8005a54 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800583c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005840:	2200      	movs	r2, #0
 8005842:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005846:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800584a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800584e:	4622      	mov	r2, r4
 8005850:	462b      	mov	r3, r5
 8005852:	1891      	adds	r1, r2, r2
 8005854:	65b9      	str	r1, [r7, #88]	; 0x58
 8005856:	415b      	adcs	r3, r3
 8005858:	65fb      	str	r3, [r7, #92]	; 0x5c
 800585a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800585e:	4621      	mov	r1, r4
 8005860:	eb12 0801 	adds.w	r8, r2, r1
 8005864:	4629      	mov	r1, r5
 8005866:	eb43 0901 	adc.w	r9, r3, r1
 800586a:	f04f 0200 	mov.w	r2, #0
 800586e:	f04f 0300 	mov.w	r3, #0
 8005872:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005876:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800587a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800587e:	4690      	mov	r8, r2
 8005880:	4699      	mov	r9, r3
 8005882:	4623      	mov	r3, r4
 8005884:	eb18 0303 	adds.w	r3, r8, r3
 8005888:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800588c:	462b      	mov	r3, r5
 800588e:	eb49 0303 	adc.w	r3, r9, r3
 8005892:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005896:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	2200      	movs	r2, #0
 800589e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80058a2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80058a6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80058aa:	460b      	mov	r3, r1
 80058ac:	18db      	adds	r3, r3, r3
 80058ae:	653b      	str	r3, [r7, #80]	; 0x50
 80058b0:	4613      	mov	r3, r2
 80058b2:	eb42 0303 	adc.w	r3, r2, r3
 80058b6:	657b      	str	r3, [r7, #84]	; 0x54
 80058b8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80058bc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80058c0:	f7fb f9e2 	bl	8000c88 <__aeabi_uldivmod>
 80058c4:	4602      	mov	r2, r0
 80058c6:	460b      	mov	r3, r1
 80058c8:	4b61      	ldr	r3, [pc, #388]	; (8005a50 <UART_SetConfig+0x2d4>)
 80058ca:	fba3 2302 	umull	r2, r3, r3, r2
 80058ce:	095b      	lsrs	r3, r3, #5
 80058d0:	011c      	lsls	r4, r3, #4
 80058d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80058d6:	2200      	movs	r2, #0
 80058d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80058dc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80058e0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80058e4:	4642      	mov	r2, r8
 80058e6:	464b      	mov	r3, r9
 80058e8:	1891      	adds	r1, r2, r2
 80058ea:	64b9      	str	r1, [r7, #72]	; 0x48
 80058ec:	415b      	adcs	r3, r3
 80058ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80058f0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80058f4:	4641      	mov	r1, r8
 80058f6:	eb12 0a01 	adds.w	sl, r2, r1
 80058fa:	4649      	mov	r1, r9
 80058fc:	eb43 0b01 	adc.w	fp, r3, r1
 8005900:	f04f 0200 	mov.w	r2, #0
 8005904:	f04f 0300 	mov.w	r3, #0
 8005908:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800590c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005910:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005914:	4692      	mov	sl, r2
 8005916:	469b      	mov	fp, r3
 8005918:	4643      	mov	r3, r8
 800591a:	eb1a 0303 	adds.w	r3, sl, r3
 800591e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005922:	464b      	mov	r3, r9
 8005924:	eb4b 0303 	adc.w	r3, fp, r3
 8005928:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800592c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	2200      	movs	r2, #0
 8005934:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005938:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800593c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005940:	460b      	mov	r3, r1
 8005942:	18db      	adds	r3, r3, r3
 8005944:	643b      	str	r3, [r7, #64]	; 0x40
 8005946:	4613      	mov	r3, r2
 8005948:	eb42 0303 	adc.w	r3, r2, r3
 800594c:	647b      	str	r3, [r7, #68]	; 0x44
 800594e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005952:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005956:	f7fb f997 	bl	8000c88 <__aeabi_uldivmod>
 800595a:	4602      	mov	r2, r0
 800595c:	460b      	mov	r3, r1
 800595e:	4611      	mov	r1, r2
 8005960:	4b3b      	ldr	r3, [pc, #236]	; (8005a50 <UART_SetConfig+0x2d4>)
 8005962:	fba3 2301 	umull	r2, r3, r3, r1
 8005966:	095b      	lsrs	r3, r3, #5
 8005968:	2264      	movs	r2, #100	; 0x64
 800596a:	fb02 f303 	mul.w	r3, r2, r3
 800596e:	1acb      	subs	r3, r1, r3
 8005970:	00db      	lsls	r3, r3, #3
 8005972:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005976:	4b36      	ldr	r3, [pc, #216]	; (8005a50 <UART_SetConfig+0x2d4>)
 8005978:	fba3 2302 	umull	r2, r3, r3, r2
 800597c:	095b      	lsrs	r3, r3, #5
 800597e:	005b      	lsls	r3, r3, #1
 8005980:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005984:	441c      	add	r4, r3
 8005986:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800598a:	2200      	movs	r2, #0
 800598c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005990:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005994:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005998:	4642      	mov	r2, r8
 800599a:	464b      	mov	r3, r9
 800599c:	1891      	adds	r1, r2, r2
 800599e:	63b9      	str	r1, [r7, #56]	; 0x38
 80059a0:	415b      	adcs	r3, r3
 80059a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059a4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80059a8:	4641      	mov	r1, r8
 80059aa:	1851      	adds	r1, r2, r1
 80059ac:	6339      	str	r1, [r7, #48]	; 0x30
 80059ae:	4649      	mov	r1, r9
 80059b0:	414b      	adcs	r3, r1
 80059b2:	637b      	str	r3, [r7, #52]	; 0x34
 80059b4:	f04f 0200 	mov.w	r2, #0
 80059b8:	f04f 0300 	mov.w	r3, #0
 80059bc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80059c0:	4659      	mov	r1, fp
 80059c2:	00cb      	lsls	r3, r1, #3
 80059c4:	4651      	mov	r1, sl
 80059c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80059ca:	4651      	mov	r1, sl
 80059cc:	00ca      	lsls	r2, r1, #3
 80059ce:	4610      	mov	r0, r2
 80059d0:	4619      	mov	r1, r3
 80059d2:	4603      	mov	r3, r0
 80059d4:	4642      	mov	r2, r8
 80059d6:	189b      	adds	r3, r3, r2
 80059d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80059dc:	464b      	mov	r3, r9
 80059de:	460a      	mov	r2, r1
 80059e0:	eb42 0303 	adc.w	r3, r2, r3
 80059e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80059e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	2200      	movs	r2, #0
 80059f0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80059f4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80059f8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80059fc:	460b      	mov	r3, r1
 80059fe:	18db      	adds	r3, r3, r3
 8005a00:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a02:	4613      	mov	r3, r2
 8005a04:	eb42 0303 	adc.w	r3, r2, r3
 8005a08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a0a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005a0e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005a12:	f7fb f939 	bl	8000c88 <__aeabi_uldivmod>
 8005a16:	4602      	mov	r2, r0
 8005a18:	460b      	mov	r3, r1
 8005a1a:	4b0d      	ldr	r3, [pc, #52]	; (8005a50 <UART_SetConfig+0x2d4>)
 8005a1c:	fba3 1302 	umull	r1, r3, r3, r2
 8005a20:	095b      	lsrs	r3, r3, #5
 8005a22:	2164      	movs	r1, #100	; 0x64
 8005a24:	fb01 f303 	mul.w	r3, r1, r3
 8005a28:	1ad3      	subs	r3, r2, r3
 8005a2a:	00db      	lsls	r3, r3, #3
 8005a2c:	3332      	adds	r3, #50	; 0x32
 8005a2e:	4a08      	ldr	r2, [pc, #32]	; (8005a50 <UART_SetConfig+0x2d4>)
 8005a30:	fba2 2303 	umull	r2, r3, r2, r3
 8005a34:	095b      	lsrs	r3, r3, #5
 8005a36:	f003 0207 	and.w	r2, r3, #7
 8005a3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4422      	add	r2, r4
 8005a42:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005a44:	e105      	b.n	8005c52 <UART_SetConfig+0x4d6>
 8005a46:	bf00      	nop
 8005a48:	40011000 	.word	0x40011000
 8005a4c:	40011400 	.word	0x40011400
 8005a50:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005a54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a58:	2200      	movs	r2, #0
 8005a5a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005a5e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005a62:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005a66:	4642      	mov	r2, r8
 8005a68:	464b      	mov	r3, r9
 8005a6a:	1891      	adds	r1, r2, r2
 8005a6c:	6239      	str	r1, [r7, #32]
 8005a6e:	415b      	adcs	r3, r3
 8005a70:	627b      	str	r3, [r7, #36]	; 0x24
 8005a72:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005a76:	4641      	mov	r1, r8
 8005a78:	1854      	adds	r4, r2, r1
 8005a7a:	4649      	mov	r1, r9
 8005a7c:	eb43 0501 	adc.w	r5, r3, r1
 8005a80:	f04f 0200 	mov.w	r2, #0
 8005a84:	f04f 0300 	mov.w	r3, #0
 8005a88:	00eb      	lsls	r3, r5, #3
 8005a8a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005a8e:	00e2      	lsls	r2, r4, #3
 8005a90:	4614      	mov	r4, r2
 8005a92:	461d      	mov	r5, r3
 8005a94:	4643      	mov	r3, r8
 8005a96:	18e3      	adds	r3, r4, r3
 8005a98:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005a9c:	464b      	mov	r3, r9
 8005a9e:	eb45 0303 	adc.w	r3, r5, r3
 8005aa2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005aa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005aaa:	685b      	ldr	r3, [r3, #4]
 8005aac:	2200      	movs	r2, #0
 8005aae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005ab2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005ab6:	f04f 0200 	mov.w	r2, #0
 8005aba:	f04f 0300 	mov.w	r3, #0
 8005abe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005ac2:	4629      	mov	r1, r5
 8005ac4:	008b      	lsls	r3, r1, #2
 8005ac6:	4621      	mov	r1, r4
 8005ac8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005acc:	4621      	mov	r1, r4
 8005ace:	008a      	lsls	r2, r1, #2
 8005ad0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005ad4:	f7fb f8d8 	bl	8000c88 <__aeabi_uldivmod>
 8005ad8:	4602      	mov	r2, r0
 8005ada:	460b      	mov	r3, r1
 8005adc:	4b60      	ldr	r3, [pc, #384]	; (8005c60 <UART_SetConfig+0x4e4>)
 8005ade:	fba3 2302 	umull	r2, r3, r3, r2
 8005ae2:	095b      	lsrs	r3, r3, #5
 8005ae4:	011c      	lsls	r4, r3, #4
 8005ae6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005aea:	2200      	movs	r2, #0
 8005aec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005af0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005af4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005af8:	4642      	mov	r2, r8
 8005afa:	464b      	mov	r3, r9
 8005afc:	1891      	adds	r1, r2, r2
 8005afe:	61b9      	str	r1, [r7, #24]
 8005b00:	415b      	adcs	r3, r3
 8005b02:	61fb      	str	r3, [r7, #28]
 8005b04:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005b08:	4641      	mov	r1, r8
 8005b0a:	1851      	adds	r1, r2, r1
 8005b0c:	6139      	str	r1, [r7, #16]
 8005b0e:	4649      	mov	r1, r9
 8005b10:	414b      	adcs	r3, r1
 8005b12:	617b      	str	r3, [r7, #20]
 8005b14:	f04f 0200 	mov.w	r2, #0
 8005b18:	f04f 0300 	mov.w	r3, #0
 8005b1c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005b20:	4659      	mov	r1, fp
 8005b22:	00cb      	lsls	r3, r1, #3
 8005b24:	4651      	mov	r1, sl
 8005b26:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005b2a:	4651      	mov	r1, sl
 8005b2c:	00ca      	lsls	r2, r1, #3
 8005b2e:	4610      	mov	r0, r2
 8005b30:	4619      	mov	r1, r3
 8005b32:	4603      	mov	r3, r0
 8005b34:	4642      	mov	r2, r8
 8005b36:	189b      	adds	r3, r3, r2
 8005b38:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005b3c:	464b      	mov	r3, r9
 8005b3e:	460a      	mov	r2, r1
 8005b40:	eb42 0303 	adc.w	r3, r2, r3
 8005b44:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005b48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b4c:	685b      	ldr	r3, [r3, #4]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	67bb      	str	r3, [r7, #120]	; 0x78
 8005b52:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005b54:	f04f 0200 	mov.w	r2, #0
 8005b58:	f04f 0300 	mov.w	r3, #0
 8005b5c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005b60:	4649      	mov	r1, r9
 8005b62:	008b      	lsls	r3, r1, #2
 8005b64:	4641      	mov	r1, r8
 8005b66:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005b6a:	4641      	mov	r1, r8
 8005b6c:	008a      	lsls	r2, r1, #2
 8005b6e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005b72:	f7fb f889 	bl	8000c88 <__aeabi_uldivmod>
 8005b76:	4602      	mov	r2, r0
 8005b78:	460b      	mov	r3, r1
 8005b7a:	4b39      	ldr	r3, [pc, #228]	; (8005c60 <UART_SetConfig+0x4e4>)
 8005b7c:	fba3 1302 	umull	r1, r3, r3, r2
 8005b80:	095b      	lsrs	r3, r3, #5
 8005b82:	2164      	movs	r1, #100	; 0x64
 8005b84:	fb01 f303 	mul.w	r3, r1, r3
 8005b88:	1ad3      	subs	r3, r2, r3
 8005b8a:	011b      	lsls	r3, r3, #4
 8005b8c:	3332      	adds	r3, #50	; 0x32
 8005b8e:	4a34      	ldr	r2, [pc, #208]	; (8005c60 <UART_SetConfig+0x4e4>)
 8005b90:	fba2 2303 	umull	r2, r3, r2, r3
 8005b94:	095b      	lsrs	r3, r3, #5
 8005b96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005b9a:	441c      	add	r4, r3
 8005b9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	673b      	str	r3, [r7, #112]	; 0x70
 8005ba4:	677a      	str	r2, [r7, #116]	; 0x74
 8005ba6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005baa:	4642      	mov	r2, r8
 8005bac:	464b      	mov	r3, r9
 8005bae:	1891      	adds	r1, r2, r2
 8005bb0:	60b9      	str	r1, [r7, #8]
 8005bb2:	415b      	adcs	r3, r3
 8005bb4:	60fb      	str	r3, [r7, #12]
 8005bb6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005bba:	4641      	mov	r1, r8
 8005bbc:	1851      	adds	r1, r2, r1
 8005bbe:	6039      	str	r1, [r7, #0]
 8005bc0:	4649      	mov	r1, r9
 8005bc2:	414b      	adcs	r3, r1
 8005bc4:	607b      	str	r3, [r7, #4]
 8005bc6:	f04f 0200 	mov.w	r2, #0
 8005bca:	f04f 0300 	mov.w	r3, #0
 8005bce:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005bd2:	4659      	mov	r1, fp
 8005bd4:	00cb      	lsls	r3, r1, #3
 8005bd6:	4651      	mov	r1, sl
 8005bd8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005bdc:	4651      	mov	r1, sl
 8005bde:	00ca      	lsls	r2, r1, #3
 8005be0:	4610      	mov	r0, r2
 8005be2:	4619      	mov	r1, r3
 8005be4:	4603      	mov	r3, r0
 8005be6:	4642      	mov	r2, r8
 8005be8:	189b      	adds	r3, r3, r2
 8005bea:	66bb      	str	r3, [r7, #104]	; 0x68
 8005bec:	464b      	mov	r3, r9
 8005bee:	460a      	mov	r2, r1
 8005bf0:	eb42 0303 	adc.w	r3, r2, r3
 8005bf4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005bf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bfa:	685b      	ldr	r3, [r3, #4]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	663b      	str	r3, [r7, #96]	; 0x60
 8005c00:	667a      	str	r2, [r7, #100]	; 0x64
 8005c02:	f04f 0200 	mov.w	r2, #0
 8005c06:	f04f 0300 	mov.w	r3, #0
 8005c0a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005c0e:	4649      	mov	r1, r9
 8005c10:	008b      	lsls	r3, r1, #2
 8005c12:	4641      	mov	r1, r8
 8005c14:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005c18:	4641      	mov	r1, r8
 8005c1a:	008a      	lsls	r2, r1, #2
 8005c1c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005c20:	f7fb f832 	bl	8000c88 <__aeabi_uldivmod>
 8005c24:	4602      	mov	r2, r0
 8005c26:	460b      	mov	r3, r1
 8005c28:	4b0d      	ldr	r3, [pc, #52]	; (8005c60 <UART_SetConfig+0x4e4>)
 8005c2a:	fba3 1302 	umull	r1, r3, r3, r2
 8005c2e:	095b      	lsrs	r3, r3, #5
 8005c30:	2164      	movs	r1, #100	; 0x64
 8005c32:	fb01 f303 	mul.w	r3, r1, r3
 8005c36:	1ad3      	subs	r3, r2, r3
 8005c38:	011b      	lsls	r3, r3, #4
 8005c3a:	3332      	adds	r3, #50	; 0x32
 8005c3c:	4a08      	ldr	r2, [pc, #32]	; (8005c60 <UART_SetConfig+0x4e4>)
 8005c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8005c42:	095b      	lsrs	r3, r3, #5
 8005c44:	f003 020f 	and.w	r2, r3, #15
 8005c48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4422      	add	r2, r4
 8005c50:	609a      	str	r2, [r3, #8]
}
 8005c52:	bf00      	nop
 8005c54:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c5e:	bf00      	nop
 8005c60:	51eb851f 	.word	0x51eb851f

08005c64 <__errno>:
 8005c64:	4b01      	ldr	r3, [pc, #4]	; (8005c6c <__errno+0x8>)
 8005c66:	6818      	ldr	r0, [r3, #0]
 8005c68:	4770      	bx	lr
 8005c6a:	bf00      	nop
 8005c6c:	2000000c 	.word	0x2000000c

08005c70 <__libc_init_array>:
 8005c70:	b570      	push	{r4, r5, r6, lr}
 8005c72:	4d0d      	ldr	r5, [pc, #52]	; (8005ca8 <__libc_init_array+0x38>)
 8005c74:	4c0d      	ldr	r4, [pc, #52]	; (8005cac <__libc_init_array+0x3c>)
 8005c76:	1b64      	subs	r4, r4, r5
 8005c78:	10a4      	asrs	r4, r4, #2
 8005c7a:	2600      	movs	r6, #0
 8005c7c:	42a6      	cmp	r6, r4
 8005c7e:	d109      	bne.n	8005c94 <__libc_init_array+0x24>
 8005c80:	4d0b      	ldr	r5, [pc, #44]	; (8005cb0 <__libc_init_array+0x40>)
 8005c82:	4c0c      	ldr	r4, [pc, #48]	; (8005cb4 <__libc_init_array+0x44>)
 8005c84:	f002 fe8a 	bl	800899c <_init>
 8005c88:	1b64      	subs	r4, r4, r5
 8005c8a:	10a4      	asrs	r4, r4, #2
 8005c8c:	2600      	movs	r6, #0
 8005c8e:	42a6      	cmp	r6, r4
 8005c90:	d105      	bne.n	8005c9e <__libc_init_array+0x2e>
 8005c92:	bd70      	pop	{r4, r5, r6, pc}
 8005c94:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c98:	4798      	blx	r3
 8005c9a:	3601      	adds	r6, #1
 8005c9c:	e7ee      	b.n	8005c7c <__libc_init_array+0xc>
 8005c9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ca2:	4798      	blx	r3
 8005ca4:	3601      	adds	r6, #1
 8005ca6:	e7f2      	b.n	8005c8e <__libc_init_array+0x1e>
 8005ca8:	08008dc4 	.word	0x08008dc4
 8005cac:	08008dc4 	.word	0x08008dc4
 8005cb0:	08008dc4 	.word	0x08008dc4
 8005cb4:	08008dc8 	.word	0x08008dc8

08005cb8 <memset>:
 8005cb8:	4402      	add	r2, r0
 8005cba:	4603      	mov	r3, r0
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d100      	bne.n	8005cc2 <memset+0xa>
 8005cc0:	4770      	bx	lr
 8005cc2:	f803 1b01 	strb.w	r1, [r3], #1
 8005cc6:	e7f9      	b.n	8005cbc <memset+0x4>

08005cc8 <__cvt>:
 8005cc8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ccc:	ec55 4b10 	vmov	r4, r5, d0
 8005cd0:	2d00      	cmp	r5, #0
 8005cd2:	460e      	mov	r6, r1
 8005cd4:	4619      	mov	r1, r3
 8005cd6:	462b      	mov	r3, r5
 8005cd8:	bfbb      	ittet	lt
 8005cda:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005cde:	461d      	movlt	r5, r3
 8005ce0:	2300      	movge	r3, #0
 8005ce2:	232d      	movlt	r3, #45	; 0x2d
 8005ce4:	700b      	strb	r3, [r1, #0]
 8005ce6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005ce8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005cec:	4691      	mov	r9, r2
 8005cee:	f023 0820 	bic.w	r8, r3, #32
 8005cf2:	bfbc      	itt	lt
 8005cf4:	4622      	movlt	r2, r4
 8005cf6:	4614      	movlt	r4, r2
 8005cf8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005cfc:	d005      	beq.n	8005d0a <__cvt+0x42>
 8005cfe:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005d02:	d100      	bne.n	8005d06 <__cvt+0x3e>
 8005d04:	3601      	adds	r6, #1
 8005d06:	2102      	movs	r1, #2
 8005d08:	e000      	b.n	8005d0c <__cvt+0x44>
 8005d0a:	2103      	movs	r1, #3
 8005d0c:	ab03      	add	r3, sp, #12
 8005d0e:	9301      	str	r3, [sp, #4]
 8005d10:	ab02      	add	r3, sp, #8
 8005d12:	9300      	str	r3, [sp, #0]
 8005d14:	ec45 4b10 	vmov	d0, r4, r5
 8005d18:	4653      	mov	r3, sl
 8005d1a:	4632      	mov	r2, r6
 8005d1c:	f000 fee0 	bl	8006ae0 <_dtoa_r>
 8005d20:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005d24:	4607      	mov	r7, r0
 8005d26:	d102      	bne.n	8005d2e <__cvt+0x66>
 8005d28:	f019 0f01 	tst.w	r9, #1
 8005d2c:	d022      	beq.n	8005d74 <__cvt+0xac>
 8005d2e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005d32:	eb07 0906 	add.w	r9, r7, r6
 8005d36:	d110      	bne.n	8005d5a <__cvt+0x92>
 8005d38:	783b      	ldrb	r3, [r7, #0]
 8005d3a:	2b30      	cmp	r3, #48	; 0x30
 8005d3c:	d10a      	bne.n	8005d54 <__cvt+0x8c>
 8005d3e:	2200      	movs	r2, #0
 8005d40:	2300      	movs	r3, #0
 8005d42:	4620      	mov	r0, r4
 8005d44:	4629      	mov	r1, r5
 8005d46:	f7fa fedf 	bl	8000b08 <__aeabi_dcmpeq>
 8005d4a:	b918      	cbnz	r0, 8005d54 <__cvt+0x8c>
 8005d4c:	f1c6 0601 	rsb	r6, r6, #1
 8005d50:	f8ca 6000 	str.w	r6, [sl]
 8005d54:	f8da 3000 	ldr.w	r3, [sl]
 8005d58:	4499      	add	r9, r3
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	4620      	mov	r0, r4
 8005d60:	4629      	mov	r1, r5
 8005d62:	f7fa fed1 	bl	8000b08 <__aeabi_dcmpeq>
 8005d66:	b108      	cbz	r0, 8005d6c <__cvt+0xa4>
 8005d68:	f8cd 900c 	str.w	r9, [sp, #12]
 8005d6c:	2230      	movs	r2, #48	; 0x30
 8005d6e:	9b03      	ldr	r3, [sp, #12]
 8005d70:	454b      	cmp	r3, r9
 8005d72:	d307      	bcc.n	8005d84 <__cvt+0xbc>
 8005d74:	9b03      	ldr	r3, [sp, #12]
 8005d76:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005d78:	1bdb      	subs	r3, r3, r7
 8005d7a:	4638      	mov	r0, r7
 8005d7c:	6013      	str	r3, [r2, #0]
 8005d7e:	b004      	add	sp, #16
 8005d80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d84:	1c59      	adds	r1, r3, #1
 8005d86:	9103      	str	r1, [sp, #12]
 8005d88:	701a      	strb	r2, [r3, #0]
 8005d8a:	e7f0      	b.n	8005d6e <__cvt+0xa6>

08005d8c <__exponent>:
 8005d8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005d8e:	4603      	mov	r3, r0
 8005d90:	2900      	cmp	r1, #0
 8005d92:	bfb8      	it	lt
 8005d94:	4249      	neglt	r1, r1
 8005d96:	f803 2b02 	strb.w	r2, [r3], #2
 8005d9a:	bfb4      	ite	lt
 8005d9c:	222d      	movlt	r2, #45	; 0x2d
 8005d9e:	222b      	movge	r2, #43	; 0x2b
 8005da0:	2909      	cmp	r1, #9
 8005da2:	7042      	strb	r2, [r0, #1]
 8005da4:	dd2a      	ble.n	8005dfc <__exponent+0x70>
 8005da6:	f10d 0407 	add.w	r4, sp, #7
 8005daa:	46a4      	mov	ip, r4
 8005dac:	270a      	movs	r7, #10
 8005dae:	46a6      	mov	lr, r4
 8005db0:	460a      	mov	r2, r1
 8005db2:	fb91 f6f7 	sdiv	r6, r1, r7
 8005db6:	fb07 1516 	mls	r5, r7, r6, r1
 8005dba:	3530      	adds	r5, #48	; 0x30
 8005dbc:	2a63      	cmp	r2, #99	; 0x63
 8005dbe:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8005dc2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005dc6:	4631      	mov	r1, r6
 8005dc8:	dcf1      	bgt.n	8005dae <__exponent+0x22>
 8005dca:	3130      	adds	r1, #48	; 0x30
 8005dcc:	f1ae 0502 	sub.w	r5, lr, #2
 8005dd0:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005dd4:	1c44      	adds	r4, r0, #1
 8005dd6:	4629      	mov	r1, r5
 8005dd8:	4561      	cmp	r1, ip
 8005dda:	d30a      	bcc.n	8005df2 <__exponent+0x66>
 8005ddc:	f10d 0209 	add.w	r2, sp, #9
 8005de0:	eba2 020e 	sub.w	r2, r2, lr
 8005de4:	4565      	cmp	r5, ip
 8005de6:	bf88      	it	hi
 8005de8:	2200      	movhi	r2, #0
 8005dea:	4413      	add	r3, r2
 8005dec:	1a18      	subs	r0, r3, r0
 8005dee:	b003      	add	sp, #12
 8005df0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005df2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005df6:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005dfa:	e7ed      	b.n	8005dd8 <__exponent+0x4c>
 8005dfc:	2330      	movs	r3, #48	; 0x30
 8005dfe:	3130      	adds	r1, #48	; 0x30
 8005e00:	7083      	strb	r3, [r0, #2]
 8005e02:	70c1      	strb	r1, [r0, #3]
 8005e04:	1d03      	adds	r3, r0, #4
 8005e06:	e7f1      	b.n	8005dec <__exponent+0x60>

08005e08 <_printf_float>:
 8005e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e0c:	ed2d 8b02 	vpush	{d8}
 8005e10:	b08d      	sub	sp, #52	; 0x34
 8005e12:	460c      	mov	r4, r1
 8005e14:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005e18:	4616      	mov	r6, r2
 8005e1a:	461f      	mov	r7, r3
 8005e1c:	4605      	mov	r5, r0
 8005e1e:	f001 fe05 	bl	8007a2c <_localeconv_r>
 8005e22:	f8d0 a000 	ldr.w	sl, [r0]
 8005e26:	4650      	mov	r0, sl
 8005e28:	f7fa f9f2 	bl	8000210 <strlen>
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	930a      	str	r3, [sp, #40]	; 0x28
 8005e30:	6823      	ldr	r3, [r4, #0]
 8005e32:	9305      	str	r3, [sp, #20]
 8005e34:	f8d8 3000 	ldr.w	r3, [r8]
 8005e38:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005e3c:	3307      	adds	r3, #7
 8005e3e:	f023 0307 	bic.w	r3, r3, #7
 8005e42:	f103 0208 	add.w	r2, r3, #8
 8005e46:	f8c8 2000 	str.w	r2, [r8]
 8005e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e4e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005e52:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005e56:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005e5a:	9307      	str	r3, [sp, #28]
 8005e5c:	f8cd 8018 	str.w	r8, [sp, #24]
 8005e60:	ee08 0a10 	vmov	s16, r0
 8005e64:	4b9f      	ldr	r3, [pc, #636]	; (80060e4 <_printf_float+0x2dc>)
 8005e66:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005e6a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005e6e:	f7fa fe7d 	bl	8000b6c <__aeabi_dcmpun>
 8005e72:	bb88      	cbnz	r0, 8005ed8 <_printf_float+0xd0>
 8005e74:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005e78:	4b9a      	ldr	r3, [pc, #616]	; (80060e4 <_printf_float+0x2dc>)
 8005e7a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005e7e:	f7fa fe57 	bl	8000b30 <__aeabi_dcmple>
 8005e82:	bb48      	cbnz	r0, 8005ed8 <_printf_float+0xd0>
 8005e84:	2200      	movs	r2, #0
 8005e86:	2300      	movs	r3, #0
 8005e88:	4640      	mov	r0, r8
 8005e8a:	4649      	mov	r1, r9
 8005e8c:	f7fa fe46 	bl	8000b1c <__aeabi_dcmplt>
 8005e90:	b110      	cbz	r0, 8005e98 <_printf_float+0x90>
 8005e92:	232d      	movs	r3, #45	; 0x2d
 8005e94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e98:	4b93      	ldr	r3, [pc, #588]	; (80060e8 <_printf_float+0x2e0>)
 8005e9a:	4894      	ldr	r0, [pc, #592]	; (80060ec <_printf_float+0x2e4>)
 8005e9c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005ea0:	bf94      	ite	ls
 8005ea2:	4698      	movls	r8, r3
 8005ea4:	4680      	movhi	r8, r0
 8005ea6:	2303      	movs	r3, #3
 8005ea8:	6123      	str	r3, [r4, #16]
 8005eaa:	9b05      	ldr	r3, [sp, #20]
 8005eac:	f023 0204 	bic.w	r2, r3, #4
 8005eb0:	6022      	str	r2, [r4, #0]
 8005eb2:	f04f 0900 	mov.w	r9, #0
 8005eb6:	9700      	str	r7, [sp, #0]
 8005eb8:	4633      	mov	r3, r6
 8005eba:	aa0b      	add	r2, sp, #44	; 0x2c
 8005ebc:	4621      	mov	r1, r4
 8005ebe:	4628      	mov	r0, r5
 8005ec0:	f000 f9d8 	bl	8006274 <_printf_common>
 8005ec4:	3001      	adds	r0, #1
 8005ec6:	f040 8090 	bne.w	8005fea <_printf_float+0x1e2>
 8005eca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005ece:	b00d      	add	sp, #52	; 0x34
 8005ed0:	ecbd 8b02 	vpop	{d8}
 8005ed4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ed8:	4642      	mov	r2, r8
 8005eda:	464b      	mov	r3, r9
 8005edc:	4640      	mov	r0, r8
 8005ede:	4649      	mov	r1, r9
 8005ee0:	f7fa fe44 	bl	8000b6c <__aeabi_dcmpun>
 8005ee4:	b140      	cbz	r0, 8005ef8 <_printf_float+0xf0>
 8005ee6:	464b      	mov	r3, r9
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	bfbc      	itt	lt
 8005eec:	232d      	movlt	r3, #45	; 0x2d
 8005eee:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005ef2:	487f      	ldr	r0, [pc, #508]	; (80060f0 <_printf_float+0x2e8>)
 8005ef4:	4b7f      	ldr	r3, [pc, #508]	; (80060f4 <_printf_float+0x2ec>)
 8005ef6:	e7d1      	b.n	8005e9c <_printf_float+0x94>
 8005ef8:	6863      	ldr	r3, [r4, #4]
 8005efa:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005efe:	9206      	str	r2, [sp, #24]
 8005f00:	1c5a      	adds	r2, r3, #1
 8005f02:	d13f      	bne.n	8005f84 <_printf_float+0x17c>
 8005f04:	2306      	movs	r3, #6
 8005f06:	6063      	str	r3, [r4, #4]
 8005f08:	9b05      	ldr	r3, [sp, #20]
 8005f0a:	6861      	ldr	r1, [r4, #4]
 8005f0c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005f10:	2300      	movs	r3, #0
 8005f12:	9303      	str	r3, [sp, #12]
 8005f14:	ab0a      	add	r3, sp, #40	; 0x28
 8005f16:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005f1a:	ab09      	add	r3, sp, #36	; 0x24
 8005f1c:	ec49 8b10 	vmov	d0, r8, r9
 8005f20:	9300      	str	r3, [sp, #0]
 8005f22:	6022      	str	r2, [r4, #0]
 8005f24:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005f28:	4628      	mov	r0, r5
 8005f2a:	f7ff fecd 	bl	8005cc8 <__cvt>
 8005f2e:	9b06      	ldr	r3, [sp, #24]
 8005f30:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005f32:	2b47      	cmp	r3, #71	; 0x47
 8005f34:	4680      	mov	r8, r0
 8005f36:	d108      	bne.n	8005f4a <_printf_float+0x142>
 8005f38:	1cc8      	adds	r0, r1, #3
 8005f3a:	db02      	blt.n	8005f42 <_printf_float+0x13a>
 8005f3c:	6863      	ldr	r3, [r4, #4]
 8005f3e:	4299      	cmp	r1, r3
 8005f40:	dd41      	ble.n	8005fc6 <_printf_float+0x1be>
 8005f42:	f1ab 0b02 	sub.w	fp, fp, #2
 8005f46:	fa5f fb8b 	uxtb.w	fp, fp
 8005f4a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005f4e:	d820      	bhi.n	8005f92 <_printf_float+0x18a>
 8005f50:	3901      	subs	r1, #1
 8005f52:	465a      	mov	r2, fp
 8005f54:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005f58:	9109      	str	r1, [sp, #36]	; 0x24
 8005f5a:	f7ff ff17 	bl	8005d8c <__exponent>
 8005f5e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005f60:	1813      	adds	r3, r2, r0
 8005f62:	2a01      	cmp	r2, #1
 8005f64:	4681      	mov	r9, r0
 8005f66:	6123      	str	r3, [r4, #16]
 8005f68:	dc02      	bgt.n	8005f70 <_printf_float+0x168>
 8005f6a:	6822      	ldr	r2, [r4, #0]
 8005f6c:	07d2      	lsls	r2, r2, #31
 8005f6e:	d501      	bpl.n	8005f74 <_printf_float+0x16c>
 8005f70:	3301      	adds	r3, #1
 8005f72:	6123      	str	r3, [r4, #16]
 8005f74:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d09c      	beq.n	8005eb6 <_printf_float+0xae>
 8005f7c:	232d      	movs	r3, #45	; 0x2d
 8005f7e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f82:	e798      	b.n	8005eb6 <_printf_float+0xae>
 8005f84:	9a06      	ldr	r2, [sp, #24]
 8005f86:	2a47      	cmp	r2, #71	; 0x47
 8005f88:	d1be      	bne.n	8005f08 <_printf_float+0x100>
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d1bc      	bne.n	8005f08 <_printf_float+0x100>
 8005f8e:	2301      	movs	r3, #1
 8005f90:	e7b9      	b.n	8005f06 <_printf_float+0xfe>
 8005f92:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005f96:	d118      	bne.n	8005fca <_printf_float+0x1c2>
 8005f98:	2900      	cmp	r1, #0
 8005f9a:	6863      	ldr	r3, [r4, #4]
 8005f9c:	dd0b      	ble.n	8005fb6 <_printf_float+0x1ae>
 8005f9e:	6121      	str	r1, [r4, #16]
 8005fa0:	b913      	cbnz	r3, 8005fa8 <_printf_float+0x1a0>
 8005fa2:	6822      	ldr	r2, [r4, #0]
 8005fa4:	07d0      	lsls	r0, r2, #31
 8005fa6:	d502      	bpl.n	8005fae <_printf_float+0x1a6>
 8005fa8:	3301      	adds	r3, #1
 8005faa:	440b      	add	r3, r1
 8005fac:	6123      	str	r3, [r4, #16]
 8005fae:	65a1      	str	r1, [r4, #88]	; 0x58
 8005fb0:	f04f 0900 	mov.w	r9, #0
 8005fb4:	e7de      	b.n	8005f74 <_printf_float+0x16c>
 8005fb6:	b913      	cbnz	r3, 8005fbe <_printf_float+0x1b6>
 8005fb8:	6822      	ldr	r2, [r4, #0]
 8005fba:	07d2      	lsls	r2, r2, #31
 8005fbc:	d501      	bpl.n	8005fc2 <_printf_float+0x1ba>
 8005fbe:	3302      	adds	r3, #2
 8005fc0:	e7f4      	b.n	8005fac <_printf_float+0x1a4>
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	e7f2      	b.n	8005fac <_printf_float+0x1a4>
 8005fc6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005fca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005fcc:	4299      	cmp	r1, r3
 8005fce:	db05      	blt.n	8005fdc <_printf_float+0x1d4>
 8005fd0:	6823      	ldr	r3, [r4, #0]
 8005fd2:	6121      	str	r1, [r4, #16]
 8005fd4:	07d8      	lsls	r0, r3, #31
 8005fd6:	d5ea      	bpl.n	8005fae <_printf_float+0x1a6>
 8005fd8:	1c4b      	adds	r3, r1, #1
 8005fda:	e7e7      	b.n	8005fac <_printf_float+0x1a4>
 8005fdc:	2900      	cmp	r1, #0
 8005fde:	bfd4      	ite	le
 8005fe0:	f1c1 0202 	rsble	r2, r1, #2
 8005fe4:	2201      	movgt	r2, #1
 8005fe6:	4413      	add	r3, r2
 8005fe8:	e7e0      	b.n	8005fac <_printf_float+0x1a4>
 8005fea:	6823      	ldr	r3, [r4, #0]
 8005fec:	055a      	lsls	r2, r3, #21
 8005fee:	d407      	bmi.n	8006000 <_printf_float+0x1f8>
 8005ff0:	6923      	ldr	r3, [r4, #16]
 8005ff2:	4642      	mov	r2, r8
 8005ff4:	4631      	mov	r1, r6
 8005ff6:	4628      	mov	r0, r5
 8005ff8:	47b8      	blx	r7
 8005ffa:	3001      	adds	r0, #1
 8005ffc:	d12c      	bne.n	8006058 <_printf_float+0x250>
 8005ffe:	e764      	b.n	8005eca <_printf_float+0xc2>
 8006000:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006004:	f240 80e0 	bls.w	80061c8 <_printf_float+0x3c0>
 8006008:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800600c:	2200      	movs	r2, #0
 800600e:	2300      	movs	r3, #0
 8006010:	f7fa fd7a 	bl	8000b08 <__aeabi_dcmpeq>
 8006014:	2800      	cmp	r0, #0
 8006016:	d034      	beq.n	8006082 <_printf_float+0x27a>
 8006018:	4a37      	ldr	r2, [pc, #220]	; (80060f8 <_printf_float+0x2f0>)
 800601a:	2301      	movs	r3, #1
 800601c:	4631      	mov	r1, r6
 800601e:	4628      	mov	r0, r5
 8006020:	47b8      	blx	r7
 8006022:	3001      	adds	r0, #1
 8006024:	f43f af51 	beq.w	8005eca <_printf_float+0xc2>
 8006028:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800602c:	429a      	cmp	r2, r3
 800602e:	db02      	blt.n	8006036 <_printf_float+0x22e>
 8006030:	6823      	ldr	r3, [r4, #0]
 8006032:	07d8      	lsls	r0, r3, #31
 8006034:	d510      	bpl.n	8006058 <_printf_float+0x250>
 8006036:	ee18 3a10 	vmov	r3, s16
 800603a:	4652      	mov	r2, sl
 800603c:	4631      	mov	r1, r6
 800603e:	4628      	mov	r0, r5
 8006040:	47b8      	blx	r7
 8006042:	3001      	adds	r0, #1
 8006044:	f43f af41 	beq.w	8005eca <_printf_float+0xc2>
 8006048:	f04f 0800 	mov.w	r8, #0
 800604c:	f104 091a 	add.w	r9, r4, #26
 8006050:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006052:	3b01      	subs	r3, #1
 8006054:	4543      	cmp	r3, r8
 8006056:	dc09      	bgt.n	800606c <_printf_float+0x264>
 8006058:	6823      	ldr	r3, [r4, #0]
 800605a:	079b      	lsls	r3, r3, #30
 800605c:	f100 8105 	bmi.w	800626a <_printf_float+0x462>
 8006060:	68e0      	ldr	r0, [r4, #12]
 8006062:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006064:	4298      	cmp	r0, r3
 8006066:	bfb8      	it	lt
 8006068:	4618      	movlt	r0, r3
 800606a:	e730      	b.n	8005ece <_printf_float+0xc6>
 800606c:	2301      	movs	r3, #1
 800606e:	464a      	mov	r2, r9
 8006070:	4631      	mov	r1, r6
 8006072:	4628      	mov	r0, r5
 8006074:	47b8      	blx	r7
 8006076:	3001      	adds	r0, #1
 8006078:	f43f af27 	beq.w	8005eca <_printf_float+0xc2>
 800607c:	f108 0801 	add.w	r8, r8, #1
 8006080:	e7e6      	b.n	8006050 <_printf_float+0x248>
 8006082:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006084:	2b00      	cmp	r3, #0
 8006086:	dc39      	bgt.n	80060fc <_printf_float+0x2f4>
 8006088:	4a1b      	ldr	r2, [pc, #108]	; (80060f8 <_printf_float+0x2f0>)
 800608a:	2301      	movs	r3, #1
 800608c:	4631      	mov	r1, r6
 800608e:	4628      	mov	r0, r5
 8006090:	47b8      	blx	r7
 8006092:	3001      	adds	r0, #1
 8006094:	f43f af19 	beq.w	8005eca <_printf_float+0xc2>
 8006098:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800609c:	4313      	orrs	r3, r2
 800609e:	d102      	bne.n	80060a6 <_printf_float+0x29e>
 80060a0:	6823      	ldr	r3, [r4, #0]
 80060a2:	07d9      	lsls	r1, r3, #31
 80060a4:	d5d8      	bpl.n	8006058 <_printf_float+0x250>
 80060a6:	ee18 3a10 	vmov	r3, s16
 80060aa:	4652      	mov	r2, sl
 80060ac:	4631      	mov	r1, r6
 80060ae:	4628      	mov	r0, r5
 80060b0:	47b8      	blx	r7
 80060b2:	3001      	adds	r0, #1
 80060b4:	f43f af09 	beq.w	8005eca <_printf_float+0xc2>
 80060b8:	f04f 0900 	mov.w	r9, #0
 80060bc:	f104 0a1a 	add.w	sl, r4, #26
 80060c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060c2:	425b      	negs	r3, r3
 80060c4:	454b      	cmp	r3, r9
 80060c6:	dc01      	bgt.n	80060cc <_printf_float+0x2c4>
 80060c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060ca:	e792      	b.n	8005ff2 <_printf_float+0x1ea>
 80060cc:	2301      	movs	r3, #1
 80060ce:	4652      	mov	r2, sl
 80060d0:	4631      	mov	r1, r6
 80060d2:	4628      	mov	r0, r5
 80060d4:	47b8      	blx	r7
 80060d6:	3001      	adds	r0, #1
 80060d8:	f43f aef7 	beq.w	8005eca <_printf_float+0xc2>
 80060dc:	f109 0901 	add.w	r9, r9, #1
 80060e0:	e7ee      	b.n	80060c0 <_printf_float+0x2b8>
 80060e2:	bf00      	nop
 80060e4:	7fefffff 	.word	0x7fefffff
 80060e8:	080089e4 	.word	0x080089e4
 80060ec:	080089e8 	.word	0x080089e8
 80060f0:	080089f0 	.word	0x080089f0
 80060f4:	080089ec 	.word	0x080089ec
 80060f8:	080089f4 	.word	0x080089f4
 80060fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80060fe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006100:	429a      	cmp	r2, r3
 8006102:	bfa8      	it	ge
 8006104:	461a      	movge	r2, r3
 8006106:	2a00      	cmp	r2, #0
 8006108:	4691      	mov	r9, r2
 800610a:	dc37      	bgt.n	800617c <_printf_float+0x374>
 800610c:	f04f 0b00 	mov.w	fp, #0
 8006110:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006114:	f104 021a 	add.w	r2, r4, #26
 8006118:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800611a:	9305      	str	r3, [sp, #20]
 800611c:	eba3 0309 	sub.w	r3, r3, r9
 8006120:	455b      	cmp	r3, fp
 8006122:	dc33      	bgt.n	800618c <_printf_float+0x384>
 8006124:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006128:	429a      	cmp	r2, r3
 800612a:	db3b      	blt.n	80061a4 <_printf_float+0x39c>
 800612c:	6823      	ldr	r3, [r4, #0]
 800612e:	07da      	lsls	r2, r3, #31
 8006130:	d438      	bmi.n	80061a4 <_printf_float+0x39c>
 8006132:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006134:	9a05      	ldr	r2, [sp, #20]
 8006136:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006138:	1a9a      	subs	r2, r3, r2
 800613a:	eba3 0901 	sub.w	r9, r3, r1
 800613e:	4591      	cmp	r9, r2
 8006140:	bfa8      	it	ge
 8006142:	4691      	movge	r9, r2
 8006144:	f1b9 0f00 	cmp.w	r9, #0
 8006148:	dc35      	bgt.n	80061b6 <_printf_float+0x3ae>
 800614a:	f04f 0800 	mov.w	r8, #0
 800614e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006152:	f104 0a1a 	add.w	sl, r4, #26
 8006156:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800615a:	1a9b      	subs	r3, r3, r2
 800615c:	eba3 0309 	sub.w	r3, r3, r9
 8006160:	4543      	cmp	r3, r8
 8006162:	f77f af79 	ble.w	8006058 <_printf_float+0x250>
 8006166:	2301      	movs	r3, #1
 8006168:	4652      	mov	r2, sl
 800616a:	4631      	mov	r1, r6
 800616c:	4628      	mov	r0, r5
 800616e:	47b8      	blx	r7
 8006170:	3001      	adds	r0, #1
 8006172:	f43f aeaa 	beq.w	8005eca <_printf_float+0xc2>
 8006176:	f108 0801 	add.w	r8, r8, #1
 800617a:	e7ec      	b.n	8006156 <_printf_float+0x34e>
 800617c:	4613      	mov	r3, r2
 800617e:	4631      	mov	r1, r6
 8006180:	4642      	mov	r2, r8
 8006182:	4628      	mov	r0, r5
 8006184:	47b8      	blx	r7
 8006186:	3001      	adds	r0, #1
 8006188:	d1c0      	bne.n	800610c <_printf_float+0x304>
 800618a:	e69e      	b.n	8005eca <_printf_float+0xc2>
 800618c:	2301      	movs	r3, #1
 800618e:	4631      	mov	r1, r6
 8006190:	4628      	mov	r0, r5
 8006192:	9205      	str	r2, [sp, #20]
 8006194:	47b8      	blx	r7
 8006196:	3001      	adds	r0, #1
 8006198:	f43f ae97 	beq.w	8005eca <_printf_float+0xc2>
 800619c:	9a05      	ldr	r2, [sp, #20]
 800619e:	f10b 0b01 	add.w	fp, fp, #1
 80061a2:	e7b9      	b.n	8006118 <_printf_float+0x310>
 80061a4:	ee18 3a10 	vmov	r3, s16
 80061a8:	4652      	mov	r2, sl
 80061aa:	4631      	mov	r1, r6
 80061ac:	4628      	mov	r0, r5
 80061ae:	47b8      	blx	r7
 80061b0:	3001      	adds	r0, #1
 80061b2:	d1be      	bne.n	8006132 <_printf_float+0x32a>
 80061b4:	e689      	b.n	8005eca <_printf_float+0xc2>
 80061b6:	9a05      	ldr	r2, [sp, #20]
 80061b8:	464b      	mov	r3, r9
 80061ba:	4442      	add	r2, r8
 80061bc:	4631      	mov	r1, r6
 80061be:	4628      	mov	r0, r5
 80061c0:	47b8      	blx	r7
 80061c2:	3001      	adds	r0, #1
 80061c4:	d1c1      	bne.n	800614a <_printf_float+0x342>
 80061c6:	e680      	b.n	8005eca <_printf_float+0xc2>
 80061c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80061ca:	2a01      	cmp	r2, #1
 80061cc:	dc01      	bgt.n	80061d2 <_printf_float+0x3ca>
 80061ce:	07db      	lsls	r3, r3, #31
 80061d0:	d538      	bpl.n	8006244 <_printf_float+0x43c>
 80061d2:	2301      	movs	r3, #1
 80061d4:	4642      	mov	r2, r8
 80061d6:	4631      	mov	r1, r6
 80061d8:	4628      	mov	r0, r5
 80061da:	47b8      	blx	r7
 80061dc:	3001      	adds	r0, #1
 80061de:	f43f ae74 	beq.w	8005eca <_printf_float+0xc2>
 80061e2:	ee18 3a10 	vmov	r3, s16
 80061e6:	4652      	mov	r2, sl
 80061e8:	4631      	mov	r1, r6
 80061ea:	4628      	mov	r0, r5
 80061ec:	47b8      	blx	r7
 80061ee:	3001      	adds	r0, #1
 80061f0:	f43f ae6b 	beq.w	8005eca <_printf_float+0xc2>
 80061f4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80061f8:	2200      	movs	r2, #0
 80061fa:	2300      	movs	r3, #0
 80061fc:	f7fa fc84 	bl	8000b08 <__aeabi_dcmpeq>
 8006200:	b9d8      	cbnz	r0, 800623a <_printf_float+0x432>
 8006202:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006204:	f108 0201 	add.w	r2, r8, #1
 8006208:	3b01      	subs	r3, #1
 800620a:	4631      	mov	r1, r6
 800620c:	4628      	mov	r0, r5
 800620e:	47b8      	blx	r7
 8006210:	3001      	adds	r0, #1
 8006212:	d10e      	bne.n	8006232 <_printf_float+0x42a>
 8006214:	e659      	b.n	8005eca <_printf_float+0xc2>
 8006216:	2301      	movs	r3, #1
 8006218:	4652      	mov	r2, sl
 800621a:	4631      	mov	r1, r6
 800621c:	4628      	mov	r0, r5
 800621e:	47b8      	blx	r7
 8006220:	3001      	adds	r0, #1
 8006222:	f43f ae52 	beq.w	8005eca <_printf_float+0xc2>
 8006226:	f108 0801 	add.w	r8, r8, #1
 800622a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800622c:	3b01      	subs	r3, #1
 800622e:	4543      	cmp	r3, r8
 8006230:	dcf1      	bgt.n	8006216 <_printf_float+0x40e>
 8006232:	464b      	mov	r3, r9
 8006234:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006238:	e6dc      	b.n	8005ff4 <_printf_float+0x1ec>
 800623a:	f04f 0800 	mov.w	r8, #0
 800623e:	f104 0a1a 	add.w	sl, r4, #26
 8006242:	e7f2      	b.n	800622a <_printf_float+0x422>
 8006244:	2301      	movs	r3, #1
 8006246:	4642      	mov	r2, r8
 8006248:	e7df      	b.n	800620a <_printf_float+0x402>
 800624a:	2301      	movs	r3, #1
 800624c:	464a      	mov	r2, r9
 800624e:	4631      	mov	r1, r6
 8006250:	4628      	mov	r0, r5
 8006252:	47b8      	blx	r7
 8006254:	3001      	adds	r0, #1
 8006256:	f43f ae38 	beq.w	8005eca <_printf_float+0xc2>
 800625a:	f108 0801 	add.w	r8, r8, #1
 800625e:	68e3      	ldr	r3, [r4, #12]
 8006260:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006262:	1a5b      	subs	r3, r3, r1
 8006264:	4543      	cmp	r3, r8
 8006266:	dcf0      	bgt.n	800624a <_printf_float+0x442>
 8006268:	e6fa      	b.n	8006060 <_printf_float+0x258>
 800626a:	f04f 0800 	mov.w	r8, #0
 800626e:	f104 0919 	add.w	r9, r4, #25
 8006272:	e7f4      	b.n	800625e <_printf_float+0x456>

08006274 <_printf_common>:
 8006274:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006278:	4616      	mov	r6, r2
 800627a:	4699      	mov	r9, r3
 800627c:	688a      	ldr	r2, [r1, #8]
 800627e:	690b      	ldr	r3, [r1, #16]
 8006280:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006284:	4293      	cmp	r3, r2
 8006286:	bfb8      	it	lt
 8006288:	4613      	movlt	r3, r2
 800628a:	6033      	str	r3, [r6, #0]
 800628c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006290:	4607      	mov	r7, r0
 8006292:	460c      	mov	r4, r1
 8006294:	b10a      	cbz	r2, 800629a <_printf_common+0x26>
 8006296:	3301      	adds	r3, #1
 8006298:	6033      	str	r3, [r6, #0]
 800629a:	6823      	ldr	r3, [r4, #0]
 800629c:	0699      	lsls	r1, r3, #26
 800629e:	bf42      	ittt	mi
 80062a0:	6833      	ldrmi	r3, [r6, #0]
 80062a2:	3302      	addmi	r3, #2
 80062a4:	6033      	strmi	r3, [r6, #0]
 80062a6:	6825      	ldr	r5, [r4, #0]
 80062a8:	f015 0506 	ands.w	r5, r5, #6
 80062ac:	d106      	bne.n	80062bc <_printf_common+0x48>
 80062ae:	f104 0a19 	add.w	sl, r4, #25
 80062b2:	68e3      	ldr	r3, [r4, #12]
 80062b4:	6832      	ldr	r2, [r6, #0]
 80062b6:	1a9b      	subs	r3, r3, r2
 80062b8:	42ab      	cmp	r3, r5
 80062ba:	dc26      	bgt.n	800630a <_printf_common+0x96>
 80062bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80062c0:	1e13      	subs	r3, r2, #0
 80062c2:	6822      	ldr	r2, [r4, #0]
 80062c4:	bf18      	it	ne
 80062c6:	2301      	movne	r3, #1
 80062c8:	0692      	lsls	r2, r2, #26
 80062ca:	d42b      	bmi.n	8006324 <_printf_common+0xb0>
 80062cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80062d0:	4649      	mov	r1, r9
 80062d2:	4638      	mov	r0, r7
 80062d4:	47c0      	blx	r8
 80062d6:	3001      	adds	r0, #1
 80062d8:	d01e      	beq.n	8006318 <_printf_common+0xa4>
 80062da:	6823      	ldr	r3, [r4, #0]
 80062dc:	68e5      	ldr	r5, [r4, #12]
 80062de:	6832      	ldr	r2, [r6, #0]
 80062e0:	f003 0306 	and.w	r3, r3, #6
 80062e4:	2b04      	cmp	r3, #4
 80062e6:	bf08      	it	eq
 80062e8:	1aad      	subeq	r5, r5, r2
 80062ea:	68a3      	ldr	r3, [r4, #8]
 80062ec:	6922      	ldr	r2, [r4, #16]
 80062ee:	bf0c      	ite	eq
 80062f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80062f4:	2500      	movne	r5, #0
 80062f6:	4293      	cmp	r3, r2
 80062f8:	bfc4      	itt	gt
 80062fa:	1a9b      	subgt	r3, r3, r2
 80062fc:	18ed      	addgt	r5, r5, r3
 80062fe:	2600      	movs	r6, #0
 8006300:	341a      	adds	r4, #26
 8006302:	42b5      	cmp	r5, r6
 8006304:	d11a      	bne.n	800633c <_printf_common+0xc8>
 8006306:	2000      	movs	r0, #0
 8006308:	e008      	b.n	800631c <_printf_common+0xa8>
 800630a:	2301      	movs	r3, #1
 800630c:	4652      	mov	r2, sl
 800630e:	4649      	mov	r1, r9
 8006310:	4638      	mov	r0, r7
 8006312:	47c0      	blx	r8
 8006314:	3001      	adds	r0, #1
 8006316:	d103      	bne.n	8006320 <_printf_common+0xac>
 8006318:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800631c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006320:	3501      	adds	r5, #1
 8006322:	e7c6      	b.n	80062b2 <_printf_common+0x3e>
 8006324:	18e1      	adds	r1, r4, r3
 8006326:	1c5a      	adds	r2, r3, #1
 8006328:	2030      	movs	r0, #48	; 0x30
 800632a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800632e:	4422      	add	r2, r4
 8006330:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006334:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006338:	3302      	adds	r3, #2
 800633a:	e7c7      	b.n	80062cc <_printf_common+0x58>
 800633c:	2301      	movs	r3, #1
 800633e:	4622      	mov	r2, r4
 8006340:	4649      	mov	r1, r9
 8006342:	4638      	mov	r0, r7
 8006344:	47c0      	blx	r8
 8006346:	3001      	adds	r0, #1
 8006348:	d0e6      	beq.n	8006318 <_printf_common+0xa4>
 800634a:	3601      	adds	r6, #1
 800634c:	e7d9      	b.n	8006302 <_printf_common+0x8e>
	...

08006350 <_printf_i>:
 8006350:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006354:	7e0f      	ldrb	r7, [r1, #24]
 8006356:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006358:	2f78      	cmp	r7, #120	; 0x78
 800635a:	4691      	mov	r9, r2
 800635c:	4680      	mov	r8, r0
 800635e:	460c      	mov	r4, r1
 8006360:	469a      	mov	sl, r3
 8006362:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006366:	d807      	bhi.n	8006378 <_printf_i+0x28>
 8006368:	2f62      	cmp	r7, #98	; 0x62
 800636a:	d80a      	bhi.n	8006382 <_printf_i+0x32>
 800636c:	2f00      	cmp	r7, #0
 800636e:	f000 80d8 	beq.w	8006522 <_printf_i+0x1d2>
 8006372:	2f58      	cmp	r7, #88	; 0x58
 8006374:	f000 80a3 	beq.w	80064be <_printf_i+0x16e>
 8006378:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800637c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006380:	e03a      	b.n	80063f8 <_printf_i+0xa8>
 8006382:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006386:	2b15      	cmp	r3, #21
 8006388:	d8f6      	bhi.n	8006378 <_printf_i+0x28>
 800638a:	a101      	add	r1, pc, #4	; (adr r1, 8006390 <_printf_i+0x40>)
 800638c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006390:	080063e9 	.word	0x080063e9
 8006394:	080063fd 	.word	0x080063fd
 8006398:	08006379 	.word	0x08006379
 800639c:	08006379 	.word	0x08006379
 80063a0:	08006379 	.word	0x08006379
 80063a4:	08006379 	.word	0x08006379
 80063a8:	080063fd 	.word	0x080063fd
 80063ac:	08006379 	.word	0x08006379
 80063b0:	08006379 	.word	0x08006379
 80063b4:	08006379 	.word	0x08006379
 80063b8:	08006379 	.word	0x08006379
 80063bc:	08006509 	.word	0x08006509
 80063c0:	0800642d 	.word	0x0800642d
 80063c4:	080064eb 	.word	0x080064eb
 80063c8:	08006379 	.word	0x08006379
 80063cc:	08006379 	.word	0x08006379
 80063d0:	0800652b 	.word	0x0800652b
 80063d4:	08006379 	.word	0x08006379
 80063d8:	0800642d 	.word	0x0800642d
 80063dc:	08006379 	.word	0x08006379
 80063e0:	08006379 	.word	0x08006379
 80063e4:	080064f3 	.word	0x080064f3
 80063e8:	682b      	ldr	r3, [r5, #0]
 80063ea:	1d1a      	adds	r2, r3, #4
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	602a      	str	r2, [r5, #0]
 80063f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80063f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80063f8:	2301      	movs	r3, #1
 80063fa:	e0a3      	b.n	8006544 <_printf_i+0x1f4>
 80063fc:	6820      	ldr	r0, [r4, #0]
 80063fe:	6829      	ldr	r1, [r5, #0]
 8006400:	0606      	lsls	r6, r0, #24
 8006402:	f101 0304 	add.w	r3, r1, #4
 8006406:	d50a      	bpl.n	800641e <_printf_i+0xce>
 8006408:	680e      	ldr	r6, [r1, #0]
 800640a:	602b      	str	r3, [r5, #0]
 800640c:	2e00      	cmp	r6, #0
 800640e:	da03      	bge.n	8006418 <_printf_i+0xc8>
 8006410:	232d      	movs	r3, #45	; 0x2d
 8006412:	4276      	negs	r6, r6
 8006414:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006418:	485e      	ldr	r0, [pc, #376]	; (8006594 <_printf_i+0x244>)
 800641a:	230a      	movs	r3, #10
 800641c:	e019      	b.n	8006452 <_printf_i+0x102>
 800641e:	680e      	ldr	r6, [r1, #0]
 8006420:	602b      	str	r3, [r5, #0]
 8006422:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006426:	bf18      	it	ne
 8006428:	b236      	sxthne	r6, r6
 800642a:	e7ef      	b.n	800640c <_printf_i+0xbc>
 800642c:	682b      	ldr	r3, [r5, #0]
 800642e:	6820      	ldr	r0, [r4, #0]
 8006430:	1d19      	adds	r1, r3, #4
 8006432:	6029      	str	r1, [r5, #0]
 8006434:	0601      	lsls	r1, r0, #24
 8006436:	d501      	bpl.n	800643c <_printf_i+0xec>
 8006438:	681e      	ldr	r6, [r3, #0]
 800643a:	e002      	b.n	8006442 <_printf_i+0xf2>
 800643c:	0646      	lsls	r6, r0, #25
 800643e:	d5fb      	bpl.n	8006438 <_printf_i+0xe8>
 8006440:	881e      	ldrh	r6, [r3, #0]
 8006442:	4854      	ldr	r0, [pc, #336]	; (8006594 <_printf_i+0x244>)
 8006444:	2f6f      	cmp	r7, #111	; 0x6f
 8006446:	bf0c      	ite	eq
 8006448:	2308      	moveq	r3, #8
 800644a:	230a      	movne	r3, #10
 800644c:	2100      	movs	r1, #0
 800644e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006452:	6865      	ldr	r5, [r4, #4]
 8006454:	60a5      	str	r5, [r4, #8]
 8006456:	2d00      	cmp	r5, #0
 8006458:	bfa2      	ittt	ge
 800645a:	6821      	ldrge	r1, [r4, #0]
 800645c:	f021 0104 	bicge.w	r1, r1, #4
 8006460:	6021      	strge	r1, [r4, #0]
 8006462:	b90e      	cbnz	r6, 8006468 <_printf_i+0x118>
 8006464:	2d00      	cmp	r5, #0
 8006466:	d04d      	beq.n	8006504 <_printf_i+0x1b4>
 8006468:	4615      	mov	r5, r2
 800646a:	fbb6 f1f3 	udiv	r1, r6, r3
 800646e:	fb03 6711 	mls	r7, r3, r1, r6
 8006472:	5dc7      	ldrb	r7, [r0, r7]
 8006474:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006478:	4637      	mov	r7, r6
 800647a:	42bb      	cmp	r3, r7
 800647c:	460e      	mov	r6, r1
 800647e:	d9f4      	bls.n	800646a <_printf_i+0x11a>
 8006480:	2b08      	cmp	r3, #8
 8006482:	d10b      	bne.n	800649c <_printf_i+0x14c>
 8006484:	6823      	ldr	r3, [r4, #0]
 8006486:	07de      	lsls	r6, r3, #31
 8006488:	d508      	bpl.n	800649c <_printf_i+0x14c>
 800648a:	6923      	ldr	r3, [r4, #16]
 800648c:	6861      	ldr	r1, [r4, #4]
 800648e:	4299      	cmp	r1, r3
 8006490:	bfde      	ittt	le
 8006492:	2330      	movle	r3, #48	; 0x30
 8006494:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006498:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800649c:	1b52      	subs	r2, r2, r5
 800649e:	6122      	str	r2, [r4, #16]
 80064a0:	f8cd a000 	str.w	sl, [sp]
 80064a4:	464b      	mov	r3, r9
 80064a6:	aa03      	add	r2, sp, #12
 80064a8:	4621      	mov	r1, r4
 80064aa:	4640      	mov	r0, r8
 80064ac:	f7ff fee2 	bl	8006274 <_printf_common>
 80064b0:	3001      	adds	r0, #1
 80064b2:	d14c      	bne.n	800654e <_printf_i+0x1fe>
 80064b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80064b8:	b004      	add	sp, #16
 80064ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064be:	4835      	ldr	r0, [pc, #212]	; (8006594 <_printf_i+0x244>)
 80064c0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80064c4:	6829      	ldr	r1, [r5, #0]
 80064c6:	6823      	ldr	r3, [r4, #0]
 80064c8:	f851 6b04 	ldr.w	r6, [r1], #4
 80064cc:	6029      	str	r1, [r5, #0]
 80064ce:	061d      	lsls	r5, r3, #24
 80064d0:	d514      	bpl.n	80064fc <_printf_i+0x1ac>
 80064d2:	07df      	lsls	r7, r3, #31
 80064d4:	bf44      	itt	mi
 80064d6:	f043 0320 	orrmi.w	r3, r3, #32
 80064da:	6023      	strmi	r3, [r4, #0]
 80064dc:	b91e      	cbnz	r6, 80064e6 <_printf_i+0x196>
 80064de:	6823      	ldr	r3, [r4, #0]
 80064e0:	f023 0320 	bic.w	r3, r3, #32
 80064e4:	6023      	str	r3, [r4, #0]
 80064e6:	2310      	movs	r3, #16
 80064e8:	e7b0      	b.n	800644c <_printf_i+0xfc>
 80064ea:	6823      	ldr	r3, [r4, #0]
 80064ec:	f043 0320 	orr.w	r3, r3, #32
 80064f0:	6023      	str	r3, [r4, #0]
 80064f2:	2378      	movs	r3, #120	; 0x78
 80064f4:	4828      	ldr	r0, [pc, #160]	; (8006598 <_printf_i+0x248>)
 80064f6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80064fa:	e7e3      	b.n	80064c4 <_printf_i+0x174>
 80064fc:	0659      	lsls	r1, r3, #25
 80064fe:	bf48      	it	mi
 8006500:	b2b6      	uxthmi	r6, r6
 8006502:	e7e6      	b.n	80064d2 <_printf_i+0x182>
 8006504:	4615      	mov	r5, r2
 8006506:	e7bb      	b.n	8006480 <_printf_i+0x130>
 8006508:	682b      	ldr	r3, [r5, #0]
 800650a:	6826      	ldr	r6, [r4, #0]
 800650c:	6961      	ldr	r1, [r4, #20]
 800650e:	1d18      	adds	r0, r3, #4
 8006510:	6028      	str	r0, [r5, #0]
 8006512:	0635      	lsls	r5, r6, #24
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	d501      	bpl.n	800651c <_printf_i+0x1cc>
 8006518:	6019      	str	r1, [r3, #0]
 800651a:	e002      	b.n	8006522 <_printf_i+0x1d2>
 800651c:	0670      	lsls	r0, r6, #25
 800651e:	d5fb      	bpl.n	8006518 <_printf_i+0x1c8>
 8006520:	8019      	strh	r1, [r3, #0]
 8006522:	2300      	movs	r3, #0
 8006524:	6123      	str	r3, [r4, #16]
 8006526:	4615      	mov	r5, r2
 8006528:	e7ba      	b.n	80064a0 <_printf_i+0x150>
 800652a:	682b      	ldr	r3, [r5, #0]
 800652c:	1d1a      	adds	r2, r3, #4
 800652e:	602a      	str	r2, [r5, #0]
 8006530:	681d      	ldr	r5, [r3, #0]
 8006532:	6862      	ldr	r2, [r4, #4]
 8006534:	2100      	movs	r1, #0
 8006536:	4628      	mov	r0, r5
 8006538:	f7f9 fe72 	bl	8000220 <memchr>
 800653c:	b108      	cbz	r0, 8006542 <_printf_i+0x1f2>
 800653e:	1b40      	subs	r0, r0, r5
 8006540:	6060      	str	r0, [r4, #4]
 8006542:	6863      	ldr	r3, [r4, #4]
 8006544:	6123      	str	r3, [r4, #16]
 8006546:	2300      	movs	r3, #0
 8006548:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800654c:	e7a8      	b.n	80064a0 <_printf_i+0x150>
 800654e:	6923      	ldr	r3, [r4, #16]
 8006550:	462a      	mov	r2, r5
 8006552:	4649      	mov	r1, r9
 8006554:	4640      	mov	r0, r8
 8006556:	47d0      	blx	sl
 8006558:	3001      	adds	r0, #1
 800655a:	d0ab      	beq.n	80064b4 <_printf_i+0x164>
 800655c:	6823      	ldr	r3, [r4, #0]
 800655e:	079b      	lsls	r3, r3, #30
 8006560:	d413      	bmi.n	800658a <_printf_i+0x23a>
 8006562:	68e0      	ldr	r0, [r4, #12]
 8006564:	9b03      	ldr	r3, [sp, #12]
 8006566:	4298      	cmp	r0, r3
 8006568:	bfb8      	it	lt
 800656a:	4618      	movlt	r0, r3
 800656c:	e7a4      	b.n	80064b8 <_printf_i+0x168>
 800656e:	2301      	movs	r3, #1
 8006570:	4632      	mov	r2, r6
 8006572:	4649      	mov	r1, r9
 8006574:	4640      	mov	r0, r8
 8006576:	47d0      	blx	sl
 8006578:	3001      	adds	r0, #1
 800657a:	d09b      	beq.n	80064b4 <_printf_i+0x164>
 800657c:	3501      	adds	r5, #1
 800657e:	68e3      	ldr	r3, [r4, #12]
 8006580:	9903      	ldr	r1, [sp, #12]
 8006582:	1a5b      	subs	r3, r3, r1
 8006584:	42ab      	cmp	r3, r5
 8006586:	dcf2      	bgt.n	800656e <_printf_i+0x21e>
 8006588:	e7eb      	b.n	8006562 <_printf_i+0x212>
 800658a:	2500      	movs	r5, #0
 800658c:	f104 0619 	add.w	r6, r4, #25
 8006590:	e7f5      	b.n	800657e <_printf_i+0x22e>
 8006592:	bf00      	nop
 8006594:	080089f6 	.word	0x080089f6
 8006598:	08008a07 	.word	0x08008a07

0800659c <iprintf>:
 800659c:	b40f      	push	{r0, r1, r2, r3}
 800659e:	4b0a      	ldr	r3, [pc, #40]	; (80065c8 <iprintf+0x2c>)
 80065a0:	b513      	push	{r0, r1, r4, lr}
 80065a2:	681c      	ldr	r4, [r3, #0]
 80065a4:	b124      	cbz	r4, 80065b0 <iprintf+0x14>
 80065a6:	69a3      	ldr	r3, [r4, #24]
 80065a8:	b913      	cbnz	r3, 80065b0 <iprintf+0x14>
 80065aa:	4620      	mov	r0, r4
 80065ac:	f001 f9a0 	bl	80078f0 <__sinit>
 80065b0:	ab05      	add	r3, sp, #20
 80065b2:	9a04      	ldr	r2, [sp, #16]
 80065b4:	68a1      	ldr	r1, [r4, #8]
 80065b6:	9301      	str	r3, [sp, #4]
 80065b8:	4620      	mov	r0, r4
 80065ba:	f001 ff5d 	bl	8008478 <_vfiprintf_r>
 80065be:	b002      	add	sp, #8
 80065c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80065c4:	b004      	add	sp, #16
 80065c6:	4770      	bx	lr
 80065c8:	2000000c 	.word	0x2000000c

080065cc <_puts_r>:
 80065cc:	b570      	push	{r4, r5, r6, lr}
 80065ce:	460e      	mov	r6, r1
 80065d0:	4605      	mov	r5, r0
 80065d2:	b118      	cbz	r0, 80065dc <_puts_r+0x10>
 80065d4:	6983      	ldr	r3, [r0, #24]
 80065d6:	b90b      	cbnz	r3, 80065dc <_puts_r+0x10>
 80065d8:	f001 f98a 	bl	80078f0 <__sinit>
 80065dc:	69ab      	ldr	r3, [r5, #24]
 80065de:	68ac      	ldr	r4, [r5, #8]
 80065e0:	b913      	cbnz	r3, 80065e8 <_puts_r+0x1c>
 80065e2:	4628      	mov	r0, r5
 80065e4:	f001 f984 	bl	80078f0 <__sinit>
 80065e8:	4b2c      	ldr	r3, [pc, #176]	; (800669c <_puts_r+0xd0>)
 80065ea:	429c      	cmp	r4, r3
 80065ec:	d120      	bne.n	8006630 <_puts_r+0x64>
 80065ee:	686c      	ldr	r4, [r5, #4]
 80065f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80065f2:	07db      	lsls	r3, r3, #31
 80065f4:	d405      	bmi.n	8006602 <_puts_r+0x36>
 80065f6:	89a3      	ldrh	r3, [r4, #12]
 80065f8:	0598      	lsls	r0, r3, #22
 80065fa:	d402      	bmi.n	8006602 <_puts_r+0x36>
 80065fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80065fe:	f001 fa1a 	bl	8007a36 <__retarget_lock_acquire_recursive>
 8006602:	89a3      	ldrh	r3, [r4, #12]
 8006604:	0719      	lsls	r1, r3, #28
 8006606:	d51d      	bpl.n	8006644 <_puts_r+0x78>
 8006608:	6923      	ldr	r3, [r4, #16]
 800660a:	b1db      	cbz	r3, 8006644 <_puts_r+0x78>
 800660c:	3e01      	subs	r6, #1
 800660e:	68a3      	ldr	r3, [r4, #8]
 8006610:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006614:	3b01      	subs	r3, #1
 8006616:	60a3      	str	r3, [r4, #8]
 8006618:	bb39      	cbnz	r1, 800666a <_puts_r+0x9e>
 800661a:	2b00      	cmp	r3, #0
 800661c:	da38      	bge.n	8006690 <_puts_r+0xc4>
 800661e:	4622      	mov	r2, r4
 8006620:	210a      	movs	r1, #10
 8006622:	4628      	mov	r0, r5
 8006624:	f000 f90e 	bl	8006844 <__swbuf_r>
 8006628:	3001      	adds	r0, #1
 800662a:	d011      	beq.n	8006650 <_puts_r+0x84>
 800662c:	250a      	movs	r5, #10
 800662e:	e011      	b.n	8006654 <_puts_r+0x88>
 8006630:	4b1b      	ldr	r3, [pc, #108]	; (80066a0 <_puts_r+0xd4>)
 8006632:	429c      	cmp	r4, r3
 8006634:	d101      	bne.n	800663a <_puts_r+0x6e>
 8006636:	68ac      	ldr	r4, [r5, #8]
 8006638:	e7da      	b.n	80065f0 <_puts_r+0x24>
 800663a:	4b1a      	ldr	r3, [pc, #104]	; (80066a4 <_puts_r+0xd8>)
 800663c:	429c      	cmp	r4, r3
 800663e:	bf08      	it	eq
 8006640:	68ec      	ldreq	r4, [r5, #12]
 8006642:	e7d5      	b.n	80065f0 <_puts_r+0x24>
 8006644:	4621      	mov	r1, r4
 8006646:	4628      	mov	r0, r5
 8006648:	f000 f94e 	bl	80068e8 <__swsetup_r>
 800664c:	2800      	cmp	r0, #0
 800664e:	d0dd      	beq.n	800660c <_puts_r+0x40>
 8006650:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8006654:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006656:	07da      	lsls	r2, r3, #31
 8006658:	d405      	bmi.n	8006666 <_puts_r+0x9a>
 800665a:	89a3      	ldrh	r3, [r4, #12]
 800665c:	059b      	lsls	r3, r3, #22
 800665e:	d402      	bmi.n	8006666 <_puts_r+0x9a>
 8006660:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006662:	f001 f9e9 	bl	8007a38 <__retarget_lock_release_recursive>
 8006666:	4628      	mov	r0, r5
 8006668:	bd70      	pop	{r4, r5, r6, pc}
 800666a:	2b00      	cmp	r3, #0
 800666c:	da04      	bge.n	8006678 <_puts_r+0xac>
 800666e:	69a2      	ldr	r2, [r4, #24]
 8006670:	429a      	cmp	r2, r3
 8006672:	dc06      	bgt.n	8006682 <_puts_r+0xb6>
 8006674:	290a      	cmp	r1, #10
 8006676:	d004      	beq.n	8006682 <_puts_r+0xb6>
 8006678:	6823      	ldr	r3, [r4, #0]
 800667a:	1c5a      	adds	r2, r3, #1
 800667c:	6022      	str	r2, [r4, #0]
 800667e:	7019      	strb	r1, [r3, #0]
 8006680:	e7c5      	b.n	800660e <_puts_r+0x42>
 8006682:	4622      	mov	r2, r4
 8006684:	4628      	mov	r0, r5
 8006686:	f000 f8dd 	bl	8006844 <__swbuf_r>
 800668a:	3001      	adds	r0, #1
 800668c:	d1bf      	bne.n	800660e <_puts_r+0x42>
 800668e:	e7df      	b.n	8006650 <_puts_r+0x84>
 8006690:	6823      	ldr	r3, [r4, #0]
 8006692:	250a      	movs	r5, #10
 8006694:	1c5a      	adds	r2, r3, #1
 8006696:	6022      	str	r2, [r4, #0]
 8006698:	701d      	strb	r5, [r3, #0]
 800669a:	e7db      	b.n	8006654 <_puts_r+0x88>
 800669c:	08008ac8 	.word	0x08008ac8
 80066a0:	08008ae8 	.word	0x08008ae8
 80066a4:	08008aa8 	.word	0x08008aa8

080066a8 <puts>:
 80066a8:	4b02      	ldr	r3, [pc, #8]	; (80066b4 <puts+0xc>)
 80066aa:	4601      	mov	r1, r0
 80066ac:	6818      	ldr	r0, [r3, #0]
 80066ae:	f7ff bf8d 	b.w	80065cc <_puts_r>
 80066b2:	bf00      	nop
 80066b4:	2000000c 	.word	0x2000000c

080066b8 <setvbuf>:
 80066b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80066bc:	461d      	mov	r5, r3
 80066be:	4b5d      	ldr	r3, [pc, #372]	; (8006834 <setvbuf+0x17c>)
 80066c0:	681f      	ldr	r7, [r3, #0]
 80066c2:	4604      	mov	r4, r0
 80066c4:	460e      	mov	r6, r1
 80066c6:	4690      	mov	r8, r2
 80066c8:	b127      	cbz	r7, 80066d4 <setvbuf+0x1c>
 80066ca:	69bb      	ldr	r3, [r7, #24]
 80066cc:	b913      	cbnz	r3, 80066d4 <setvbuf+0x1c>
 80066ce:	4638      	mov	r0, r7
 80066d0:	f001 f90e 	bl	80078f0 <__sinit>
 80066d4:	4b58      	ldr	r3, [pc, #352]	; (8006838 <setvbuf+0x180>)
 80066d6:	429c      	cmp	r4, r3
 80066d8:	d167      	bne.n	80067aa <setvbuf+0xf2>
 80066da:	687c      	ldr	r4, [r7, #4]
 80066dc:	f1b8 0f02 	cmp.w	r8, #2
 80066e0:	d006      	beq.n	80066f0 <setvbuf+0x38>
 80066e2:	f1b8 0f01 	cmp.w	r8, #1
 80066e6:	f200 809f 	bhi.w	8006828 <setvbuf+0x170>
 80066ea:	2d00      	cmp	r5, #0
 80066ec:	f2c0 809c 	blt.w	8006828 <setvbuf+0x170>
 80066f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80066f2:	07db      	lsls	r3, r3, #31
 80066f4:	d405      	bmi.n	8006702 <setvbuf+0x4a>
 80066f6:	89a3      	ldrh	r3, [r4, #12]
 80066f8:	0598      	lsls	r0, r3, #22
 80066fa:	d402      	bmi.n	8006702 <setvbuf+0x4a>
 80066fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80066fe:	f001 f99a 	bl	8007a36 <__retarget_lock_acquire_recursive>
 8006702:	4621      	mov	r1, r4
 8006704:	4638      	mov	r0, r7
 8006706:	f001 f85f 	bl	80077c8 <_fflush_r>
 800670a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800670c:	b141      	cbz	r1, 8006720 <setvbuf+0x68>
 800670e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006712:	4299      	cmp	r1, r3
 8006714:	d002      	beq.n	800671c <setvbuf+0x64>
 8006716:	4638      	mov	r0, r7
 8006718:	f001 fda4 	bl	8008264 <_free_r>
 800671c:	2300      	movs	r3, #0
 800671e:	6363      	str	r3, [r4, #52]	; 0x34
 8006720:	2300      	movs	r3, #0
 8006722:	61a3      	str	r3, [r4, #24]
 8006724:	6063      	str	r3, [r4, #4]
 8006726:	89a3      	ldrh	r3, [r4, #12]
 8006728:	0619      	lsls	r1, r3, #24
 800672a:	d503      	bpl.n	8006734 <setvbuf+0x7c>
 800672c:	6921      	ldr	r1, [r4, #16]
 800672e:	4638      	mov	r0, r7
 8006730:	f001 fd98 	bl	8008264 <_free_r>
 8006734:	89a3      	ldrh	r3, [r4, #12]
 8006736:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800673a:	f023 0303 	bic.w	r3, r3, #3
 800673e:	f1b8 0f02 	cmp.w	r8, #2
 8006742:	81a3      	strh	r3, [r4, #12]
 8006744:	d06c      	beq.n	8006820 <setvbuf+0x168>
 8006746:	ab01      	add	r3, sp, #4
 8006748:	466a      	mov	r2, sp
 800674a:	4621      	mov	r1, r4
 800674c:	4638      	mov	r0, r7
 800674e:	f001 f974 	bl	8007a3a <__swhatbuf_r>
 8006752:	89a3      	ldrh	r3, [r4, #12]
 8006754:	4318      	orrs	r0, r3
 8006756:	81a0      	strh	r0, [r4, #12]
 8006758:	2d00      	cmp	r5, #0
 800675a:	d130      	bne.n	80067be <setvbuf+0x106>
 800675c:	9d00      	ldr	r5, [sp, #0]
 800675e:	4628      	mov	r0, r5
 8006760:	f001 f9d0 	bl	8007b04 <malloc>
 8006764:	4606      	mov	r6, r0
 8006766:	2800      	cmp	r0, #0
 8006768:	d155      	bne.n	8006816 <setvbuf+0x15e>
 800676a:	f8dd 9000 	ldr.w	r9, [sp]
 800676e:	45a9      	cmp	r9, r5
 8006770:	d14a      	bne.n	8006808 <setvbuf+0x150>
 8006772:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8006776:	2200      	movs	r2, #0
 8006778:	60a2      	str	r2, [r4, #8]
 800677a:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800677e:	6022      	str	r2, [r4, #0]
 8006780:	6122      	str	r2, [r4, #16]
 8006782:	2201      	movs	r2, #1
 8006784:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006788:	6162      	str	r2, [r4, #20]
 800678a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800678c:	f043 0302 	orr.w	r3, r3, #2
 8006790:	07d2      	lsls	r2, r2, #31
 8006792:	81a3      	strh	r3, [r4, #12]
 8006794:	d405      	bmi.n	80067a2 <setvbuf+0xea>
 8006796:	f413 7f00 	tst.w	r3, #512	; 0x200
 800679a:	d102      	bne.n	80067a2 <setvbuf+0xea>
 800679c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800679e:	f001 f94b 	bl	8007a38 <__retarget_lock_release_recursive>
 80067a2:	4628      	mov	r0, r5
 80067a4:	b003      	add	sp, #12
 80067a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80067aa:	4b24      	ldr	r3, [pc, #144]	; (800683c <setvbuf+0x184>)
 80067ac:	429c      	cmp	r4, r3
 80067ae:	d101      	bne.n	80067b4 <setvbuf+0xfc>
 80067b0:	68bc      	ldr	r4, [r7, #8]
 80067b2:	e793      	b.n	80066dc <setvbuf+0x24>
 80067b4:	4b22      	ldr	r3, [pc, #136]	; (8006840 <setvbuf+0x188>)
 80067b6:	429c      	cmp	r4, r3
 80067b8:	bf08      	it	eq
 80067ba:	68fc      	ldreq	r4, [r7, #12]
 80067bc:	e78e      	b.n	80066dc <setvbuf+0x24>
 80067be:	2e00      	cmp	r6, #0
 80067c0:	d0cd      	beq.n	800675e <setvbuf+0xa6>
 80067c2:	69bb      	ldr	r3, [r7, #24]
 80067c4:	b913      	cbnz	r3, 80067cc <setvbuf+0x114>
 80067c6:	4638      	mov	r0, r7
 80067c8:	f001 f892 	bl	80078f0 <__sinit>
 80067cc:	f1b8 0f01 	cmp.w	r8, #1
 80067d0:	bf08      	it	eq
 80067d2:	89a3      	ldrheq	r3, [r4, #12]
 80067d4:	6026      	str	r6, [r4, #0]
 80067d6:	bf04      	itt	eq
 80067d8:	f043 0301 	orreq.w	r3, r3, #1
 80067dc:	81a3      	strheq	r3, [r4, #12]
 80067de:	89a2      	ldrh	r2, [r4, #12]
 80067e0:	f012 0308 	ands.w	r3, r2, #8
 80067e4:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80067e8:	d01c      	beq.n	8006824 <setvbuf+0x16c>
 80067ea:	07d3      	lsls	r3, r2, #31
 80067ec:	bf41      	itttt	mi
 80067ee:	2300      	movmi	r3, #0
 80067f0:	426d      	negmi	r5, r5
 80067f2:	60a3      	strmi	r3, [r4, #8]
 80067f4:	61a5      	strmi	r5, [r4, #24]
 80067f6:	bf58      	it	pl
 80067f8:	60a5      	strpl	r5, [r4, #8]
 80067fa:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80067fc:	f015 0501 	ands.w	r5, r5, #1
 8006800:	d115      	bne.n	800682e <setvbuf+0x176>
 8006802:	f412 7f00 	tst.w	r2, #512	; 0x200
 8006806:	e7c8      	b.n	800679a <setvbuf+0xe2>
 8006808:	4648      	mov	r0, r9
 800680a:	f001 f97b 	bl	8007b04 <malloc>
 800680e:	4606      	mov	r6, r0
 8006810:	2800      	cmp	r0, #0
 8006812:	d0ae      	beq.n	8006772 <setvbuf+0xba>
 8006814:	464d      	mov	r5, r9
 8006816:	89a3      	ldrh	r3, [r4, #12]
 8006818:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800681c:	81a3      	strh	r3, [r4, #12]
 800681e:	e7d0      	b.n	80067c2 <setvbuf+0x10a>
 8006820:	2500      	movs	r5, #0
 8006822:	e7a8      	b.n	8006776 <setvbuf+0xbe>
 8006824:	60a3      	str	r3, [r4, #8]
 8006826:	e7e8      	b.n	80067fa <setvbuf+0x142>
 8006828:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800682c:	e7b9      	b.n	80067a2 <setvbuf+0xea>
 800682e:	2500      	movs	r5, #0
 8006830:	e7b7      	b.n	80067a2 <setvbuf+0xea>
 8006832:	bf00      	nop
 8006834:	2000000c 	.word	0x2000000c
 8006838:	08008ac8 	.word	0x08008ac8
 800683c:	08008ae8 	.word	0x08008ae8
 8006840:	08008aa8 	.word	0x08008aa8

08006844 <__swbuf_r>:
 8006844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006846:	460e      	mov	r6, r1
 8006848:	4614      	mov	r4, r2
 800684a:	4605      	mov	r5, r0
 800684c:	b118      	cbz	r0, 8006856 <__swbuf_r+0x12>
 800684e:	6983      	ldr	r3, [r0, #24]
 8006850:	b90b      	cbnz	r3, 8006856 <__swbuf_r+0x12>
 8006852:	f001 f84d 	bl	80078f0 <__sinit>
 8006856:	4b21      	ldr	r3, [pc, #132]	; (80068dc <__swbuf_r+0x98>)
 8006858:	429c      	cmp	r4, r3
 800685a:	d12b      	bne.n	80068b4 <__swbuf_r+0x70>
 800685c:	686c      	ldr	r4, [r5, #4]
 800685e:	69a3      	ldr	r3, [r4, #24]
 8006860:	60a3      	str	r3, [r4, #8]
 8006862:	89a3      	ldrh	r3, [r4, #12]
 8006864:	071a      	lsls	r2, r3, #28
 8006866:	d52f      	bpl.n	80068c8 <__swbuf_r+0x84>
 8006868:	6923      	ldr	r3, [r4, #16]
 800686a:	b36b      	cbz	r3, 80068c8 <__swbuf_r+0x84>
 800686c:	6923      	ldr	r3, [r4, #16]
 800686e:	6820      	ldr	r0, [r4, #0]
 8006870:	1ac0      	subs	r0, r0, r3
 8006872:	6963      	ldr	r3, [r4, #20]
 8006874:	b2f6      	uxtb	r6, r6
 8006876:	4283      	cmp	r3, r0
 8006878:	4637      	mov	r7, r6
 800687a:	dc04      	bgt.n	8006886 <__swbuf_r+0x42>
 800687c:	4621      	mov	r1, r4
 800687e:	4628      	mov	r0, r5
 8006880:	f000 ffa2 	bl	80077c8 <_fflush_r>
 8006884:	bb30      	cbnz	r0, 80068d4 <__swbuf_r+0x90>
 8006886:	68a3      	ldr	r3, [r4, #8]
 8006888:	3b01      	subs	r3, #1
 800688a:	60a3      	str	r3, [r4, #8]
 800688c:	6823      	ldr	r3, [r4, #0]
 800688e:	1c5a      	adds	r2, r3, #1
 8006890:	6022      	str	r2, [r4, #0]
 8006892:	701e      	strb	r6, [r3, #0]
 8006894:	6963      	ldr	r3, [r4, #20]
 8006896:	3001      	adds	r0, #1
 8006898:	4283      	cmp	r3, r0
 800689a:	d004      	beq.n	80068a6 <__swbuf_r+0x62>
 800689c:	89a3      	ldrh	r3, [r4, #12]
 800689e:	07db      	lsls	r3, r3, #31
 80068a0:	d506      	bpl.n	80068b0 <__swbuf_r+0x6c>
 80068a2:	2e0a      	cmp	r6, #10
 80068a4:	d104      	bne.n	80068b0 <__swbuf_r+0x6c>
 80068a6:	4621      	mov	r1, r4
 80068a8:	4628      	mov	r0, r5
 80068aa:	f000 ff8d 	bl	80077c8 <_fflush_r>
 80068ae:	b988      	cbnz	r0, 80068d4 <__swbuf_r+0x90>
 80068b0:	4638      	mov	r0, r7
 80068b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80068b4:	4b0a      	ldr	r3, [pc, #40]	; (80068e0 <__swbuf_r+0x9c>)
 80068b6:	429c      	cmp	r4, r3
 80068b8:	d101      	bne.n	80068be <__swbuf_r+0x7a>
 80068ba:	68ac      	ldr	r4, [r5, #8]
 80068bc:	e7cf      	b.n	800685e <__swbuf_r+0x1a>
 80068be:	4b09      	ldr	r3, [pc, #36]	; (80068e4 <__swbuf_r+0xa0>)
 80068c0:	429c      	cmp	r4, r3
 80068c2:	bf08      	it	eq
 80068c4:	68ec      	ldreq	r4, [r5, #12]
 80068c6:	e7ca      	b.n	800685e <__swbuf_r+0x1a>
 80068c8:	4621      	mov	r1, r4
 80068ca:	4628      	mov	r0, r5
 80068cc:	f000 f80c 	bl	80068e8 <__swsetup_r>
 80068d0:	2800      	cmp	r0, #0
 80068d2:	d0cb      	beq.n	800686c <__swbuf_r+0x28>
 80068d4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80068d8:	e7ea      	b.n	80068b0 <__swbuf_r+0x6c>
 80068da:	bf00      	nop
 80068dc:	08008ac8 	.word	0x08008ac8
 80068e0:	08008ae8 	.word	0x08008ae8
 80068e4:	08008aa8 	.word	0x08008aa8

080068e8 <__swsetup_r>:
 80068e8:	4b32      	ldr	r3, [pc, #200]	; (80069b4 <__swsetup_r+0xcc>)
 80068ea:	b570      	push	{r4, r5, r6, lr}
 80068ec:	681d      	ldr	r5, [r3, #0]
 80068ee:	4606      	mov	r6, r0
 80068f0:	460c      	mov	r4, r1
 80068f2:	b125      	cbz	r5, 80068fe <__swsetup_r+0x16>
 80068f4:	69ab      	ldr	r3, [r5, #24]
 80068f6:	b913      	cbnz	r3, 80068fe <__swsetup_r+0x16>
 80068f8:	4628      	mov	r0, r5
 80068fa:	f000 fff9 	bl	80078f0 <__sinit>
 80068fe:	4b2e      	ldr	r3, [pc, #184]	; (80069b8 <__swsetup_r+0xd0>)
 8006900:	429c      	cmp	r4, r3
 8006902:	d10f      	bne.n	8006924 <__swsetup_r+0x3c>
 8006904:	686c      	ldr	r4, [r5, #4]
 8006906:	89a3      	ldrh	r3, [r4, #12]
 8006908:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800690c:	0719      	lsls	r1, r3, #28
 800690e:	d42c      	bmi.n	800696a <__swsetup_r+0x82>
 8006910:	06dd      	lsls	r5, r3, #27
 8006912:	d411      	bmi.n	8006938 <__swsetup_r+0x50>
 8006914:	2309      	movs	r3, #9
 8006916:	6033      	str	r3, [r6, #0]
 8006918:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800691c:	81a3      	strh	r3, [r4, #12]
 800691e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006922:	e03e      	b.n	80069a2 <__swsetup_r+0xba>
 8006924:	4b25      	ldr	r3, [pc, #148]	; (80069bc <__swsetup_r+0xd4>)
 8006926:	429c      	cmp	r4, r3
 8006928:	d101      	bne.n	800692e <__swsetup_r+0x46>
 800692a:	68ac      	ldr	r4, [r5, #8]
 800692c:	e7eb      	b.n	8006906 <__swsetup_r+0x1e>
 800692e:	4b24      	ldr	r3, [pc, #144]	; (80069c0 <__swsetup_r+0xd8>)
 8006930:	429c      	cmp	r4, r3
 8006932:	bf08      	it	eq
 8006934:	68ec      	ldreq	r4, [r5, #12]
 8006936:	e7e6      	b.n	8006906 <__swsetup_r+0x1e>
 8006938:	0758      	lsls	r0, r3, #29
 800693a:	d512      	bpl.n	8006962 <__swsetup_r+0x7a>
 800693c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800693e:	b141      	cbz	r1, 8006952 <__swsetup_r+0x6a>
 8006940:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006944:	4299      	cmp	r1, r3
 8006946:	d002      	beq.n	800694e <__swsetup_r+0x66>
 8006948:	4630      	mov	r0, r6
 800694a:	f001 fc8b 	bl	8008264 <_free_r>
 800694e:	2300      	movs	r3, #0
 8006950:	6363      	str	r3, [r4, #52]	; 0x34
 8006952:	89a3      	ldrh	r3, [r4, #12]
 8006954:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006958:	81a3      	strh	r3, [r4, #12]
 800695a:	2300      	movs	r3, #0
 800695c:	6063      	str	r3, [r4, #4]
 800695e:	6923      	ldr	r3, [r4, #16]
 8006960:	6023      	str	r3, [r4, #0]
 8006962:	89a3      	ldrh	r3, [r4, #12]
 8006964:	f043 0308 	orr.w	r3, r3, #8
 8006968:	81a3      	strh	r3, [r4, #12]
 800696a:	6923      	ldr	r3, [r4, #16]
 800696c:	b94b      	cbnz	r3, 8006982 <__swsetup_r+0x9a>
 800696e:	89a3      	ldrh	r3, [r4, #12]
 8006970:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006974:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006978:	d003      	beq.n	8006982 <__swsetup_r+0x9a>
 800697a:	4621      	mov	r1, r4
 800697c:	4630      	mov	r0, r6
 800697e:	f001 f881 	bl	8007a84 <__smakebuf_r>
 8006982:	89a0      	ldrh	r0, [r4, #12]
 8006984:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006988:	f010 0301 	ands.w	r3, r0, #1
 800698c:	d00a      	beq.n	80069a4 <__swsetup_r+0xbc>
 800698e:	2300      	movs	r3, #0
 8006990:	60a3      	str	r3, [r4, #8]
 8006992:	6963      	ldr	r3, [r4, #20]
 8006994:	425b      	negs	r3, r3
 8006996:	61a3      	str	r3, [r4, #24]
 8006998:	6923      	ldr	r3, [r4, #16]
 800699a:	b943      	cbnz	r3, 80069ae <__swsetup_r+0xc6>
 800699c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80069a0:	d1ba      	bne.n	8006918 <__swsetup_r+0x30>
 80069a2:	bd70      	pop	{r4, r5, r6, pc}
 80069a4:	0781      	lsls	r1, r0, #30
 80069a6:	bf58      	it	pl
 80069a8:	6963      	ldrpl	r3, [r4, #20]
 80069aa:	60a3      	str	r3, [r4, #8]
 80069ac:	e7f4      	b.n	8006998 <__swsetup_r+0xb0>
 80069ae:	2000      	movs	r0, #0
 80069b0:	e7f7      	b.n	80069a2 <__swsetup_r+0xba>
 80069b2:	bf00      	nop
 80069b4:	2000000c 	.word	0x2000000c
 80069b8:	08008ac8 	.word	0x08008ac8
 80069bc:	08008ae8 	.word	0x08008ae8
 80069c0:	08008aa8 	.word	0x08008aa8

080069c4 <quorem>:
 80069c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069c8:	6903      	ldr	r3, [r0, #16]
 80069ca:	690c      	ldr	r4, [r1, #16]
 80069cc:	42a3      	cmp	r3, r4
 80069ce:	4607      	mov	r7, r0
 80069d0:	f2c0 8081 	blt.w	8006ad6 <quorem+0x112>
 80069d4:	3c01      	subs	r4, #1
 80069d6:	f101 0814 	add.w	r8, r1, #20
 80069da:	f100 0514 	add.w	r5, r0, #20
 80069de:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80069e2:	9301      	str	r3, [sp, #4]
 80069e4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80069e8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80069ec:	3301      	adds	r3, #1
 80069ee:	429a      	cmp	r2, r3
 80069f0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80069f4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80069f8:	fbb2 f6f3 	udiv	r6, r2, r3
 80069fc:	d331      	bcc.n	8006a62 <quorem+0x9e>
 80069fe:	f04f 0e00 	mov.w	lr, #0
 8006a02:	4640      	mov	r0, r8
 8006a04:	46ac      	mov	ip, r5
 8006a06:	46f2      	mov	sl, lr
 8006a08:	f850 2b04 	ldr.w	r2, [r0], #4
 8006a0c:	b293      	uxth	r3, r2
 8006a0e:	fb06 e303 	mla	r3, r6, r3, lr
 8006a12:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006a16:	b29b      	uxth	r3, r3
 8006a18:	ebaa 0303 	sub.w	r3, sl, r3
 8006a1c:	f8dc a000 	ldr.w	sl, [ip]
 8006a20:	0c12      	lsrs	r2, r2, #16
 8006a22:	fa13 f38a 	uxtah	r3, r3, sl
 8006a26:	fb06 e202 	mla	r2, r6, r2, lr
 8006a2a:	9300      	str	r3, [sp, #0]
 8006a2c:	9b00      	ldr	r3, [sp, #0]
 8006a2e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006a32:	b292      	uxth	r2, r2
 8006a34:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006a38:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006a3c:	f8bd 3000 	ldrh.w	r3, [sp]
 8006a40:	4581      	cmp	r9, r0
 8006a42:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006a46:	f84c 3b04 	str.w	r3, [ip], #4
 8006a4a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006a4e:	d2db      	bcs.n	8006a08 <quorem+0x44>
 8006a50:	f855 300b 	ldr.w	r3, [r5, fp]
 8006a54:	b92b      	cbnz	r3, 8006a62 <quorem+0x9e>
 8006a56:	9b01      	ldr	r3, [sp, #4]
 8006a58:	3b04      	subs	r3, #4
 8006a5a:	429d      	cmp	r5, r3
 8006a5c:	461a      	mov	r2, r3
 8006a5e:	d32e      	bcc.n	8006abe <quorem+0xfa>
 8006a60:	613c      	str	r4, [r7, #16]
 8006a62:	4638      	mov	r0, r7
 8006a64:	f001 fae6 	bl	8008034 <__mcmp>
 8006a68:	2800      	cmp	r0, #0
 8006a6a:	db24      	blt.n	8006ab6 <quorem+0xf2>
 8006a6c:	3601      	adds	r6, #1
 8006a6e:	4628      	mov	r0, r5
 8006a70:	f04f 0c00 	mov.w	ip, #0
 8006a74:	f858 2b04 	ldr.w	r2, [r8], #4
 8006a78:	f8d0 e000 	ldr.w	lr, [r0]
 8006a7c:	b293      	uxth	r3, r2
 8006a7e:	ebac 0303 	sub.w	r3, ip, r3
 8006a82:	0c12      	lsrs	r2, r2, #16
 8006a84:	fa13 f38e 	uxtah	r3, r3, lr
 8006a88:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006a8c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006a90:	b29b      	uxth	r3, r3
 8006a92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006a96:	45c1      	cmp	r9, r8
 8006a98:	f840 3b04 	str.w	r3, [r0], #4
 8006a9c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006aa0:	d2e8      	bcs.n	8006a74 <quorem+0xb0>
 8006aa2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006aa6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006aaa:	b922      	cbnz	r2, 8006ab6 <quorem+0xf2>
 8006aac:	3b04      	subs	r3, #4
 8006aae:	429d      	cmp	r5, r3
 8006ab0:	461a      	mov	r2, r3
 8006ab2:	d30a      	bcc.n	8006aca <quorem+0x106>
 8006ab4:	613c      	str	r4, [r7, #16]
 8006ab6:	4630      	mov	r0, r6
 8006ab8:	b003      	add	sp, #12
 8006aba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006abe:	6812      	ldr	r2, [r2, #0]
 8006ac0:	3b04      	subs	r3, #4
 8006ac2:	2a00      	cmp	r2, #0
 8006ac4:	d1cc      	bne.n	8006a60 <quorem+0x9c>
 8006ac6:	3c01      	subs	r4, #1
 8006ac8:	e7c7      	b.n	8006a5a <quorem+0x96>
 8006aca:	6812      	ldr	r2, [r2, #0]
 8006acc:	3b04      	subs	r3, #4
 8006ace:	2a00      	cmp	r2, #0
 8006ad0:	d1f0      	bne.n	8006ab4 <quorem+0xf0>
 8006ad2:	3c01      	subs	r4, #1
 8006ad4:	e7eb      	b.n	8006aae <quorem+0xea>
 8006ad6:	2000      	movs	r0, #0
 8006ad8:	e7ee      	b.n	8006ab8 <quorem+0xf4>
 8006ada:	0000      	movs	r0, r0
 8006adc:	0000      	movs	r0, r0
	...

08006ae0 <_dtoa_r>:
 8006ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ae4:	ed2d 8b04 	vpush	{d8-d9}
 8006ae8:	ec57 6b10 	vmov	r6, r7, d0
 8006aec:	b093      	sub	sp, #76	; 0x4c
 8006aee:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006af0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006af4:	9106      	str	r1, [sp, #24]
 8006af6:	ee10 aa10 	vmov	sl, s0
 8006afa:	4604      	mov	r4, r0
 8006afc:	9209      	str	r2, [sp, #36]	; 0x24
 8006afe:	930c      	str	r3, [sp, #48]	; 0x30
 8006b00:	46bb      	mov	fp, r7
 8006b02:	b975      	cbnz	r5, 8006b22 <_dtoa_r+0x42>
 8006b04:	2010      	movs	r0, #16
 8006b06:	f000 fffd 	bl	8007b04 <malloc>
 8006b0a:	4602      	mov	r2, r0
 8006b0c:	6260      	str	r0, [r4, #36]	; 0x24
 8006b0e:	b920      	cbnz	r0, 8006b1a <_dtoa_r+0x3a>
 8006b10:	4ba7      	ldr	r3, [pc, #668]	; (8006db0 <_dtoa_r+0x2d0>)
 8006b12:	21ea      	movs	r1, #234	; 0xea
 8006b14:	48a7      	ldr	r0, [pc, #668]	; (8006db4 <_dtoa_r+0x2d4>)
 8006b16:	f001 fe45 	bl	80087a4 <__assert_func>
 8006b1a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006b1e:	6005      	str	r5, [r0, #0]
 8006b20:	60c5      	str	r5, [r0, #12]
 8006b22:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006b24:	6819      	ldr	r1, [r3, #0]
 8006b26:	b151      	cbz	r1, 8006b3e <_dtoa_r+0x5e>
 8006b28:	685a      	ldr	r2, [r3, #4]
 8006b2a:	604a      	str	r2, [r1, #4]
 8006b2c:	2301      	movs	r3, #1
 8006b2e:	4093      	lsls	r3, r2
 8006b30:	608b      	str	r3, [r1, #8]
 8006b32:	4620      	mov	r0, r4
 8006b34:	f001 f83c 	bl	8007bb0 <_Bfree>
 8006b38:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	601a      	str	r2, [r3, #0]
 8006b3e:	1e3b      	subs	r3, r7, #0
 8006b40:	bfaa      	itet	ge
 8006b42:	2300      	movge	r3, #0
 8006b44:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8006b48:	f8c8 3000 	strge.w	r3, [r8]
 8006b4c:	4b9a      	ldr	r3, [pc, #616]	; (8006db8 <_dtoa_r+0x2d8>)
 8006b4e:	bfbc      	itt	lt
 8006b50:	2201      	movlt	r2, #1
 8006b52:	f8c8 2000 	strlt.w	r2, [r8]
 8006b56:	ea33 030b 	bics.w	r3, r3, fp
 8006b5a:	d11b      	bne.n	8006b94 <_dtoa_r+0xb4>
 8006b5c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006b5e:	f242 730f 	movw	r3, #9999	; 0x270f
 8006b62:	6013      	str	r3, [r2, #0]
 8006b64:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006b68:	4333      	orrs	r3, r6
 8006b6a:	f000 8592 	beq.w	8007692 <_dtoa_r+0xbb2>
 8006b6e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006b70:	b963      	cbnz	r3, 8006b8c <_dtoa_r+0xac>
 8006b72:	4b92      	ldr	r3, [pc, #584]	; (8006dbc <_dtoa_r+0x2dc>)
 8006b74:	e022      	b.n	8006bbc <_dtoa_r+0xdc>
 8006b76:	4b92      	ldr	r3, [pc, #584]	; (8006dc0 <_dtoa_r+0x2e0>)
 8006b78:	9301      	str	r3, [sp, #4]
 8006b7a:	3308      	adds	r3, #8
 8006b7c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006b7e:	6013      	str	r3, [r2, #0]
 8006b80:	9801      	ldr	r0, [sp, #4]
 8006b82:	b013      	add	sp, #76	; 0x4c
 8006b84:	ecbd 8b04 	vpop	{d8-d9}
 8006b88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b8c:	4b8b      	ldr	r3, [pc, #556]	; (8006dbc <_dtoa_r+0x2dc>)
 8006b8e:	9301      	str	r3, [sp, #4]
 8006b90:	3303      	adds	r3, #3
 8006b92:	e7f3      	b.n	8006b7c <_dtoa_r+0x9c>
 8006b94:	2200      	movs	r2, #0
 8006b96:	2300      	movs	r3, #0
 8006b98:	4650      	mov	r0, sl
 8006b9a:	4659      	mov	r1, fp
 8006b9c:	f7f9 ffb4 	bl	8000b08 <__aeabi_dcmpeq>
 8006ba0:	ec4b ab19 	vmov	d9, sl, fp
 8006ba4:	4680      	mov	r8, r0
 8006ba6:	b158      	cbz	r0, 8006bc0 <_dtoa_r+0xe0>
 8006ba8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006baa:	2301      	movs	r3, #1
 8006bac:	6013      	str	r3, [r2, #0]
 8006bae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	f000 856b 	beq.w	800768c <_dtoa_r+0xbac>
 8006bb6:	4883      	ldr	r0, [pc, #524]	; (8006dc4 <_dtoa_r+0x2e4>)
 8006bb8:	6018      	str	r0, [r3, #0]
 8006bba:	1e43      	subs	r3, r0, #1
 8006bbc:	9301      	str	r3, [sp, #4]
 8006bbe:	e7df      	b.n	8006b80 <_dtoa_r+0xa0>
 8006bc0:	ec4b ab10 	vmov	d0, sl, fp
 8006bc4:	aa10      	add	r2, sp, #64	; 0x40
 8006bc6:	a911      	add	r1, sp, #68	; 0x44
 8006bc8:	4620      	mov	r0, r4
 8006bca:	f001 fad9 	bl	8008180 <__d2b>
 8006bce:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8006bd2:	ee08 0a10 	vmov	s16, r0
 8006bd6:	2d00      	cmp	r5, #0
 8006bd8:	f000 8084 	beq.w	8006ce4 <_dtoa_r+0x204>
 8006bdc:	ee19 3a90 	vmov	r3, s19
 8006be0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006be4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006be8:	4656      	mov	r6, sl
 8006bea:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006bee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006bf2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8006bf6:	4b74      	ldr	r3, [pc, #464]	; (8006dc8 <_dtoa_r+0x2e8>)
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	4630      	mov	r0, r6
 8006bfc:	4639      	mov	r1, r7
 8006bfe:	f7f9 fb63 	bl	80002c8 <__aeabi_dsub>
 8006c02:	a365      	add	r3, pc, #404	; (adr r3, 8006d98 <_dtoa_r+0x2b8>)
 8006c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c08:	f7f9 fd16 	bl	8000638 <__aeabi_dmul>
 8006c0c:	a364      	add	r3, pc, #400	; (adr r3, 8006da0 <_dtoa_r+0x2c0>)
 8006c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c12:	f7f9 fb5b 	bl	80002cc <__adddf3>
 8006c16:	4606      	mov	r6, r0
 8006c18:	4628      	mov	r0, r5
 8006c1a:	460f      	mov	r7, r1
 8006c1c:	f7f9 fca2 	bl	8000564 <__aeabi_i2d>
 8006c20:	a361      	add	r3, pc, #388	; (adr r3, 8006da8 <_dtoa_r+0x2c8>)
 8006c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c26:	f7f9 fd07 	bl	8000638 <__aeabi_dmul>
 8006c2a:	4602      	mov	r2, r0
 8006c2c:	460b      	mov	r3, r1
 8006c2e:	4630      	mov	r0, r6
 8006c30:	4639      	mov	r1, r7
 8006c32:	f7f9 fb4b 	bl	80002cc <__adddf3>
 8006c36:	4606      	mov	r6, r0
 8006c38:	460f      	mov	r7, r1
 8006c3a:	f7f9 ffad 	bl	8000b98 <__aeabi_d2iz>
 8006c3e:	2200      	movs	r2, #0
 8006c40:	9000      	str	r0, [sp, #0]
 8006c42:	2300      	movs	r3, #0
 8006c44:	4630      	mov	r0, r6
 8006c46:	4639      	mov	r1, r7
 8006c48:	f7f9 ff68 	bl	8000b1c <__aeabi_dcmplt>
 8006c4c:	b150      	cbz	r0, 8006c64 <_dtoa_r+0x184>
 8006c4e:	9800      	ldr	r0, [sp, #0]
 8006c50:	f7f9 fc88 	bl	8000564 <__aeabi_i2d>
 8006c54:	4632      	mov	r2, r6
 8006c56:	463b      	mov	r3, r7
 8006c58:	f7f9 ff56 	bl	8000b08 <__aeabi_dcmpeq>
 8006c5c:	b910      	cbnz	r0, 8006c64 <_dtoa_r+0x184>
 8006c5e:	9b00      	ldr	r3, [sp, #0]
 8006c60:	3b01      	subs	r3, #1
 8006c62:	9300      	str	r3, [sp, #0]
 8006c64:	9b00      	ldr	r3, [sp, #0]
 8006c66:	2b16      	cmp	r3, #22
 8006c68:	d85a      	bhi.n	8006d20 <_dtoa_r+0x240>
 8006c6a:	9a00      	ldr	r2, [sp, #0]
 8006c6c:	4b57      	ldr	r3, [pc, #348]	; (8006dcc <_dtoa_r+0x2ec>)
 8006c6e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c76:	ec51 0b19 	vmov	r0, r1, d9
 8006c7a:	f7f9 ff4f 	bl	8000b1c <__aeabi_dcmplt>
 8006c7e:	2800      	cmp	r0, #0
 8006c80:	d050      	beq.n	8006d24 <_dtoa_r+0x244>
 8006c82:	9b00      	ldr	r3, [sp, #0]
 8006c84:	3b01      	subs	r3, #1
 8006c86:	9300      	str	r3, [sp, #0]
 8006c88:	2300      	movs	r3, #0
 8006c8a:	930b      	str	r3, [sp, #44]	; 0x2c
 8006c8c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006c8e:	1b5d      	subs	r5, r3, r5
 8006c90:	1e6b      	subs	r3, r5, #1
 8006c92:	9305      	str	r3, [sp, #20]
 8006c94:	bf45      	ittet	mi
 8006c96:	f1c5 0301 	rsbmi	r3, r5, #1
 8006c9a:	9304      	strmi	r3, [sp, #16]
 8006c9c:	2300      	movpl	r3, #0
 8006c9e:	2300      	movmi	r3, #0
 8006ca0:	bf4c      	ite	mi
 8006ca2:	9305      	strmi	r3, [sp, #20]
 8006ca4:	9304      	strpl	r3, [sp, #16]
 8006ca6:	9b00      	ldr	r3, [sp, #0]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	db3d      	blt.n	8006d28 <_dtoa_r+0x248>
 8006cac:	9b05      	ldr	r3, [sp, #20]
 8006cae:	9a00      	ldr	r2, [sp, #0]
 8006cb0:	920a      	str	r2, [sp, #40]	; 0x28
 8006cb2:	4413      	add	r3, r2
 8006cb4:	9305      	str	r3, [sp, #20]
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	9307      	str	r3, [sp, #28]
 8006cba:	9b06      	ldr	r3, [sp, #24]
 8006cbc:	2b09      	cmp	r3, #9
 8006cbe:	f200 8089 	bhi.w	8006dd4 <_dtoa_r+0x2f4>
 8006cc2:	2b05      	cmp	r3, #5
 8006cc4:	bfc4      	itt	gt
 8006cc6:	3b04      	subgt	r3, #4
 8006cc8:	9306      	strgt	r3, [sp, #24]
 8006cca:	9b06      	ldr	r3, [sp, #24]
 8006ccc:	f1a3 0302 	sub.w	r3, r3, #2
 8006cd0:	bfcc      	ite	gt
 8006cd2:	2500      	movgt	r5, #0
 8006cd4:	2501      	movle	r5, #1
 8006cd6:	2b03      	cmp	r3, #3
 8006cd8:	f200 8087 	bhi.w	8006dea <_dtoa_r+0x30a>
 8006cdc:	e8df f003 	tbb	[pc, r3]
 8006ce0:	59383a2d 	.word	0x59383a2d
 8006ce4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006ce8:	441d      	add	r5, r3
 8006cea:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006cee:	2b20      	cmp	r3, #32
 8006cf0:	bfc1      	itttt	gt
 8006cf2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006cf6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006cfa:	fa0b f303 	lslgt.w	r3, fp, r3
 8006cfe:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006d02:	bfda      	itte	le
 8006d04:	f1c3 0320 	rsble	r3, r3, #32
 8006d08:	fa06 f003 	lslle.w	r0, r6, r3
 8006d0c:	4318      	orrgt	r0, r3
 8006d0e:	f7f9 fc19 	bl	8000544 <__aeabi_ui2d>
 8006d12:	2301      	movs	r3, #1
 8006d14:	4606      	mov	r6, r0
 8006d16:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006d1a:	3d01      	subs	r5, #1
 8006d1c:	930e      	str	r3, [sp, #56]	; 0x38
 8006d1e:	e76a      	b.n	8006bf6 <_dtoa_r+0x116>
 8006d20:	2301      	movs	r3, #1
 8006d22:	e7b2      	b.n	8006c8a <_dtoa_r+0x1aa>
 8006d24:	900b      	str	r0, [sp, #44]	; 0x2c
 8006d26:	e7b1      	b.n	8006c8c <_dtoa_r+0x1ac>
 8006d28:	9b04      	ldr	r3, [sp, #16]
 8006d2a:	9a00      	ldr	r2, [sp, #0]
 8006d2c:	1a9b      	subs	r3, r3, r2
 8006d2e:	9304      	str	r3, [sp, #16]
 8006d30:	4253      	negs	r3, r2
 8006d32:	9307      	str	r3, [sp, #28]
 8006d34:	2300      	movs	r3, #0
 8006d36:	930a      	str	r3, [sp, #40]	; 0x28
 8006d38:	e7bf      	b.n	8006cba <_dtoa_r+0x1da>
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	9308      	str	r3, [sp, #32]
 8006d3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	dc55      	bgt.n	8006df0 <_dtoa_r+0x310>
 8006d44:	2301      	movs	r3, #1
 8006d46:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006d4a:	461a      	mov	r2, r3
 8006d4c:	9209      	str	r2, [sp, #36]	; 0x24
 8006d4e:	e00c      	b.n	8006d6a <_dtoa_r+0x28a>
 8006d50:	2301      	movs	r3, #1
 8006d52:	e7f3      	b.n	8006d3c <_dtoa_r+0x25c>
 8006d54:	2300      	movs	r3, #0
 8006d56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006d58:	9308      	str	r3, [sp, #32]
 8006d5a:	9b00      	ldr	r3, [sp, #0]
 8006d5c:	4413      	add	r3, r2
 8006d5e:	9302      	str	r3, [sp, #8]
 8006d60:	3301      	adds	r3, #1
 8006d62:	2b01      	cmp	r3, #1
 8006d64:	9303      	str	r3, [sp, #12]
 8006d66:	bfb8      	it	lt
 8006d68:	2301      	movlt	r3, #1
 8006d6a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	6042      	str	r2, [r0, #4]
 8006d70:	2204      	movs	r2, #4
 8006d72:	f102 0614 	add.w	r6, r2, #20
 8006d76:	429e      	cmp	r6, r3
 8006d78:	6841      	ldr	r1, [r0, #4]
 8006d7a:	d93d      	bls.n	8006df8 <_dtoa_r+0x318>
 8006d7c:	4620      	mov	r0, r4
 8006d7e:	f000 fed7 	bl	8007b30 <_Balloc>
 8006d82:	9001      	str	r0, [sp, #4]
 8006d84:	2800      	cmp	r0, #0
 8006d86:	d13b      	bne.n	8006e00 <_dtoa_r+0x320>
 8006d88:	4b11      	ldr	r3, [pc, #68]	; (8006dd0 <_dtoa_r+0x2f0>)
 8006d8a:	4602      	mov	r2, r0
 8006d8c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006d90:	e6c0      	b.n	8006b14 <_dtoa_r+0x34>
 8006d92:	2301      	movs	r3, #1
 8006d94:	e7df      	b.n	8006d56 <_dtoa_r+0x276>
 8006d96:	bf00      	nop
 8006d98:	636f4361 	.word	0x636f4361
 8006d9c:	3fd287a7 	.word	0x3fd287a7
 8006da0:	8b60c8b3 	.word	0x8b60c8b3
 8006da4:	3fc68a28 	.word	0x3fc68a28
 8006da8:	509f79fb 	.word	0x509f79fb
 8006dac:	3fd34413 	.word	0x3fd34413
 8006db0:	08008a25 	.word	0x08008a25
 8006db4:	08008a3c 	.word	0x08008a3c
 8006db8:	7ff00000 	.word	0x7ff00000
 8006dbc:	08008a21 	.word	0x08008a21
 8006dc0:	08008a18 	.word	0x08008a18
 8006dc4:	080089f5 	.word	0x080089f5
 8006dc8:	3ff80000 	.word	0x3ff80000
 8006dcc:	08008b90 	.word	0x08008b90
 8006dd0:	08008a97 	.word	0x08008a97
 8006dd4:	2501      	movs	r5, #1
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	9306      	str	r3, [sp, #24]
 8006dda:	9508      	str	r5, [sp, #32]
 8006ddc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006de0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006de4:	2200      	movs	r2, #0
 8006de6:	2312      	movs	r3, #18
 8006de8:	e7b0      	b.n	8006d4c <_dtoa_r+0x26c>
 8006dea:	2301      	movs	r3, #1
 8006dec:	9308      	str	r3, [sp, #32]
 8006dee:	e7f5      	b.n	8006ddc <_dtoa_r+0x2fc>
 8006df0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006df2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006df6:	e7b8      	b.n	8006d6a <_dtoa_r+0x28a>
 8006df8:	3101      	adds	r1, #1
 8006dfa:	6041      	str	r1, [r0, #4]
 8006dfc:	0052      	lsls	r2, r2, #1
 8006dfe:	e7b8      	b.n	8006d72 <_dtoa_r+0x292>
 8006e00:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006e02:	9a01      	ldr	r2, [sp, #4]
 8006e04:	601a      	str	r2, [r3, #0]
 8006e06:	9b03      	ldr	r3, [sp, #12]
 8006e08:	2b0e      	cmp	r3, #14
 8006e0a:	f200 809d 	bhi.w	8006f48 <_dtoa_r+0x468>
 8006e0e:	2d00      	cmp	r5, #0
 8006e10:	f000 809a 	beq.w	8006f48 <_dtoa_r+0x468>
 8006e14:	9b00      	ldr	r3, [sp, #0]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	dd32      	ble.n	8006e80 <_dtoa_r+0x3a0>
 8006e1a:	4ab7      	ldr	r2, [pc, #732]	; (80070f8 <_dtoa_r+0x618>)
 8006e1c:	f003 030f 	and.w	r3, r3, #15
 8006e20:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006e24:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006e28:	9b00      	ldr	r3, [sp, #0]
 8006e2a:	05d8      	lsls	r0, r3, #23
 8006e2c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8006e30:	d516      	bpl.n	8006e60 <_dtoa_r+0x380>
 8006e32:	4bb2      	ldr	r3, [pc, #712]	; (80070fc <_dtoa_r+0x61c>)
 8006e34:	ec51 0b19 	vmov	r0, r1, d9
 8006e38:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006e3c:	f7f9 fd26 	bl	800088c <__aeabi_ddiv>
 8006e40:	f007 070f 	and.w	r7, r7, #15
 8006e44:	4682      	mov	sl, r0
 8006e46:	468b      	mov	fp, r1
 8006e48:	2503      	movs	r5, #3
 8006e4a:	4eac      	ldr	r6, [pc, #688]	; (80070fc <_dtoa_r+0x61c>)
 8006e4c:	b957      	cbnz	r7, 8006e64 <_dtoa_r+0x384>
 8006e4e:	4642      	mov	r2, r8
 8006e50:	464b      	mov	r3, r9
 8006e52:	4650      	mov	r0, sl
 8006e54:	4659      	mov	r1, fp
 8006e56:	f7f9 fd19 	bl	800088c <__aeabi_ddiv>
 8006e5a:	4682      	mov	sl, r0
 8006e5c:	468b      	mov	fp, r1
 8006e5e:	e028      	b.n	8006eb2 <_dtoa_r+0x3d2>
 8006e60:	2502      	movs	r5, #2
 8006e62:	e7f2      	b.n	8006e4a <_dtoa_r+0x36a>
 8006e64:	07f9      	lsls	r1, r7, #31
 8006e66:	d508      	bpl.n	8006e7a <_dtoa_r+0x39a>
 8006e68:	4640      	mov	r0, r8
 8006e6a:	4649      	mov	r1, r9
 8006e6c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006e70:	f7f9 fbe2 	bl	8000638 <__aeabi_dmul>
 8006e74:	3501      	adds	r5, #1
 8006e76:	4680      	mov	r8, r0
 8006e78:	4689      	mov	r9, r1
 8006e7a:	107f      	asrs	r7, r7, #1
 8006e7c:	3608      	adds	r6, #8
 8006e7e:	e7e5      	b.n	8006e4c <_dtoa_r+0x36c>
 8006e80:	f000 809b 	beq.w	8006fba <_dtoa_r+0x4da>
 8006e84:	9b00      	ldr	r3, [sp, #0]
 8006e86:	4f9d      	ldr	r7, [pc, #628]	; (80070fc <_dtoa_r+0x61c>)
 8006e88:	425e      	negs	r6, r3
 8006e8a:	4b9b      	ldr	r3, [pc, #620]	; (80070f8 <_dtoa_r+0x618>)
 8006e8c:	f006 020f 	and.w	r2, r6, #15
 8006e90:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e98:	ec51 0b19 	vmov	r0, r1, d9
 8006e9c:	f7f9 fbcc 	bl	8000638 <__aeabi_dmul>
 8006ea0:	1136      	asrs	r6, r6, #4
 8006ea2:	4682      	mov	sl, r0
 8006ea4:	468b      	mov	fp, r1
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	2502      	movs	r5, #2
 8006eaa:	2e00      	cmp	r6, #0
 8006eac:	d17a      	bne.n	8006fa4 <_dtoa_r+0x4c4>
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d1d3      	bne.n	8006e5a <_dtoa_r+0x37a>
 8006eb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	f000 8082 	beq.w	8006fbe <_dtoa_r+0x4de>
 8006eba:	4b91      	ldr	r3, [pc, #580]	; (8007100 <_dtoa_r+0x620>)
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	4650      	mov	r0, sl
 8006ec0:	4659      	mov	r1, fp
 8006ec2:	f7f9 fe2b 	bl	8000b1c <__aeabi_dcmplt>
 8006ec6:	2800      	cmp	r0, #0
 8006ec8:	d079      	beq.n	8006fbe <_dtoa_r+0x4de>
 8006eca:	9b03      	ldr	r3, [sp, #12]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d076      	beq.n	8006fbe <_dtoa_r+0x4de>
 8006ed0:	9b02      	ldr	r3, [sp, #8]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	dd36      	ble.n	8006f44 <_dtoa_r+0x464>
 8006ed6:	9b00      	ldr	r3, [sp, #0]
 8006ed8:	4650      	mov	r0, sl
 8006eda:	4659      	mov	r1, fp
 8006edc:	1e5f      	subs	r7, r3, #1
 8006ede:	2200      	movs	r2, #0
 8006ee0:	4b88      	ldr	r3, [pc, #544]	; (8007104 <_dtoa_r+0x624>)
 8006ee2:	f7f9 fba9 	bl	8000638 <__aeabi_dmul>
 8006ee6:	9e02      	ldr	r6, [sp, #8]
 8006ee8:	4682      	mov	sl, r0
 8006eea:	468b      	mov	fp, r1
 8006eec:	3501      	adds	r5, #1
 8006eee:	4628      	mov	r0, r5
 8006ef0:	f7f9 fb38 	bl	8000564 <__aeabi_i2d>
 8006ef4:	4652      	mov	r2, sl
 8006ef6:	465b      	mov	r3, fp
 8006ef8:	f7f9 fb9e 	bl	8000638 <__aeabi_dmul>
 8006efc:	4b82      	ldr	r3, [pc, #520]	; (8007108 <_dtoa_r+0x628>)
 8006efe:	2200      	movs	r2, #0
 8006f00:	f7f9 f9e4 	bl	80002cc <__adddf3>
 8006f04:	46d0      	mov	r8, sl
 8006f06:	46d9      	mov	r9, fp
 8006f08:	4682      	mov	sl, r0
 8006f0a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8006f0e:	2e00      	cmp	r6, #0
 8006f10:	d158      	bne.n	8006fc4 <_dtoa_r+0x4e4>
 8006f12:	4b7e      	ldr	r3, [pc, #504]	; (800710c <_dtoa_r+0x62c>)
 8006f14:	2200      	movs	r2, #0
 8006f16:	4640      	mov	r0, r8
 8006f18:	4649      	mov	r1, r9
 8006f1a:	f7f9 f9d5 	bl	80002c8 <__aeabi_dsub>
 8006f1e:	4652      	mov	r2, sl
 8006f20:	465b      	mov	r3, fp
 8006f22:	4680      	mov	r8, r0
 8006f24:	4689      	mov	r9, r1
 8006f26:	f7f9 fe17 	bl	8000b58 <__aeabi_dcmpgt>
 8006f2a:	2800      	cmp	r0, #0
 8006f2c:	f040 8295 	bne.w	800745a <_dtoa_r+0x97a>
 8006f30:	4652      	mov	r2, sl
 8006f32:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006f36:	4640      	mov	r0, r8
 8006f38:	4649      	mov	r1, r9
 8006f3a:	f7f9 fdef 	bl	8000b1c <__aeabi_dcmplt>
 8006f3e:	2800      	cmp	r0, #0
 8006f40:	f040 8289 	bne.w	8007456 <_dtoa_r+0x976>
 8006f44:	ec5b ab19 	vmov	sl, fp, d9
 8006f48:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	f2c0 8148 	blt.w	80071e0 <_dtoa_r+0x700>
 8006f50:	9a00      	ldr	r2, [sp, #0]
 8006f52:	2a0e      	cmp	r2, #14
 8006f54:	f300 8144 	bgt.w	80071e0 <_dtoa_r+0x700>
 8006f58:	4b67      	ldr	r3, [pc, #412]	; (80070f8 <_dtoa_r+0x618>)
 8006f5a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006f5e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006f62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	f280 80d5 	bge.w	8007114 <_dtoa_r+0x634>
 8006f6a:	9b03      	ldr	r3, [sp, #12]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	f300 80d1 	bgt.w	8007114 <_dtoa_r+0x634>
 8006f72:	f040 826f 	bne.w	8007454 <_dtoa_r+0x974>
 8006f76:	4b65      	ldr	r3, [pc, #404]	; (800710c <_dtoa_r+0x62c>)
 8006f78:	2200      	movs	r2, #0
 8006f7a:	4640      	mov	r0, r8
 8006f7c:	4649      	mov	r1, r9
 8006f7e:	f7f9 fb5b 	bl	8000638 <__aeabi_dmul>
 8006f82:	4652      	mov	r2, sl
 8006f84:	465b      	mov	r3, fp
 8006f86:	f7f9 fddd 	bl	8000b44 <__aeabi_dcmpge>
 8006f8a:	9e03      	ldr	r6, [sp, #12]
 8006f8c:	4637      	mov	r7, r6
 8006f8e:	2800      	cmp	r0, #0
 8006f90:	f040 8245 	bne.w	800741e <_dtoa_r+0x93e>
 8006f94:	9d01      	ldr	r5, [sp, #4]
 8006f96:	2331      	movs	r3, #49	; 0x31
 8006f98:	f805 3b01 	strb.w	r3, [r5], #1
 8006f9c:	9b00      	ldr	r3, [sp, #0]
 8006f9e:	3301      	adds	r3, #1
 8006fa0:	9300      	str	r3, [sp, #0]
 8006fa2:	e240      	b.n	8007426 <_dtoa_r+0x946>
 8006fa4:	07f2      	lsls	r2, r6, #31
 8006fa6:	d505      	bpl.n	8006fb4 <_dtoa_r+0x4d4>
 8006fa8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006fac:	f7f9 fb44 	bl	8000638 <__aeabi_dmul>
 8006fb0:	3501      	adds	r5, #1
 8006fb2:	2301      	movs	r3, #1
 8006fb4:	1076      	asrs	r6, r6, #1
 8006fb6:	3708      	adds	r7, #8
 8006fb8:	e777      	b.n	8006eaa <_dtoa_r+0x3ca>
 8006fba:	2502      	movs	r5, #2
 8006fbc:	e779      	b.n	8006eb2 <_dtoa_r+0x3d2>
 8006fbe:	9f00      	ldr	r7, [sp, #0]
 8006fc0:	9e03      	ldr	r6, [sp, #12]
 8006fc2:	e794      	b.n	8006eee <_dtoa_r+0x40e>
 8006fc4:	9901      	ldr	r1, [sp, #4]
 8006fc6:	4b4c      	ldr	r3, [pc, #304]	; (80070f8 <_dtoa_r+0x618>)
 8006fc8:	4431      	add	r1, r6
 8006fca:	910d      	str	r1, [sp, #52]	; 0x34
 8006fcc:	9908      	ldr	r1, [sp, #32]
 8006fce:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006fd2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006fd6:	2900      	cmp	r1, #0
 8006fd8:	d043      	beq.n	8007062 <_dtoa_r+0x582>
 8006fda:	494d      	ldr	r1, [pc, #308]	; (8007110 <_dtoa_r+0x630>)
 8006fdc:	2000      	movs	r0, #0
 8006fde:	f7f9 fc55 	bl	800088c <__aeabi_ddiv>
 8006fe2:	4652      	mov	r2, sl
 8006fe4:	465b      	mov	r3, fp
 8006fe6:	f7f9 f96f 	bl	80002c8 <__aeabi_dsub>
 8006fea:	9d01      	ldr	r5, [sp, #4]
 8006fec:	4682      	mov	sl, r0
 8006fee:	468b      	mov	fp, r1
 8006ff0:	4649      	mov	r1, r9
 8006ff2:	4640      	mov	r0, r8
 8006ff4:	f7f9 fdd0 	bl	8000b98 <__aeabi_d2iz>
 8006ff8:	4606      	mov	r6, r0
 8006ffa:	f7f9 fab3 	bl	8000564 <__aeabi_i2d>
 8006ffe:	4602      	mov	r2, r0
 8007000:	460b      	mov	r3, r1
 8007002:	4640      	mov	r0, r8
 8007004:	4649      	mov	r1, r9
 8007006:	f7f9 f95f 	bl	80002c8 <__aeabi_dsub>
 800700a:	3630      	adds	r6, #48	; 0x30
 800700c:	f805 6b01 	strb.w	r6, [r5], #1
 8007010:	4652      	mov	r2, sl
 8007012:	465b      	mov	r3, fp
 8007014:	4680      	mov	r8, r0
 8007016:	4689      	mov	r9, r1
 8007018:	f7f9 fd80 	bl	8000b1c <__aeabi_dcmplt>
 800701c:	2800      	cmp	r0, #0
 800701e:	d163      	bne.n	80070e8 <_dtoa_r+0x608>
 8007020:	4642      	mov	r2, r8
 8007022:	464b      	mov	r3, r9
 8007024:	4936      	ldr	r1, [pc, #216]	; (8007100 <_dtoa_r+0x620>)
 8007026:	2000      	movs	r0, #0
 8007028:	f7f9 f94e 	bl	80002c8 <__aeabi_dsub>
 800702c:	4652      	mov	r2, sl
 800702e:	465b      	mov	r3, fp
 8007030:	f7f9 fd74 	bl	8000b1c <__aeabi_dcmplt>
 8007034:	2800      	cmp	r0, #0
 8007036:	f040 80b5 	bne.w	80071a4 <_dtoa_r+0x6c4>
 800703a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800703c:	429d      	cmp	r5, r3
 800703e:	d081      	beq.n	8006f44 <_dtoa_r+0x464>
 8007040:	4b30      	ldr	r3, [pc, #192]	; (8007104 <_dtoa_r+0x624>)
 8007042:	2200      	movs	r2, #0
 8007044:	4650      	mov	r0, sl
 8007046:	4659      	mov	r1, fp
 8007048:	f7f9 faf6 	bl	8000638 <__aeabi_dmul>
 800704c:	4b2d      	ldr	r3, [pc, #180]	; (8007104 <_dtoa_r+0x624>)
 800704e:	4682      	mov	sl, r0
 8007050:	468b      	mov	fp, r1
 8007052:	4640      	mov	r0, r8
 8007054:	4649      	mov	r1, r9
 8007056:	2200      	movs	r2, #0
 8007058:	f7f9 faee 	bl	8000638 <__aeabi_dmul>
 800705c:	4680      	mov	r8, r0
 800705e:	4689      	mov	r9, r1
 8007060:	e7c6      	b.n	8006ff0 <_dtoa_r+0x510>
 8007062:	4650      	mov	r0, sl
 8007064:	4659      	mov	r1, fp
 8007066:	f7f9 fae7 	bl	8000638 <__aeabi_dmul>
 800706a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800706c:	9d01      	ldr	r5, [sp, #4]
 800706e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007070:	4682      	mov	sl, r0
 8007072:	468b      	mov	fp, r1
 8007074:	4649      	mov	r1, r9
 8007076:	4640      	mov	r0, r8
 8007078:	f7f9 fd8e 	bl	8000b98 <__aeabi_d2iz>
 800707c:	4606      	mov	r6, r0
 800707e:	f7f9 fa71 	bl	8000564 <__aeabi_i2d>
 8007082:	3630      	adds	r6, #48	; 0x30
 8007084:	4602      	mov	r2, r0
 8007086:	460b      	mov	r3, r1
 8007088:	4640      	mov	r0, r8
 800708a:	4649      	mov	r1, r9
 800708c:	f7f9 f91c 	bl	80002c8 <__aeabi_dsub>
 8007090:	f805 6b01 	strb.w	r6, [r5], #1
 8007094:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007096:	429d      	cmp	r5, r3
 8007098:	4680      	mov	r8, r0
 800709a:	4689      	mov	r9, r1
 800709c:	f04f 0200 	mov.w	r2, #0
 80070a0:	d124      	bne.n	80070ec <_dtoa_r+0x60c>
 80070a2:	4b1b      	ldr	r3, [pc, #108]	; (8007110 <_dtoa_r+0x630>)
 80070a4:	4650      	mov	r0, sl
 80070a6:	4659      	mov	r1, fp
 80070a8:	f7f9 f910 	bl	80002cc <__adddf3>
 80070ac:	4602      	mov	r2, r0
 80070ae:	460b      	mov	r3, r1
 80070b0:	4640      	mov	r0, r8
 80070b2:	4649      	mov	r1, r9
 80070b4:	f7f9 fd50 	bl	8000b58 <__aeabi_dcmpgt>
 80070b8:	2800      	cmp	r0, #0
 80070ba:	d173      	bne.n	80071a4 <_dtoa_r+0x6c4>
 80070bc:	4652      	mov	r2, sl
 80070be:	465b      	mov	r3, fp
 80070c0:	4913      	ldr	r1, [pc, #76]	; (8007110 <_dtoa_r+0x630>)
 80070c2:	2000      	movs	r0, #0
 80070c4:	f7f9 f900 	bl	80002c8 <__aeabi_dsub>
 80070c8:	4602      	mov	r2, r0
 80070ca:	460b      	mov	r3, r1
 80070cc:	4640      	mov	r0, r8
 80070ce:	4649      	mov	r1, r9
 80070d0:	f7f9 fd24 	bl	8000b1c <__aeabi_dcmplt>
 80070d4:	2800      	cmp	r0, #0
 80070d6:	f43f af35 	beq.w	8006f44 <_dtoa_r+0x464>
 80070da:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80070dc:	1e6b      	subs	r3, r5, #1
 80070de:	930f      	str	r3, [sp, #60]	; 0x3c
 80070e0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80070e4:	2b30      	cmp	r3, #48	; 0x30
 80070e6:	d0f8      	beq.n	80070da <_dtoa_r+0x5fa>
 80070e8:	9700      	str	r7, [sp, #0]
 80070ea:	e049      	b.n	8007180 <_dtoa_r+0x6a0>
 80070ec:	4b05      	ldr	r3, [pc, #20]	; (8007104 <_dtoa_r+0x624>)
 80070ee:	f7f9 faa3 	bl	8000638 <__aeabi_dmul>
 80070f2:	4680      	mov	r8, r0
 80070f4:	4689      	mov	r9, r1
 80070f6:	e7bd      	b.n	8007074 <_dtoa_r+0x594>
 80070f8:	08008b90 	.word	0x08008b90
 80070fc:	08008b68 	.word	0x08008b68
 8007100:	3ff00000 	.word	0x3ff00000
 8007104:	40240000 	.word	0x40240000
 8007108:	401c0000 	.word	0x401c0000
 800710c:	40140000 	.word	0x40140000
 8007110:	3fe00000 	.word	0x3fe00000
 8007114:	9d01      	ldr	r5, [sp, #4]
 8007116:	4656      	mov	r6, sl
 8007118:	465f      	mov	r7, fp
 800711a:	4642      	mov	r2, r8
 800711c:	464b      	mov	r3, r9
 800711e:	4630      	mov	r0, r6
 8007120:	4639      	mov	r1, r7
 8007122:	f7f9 fbb3 	bl	800088c <__aeabi_ddiv>
 8007126:	f7f9 fd37 	bl	8000b98 <__aeabi_d2iz>
 800712a:	4682      	mov	sl, r0
 800712c:	f7f9 fa1a 	bl	8000564 <__aeabi_i2d>
 8007130:	4642      	mov	r2, r8
 8007132:	464b      	mov	r3, r9
 8007134:	f7f9 fa80 	bl	8000638 <__aeabi_dmul>
 8007138:	4602      	mov	r2, r0
 800713a:	460b      	mov	r3, r1
 800713c:	4630      	mov	r0, r6
 800713e:	4639      	mov	r1, r7
 8007140:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8007144:	f7f9 f8c0 	bl	80002c8 <__aeabi_dsub>
 8007148:	f805 6b01 	strb.w	r6, [r5], #1
 800714c:	9e01      	ldr	r6, [sp, #4]
 800714e:	9f03      	ldr	r7, [sp, #12]
 8007150:	1bae      	subs	r6, r5, r6
 8007152:	42b7      	cmp	r7, r6
 8007154:	4602      	mov	r2, r0
 8007156:	460b      	mov	r3, r1
 8007158:	d135      	bne.n	80071c6 <_dtoa_r+0x6e6>
 800715a:	f7f9 f8b7 	bl	80002cc <__adddf3>
 800715e:	4642      	mov	r2, r8
 8007160:	464b      	mov	r3, r9
 8007162:	4606      	mov	r6, r0
 8007164:	460f      	mov	r7, r1
 8007166:	f7f9 fcf7 	bl	8000b58 <__aeabi_dcmpgt>
 800716a:	b9d0      	cbnz	r0, 80071a2 <_dtoa_r+0x6c2>
 800716c:	4642      	mov	r2, r8
 800716e:	464b      	mov	r3, r9
 8007170:	4630      	mov	r0, r6
 8007172:	4639      	mov	r1, r7
 8007174:	f7f9 fcc8 	bl	8000b08 <__aeabi_dcmpeq>
 8007178:	b110      	cbz	r0, 8007180 <_dtoa_r+0x6a0>
 800717a:	f01a 0f01 	tst.w	sl, #1
 800717e:	d110      	bne.n	80071a2 <_dtoa_r+0x6c2>
 8007180:	4620      	mov	r0, r4
 8007182:	ee18 1a10 	vmov	r1, s16
 8007186:	f000 fd13 	bl	8007bb0 <_Bfree>
 800718a:	2300      	movs	r3, #0
 800718c:	9800      	ldr	r0, [sp, #0]
 800718e:	702b      	strb	r3, [r5, #0]
 8007190:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007192:	3001      	adds	r0, #1
 8007194:	6018      	str	r0, [r3, #0]
 8007196:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007198:	2b00      	cmp	r3, #0
 800719a:	f43f acf1 	beq.w	8006b80 <_dtoa_r+0xa0>
 800719e:	601d      	str	r5, [r3, #0]
 80071a0:	e4ee      	b.n	8006b80 <_dtoa_r+0xa0>
 80071a2:	9f00      	ldr	r7, [sp, #0]
 80071a4:	462b      	mov	r3, r5
 80071a6:	461d      	mov	r5, r3
 80071a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80071ac:	2a39      	cmp	r2, #57	; 0x39
 80071ae:	d106      	bne.n	80071be <_dtoa_r+0x6de>
 80071b0:	9a01      	ldr	r2, [sp, #4]
 80071b2:	429a      	cmp	r2, r3
 80071b4:	d1f7      	bne.n	80071a6 <_dtoa_r+0x6c6>
 80071b6:	9901      	ldr	r1, [sp, #4]
 80071b8:	2230      	movs	r2, #48	; 0x30
 80071ba:	3701      	adds	r7, #1
 80071bc:	700a      	strb	r2, [r1, #0]
 80071be:	781a      	ldrb	r2, [r3, #0]
 80071c0:	3201      	adds	r2, #1
 80071c2:	701a      	strb	r2, [r3, #0]
 80071c4:	e790      	b.n	80070e8 <_dtoa_r+0x608>
 80071c6:	4ba6      	ldr	r3, [pc, #664]	; (8007460 <_dtoa_r+0x980>)
 80071c8:	2200      	movs	r2, #0
 80071ca:	f7f9 fa35 	bl	8000638 <__aeabi_dmul>
 80071ce:	2200      	movs	r2, #0
 80071d0:	2300      	movs	r3, #0
 80071d2:	4606      	mov	r6, r0
 80071d4:	460f      	mov	r7, r1
 80071d6:	f7f9 fc97 	bl	8000b08 <__aeabi_dcmpeq>
 80071da:	2800      	cmp	r0, #0
 80071dc:	d09d      	beq.n	800711a <_dtoa_r+0x63a>
 80071de:	e7cf      	b.n	8007180 <_dtoa_r+0x6a0>
 80071e0:	9a08      	ldr	r2, [sp, #32]
 80071e2:	2a00      	cmp	r2, #0
 80071e4:	f000 80d7 	beq.w	8007396 <_dtoa_r+0x8b6>
 80071e8:	9a06      	ldr	r2, [sp, #24]
 80071ea:	2a01      	cmp	r2, #1
 80071ec:	f300 80ba 	bgt.w	8007364 <_dtoa_r+0x884>
 80071f0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80071f2:	2a00      	cmp	r2, #0
 80071f4:	f000 80b2 	beq.w	800735c <_dtoa_r+0x87c>
 80071f8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80071fc:	9e07      	ldr	r6, [sp, #28]
 80071fe:	9d04      	ldr	r5, [sp, #16]
 8007200:	9a04      	ldr	r2, [sp, #16]
 8007202:	441a      	add	r2, r3
 8007204:	9204      	str	r2, [sp, #16]
 8007206:	9a05      	ldr	r2, [sp, #20]
 8007208:	2101      	movs	r1, #1
 800720a:	441a      	add	r2, r3
 800720c:	4620      	mov	r0, r4
 800720e:	9205      	str	r2, [sp, #20]
 8007210:	f000 fd86 	bl	8007d20 <__i2b>
 8007214:	4607      	mov	r7, r0
 8007216:	2d00      	cmp	r5, #0
 8007218:	dd0c      	ble.n	8007234 <_dtoa_r+0x754>
 800721a:	9b05      	ldr	r3, [sp, #20]
 800721c:	2b00      	cmp	r3, #0
 800721e:	dd09      	ble.n	8007234 <_dtoa_r+0x754>
 8007220:	42ab      	cmp	r3, r5
 8007222:	9a04      	ldr	r2, [sp, #16]
 8007224:	bfa8      	it	ge
 8007226:	462b      	movge	r3, r5
 8007228:	1ad2      	subs	r2, r2, r3
 800722a:	9204      	str	r2, [sp, #16]
 800722c:	9a05      	ldr	r2, [sp, #20]
 800722e:	1aed      	subs	r5, r5, r3
 8007230:	1ad3      	subs	r3, r2, r3
 8007232:	9305      	str	r3, [sp, #20]
 8007234:	9b07      	ldr	r3, [sp, #28]
 8007236:	b31b      	cbz	r3, 8007280 <_dtoa_r+0x7a0>
 8007238:	9b08      	ldr	r3, [sp, #32]
 800723a:	2b00      	cmp	r3, #0
 800723c:	f000 80af 	beq.w	800739e <_dtoa_r+0x8be>
 8007240:	2e00      	cmp	r6, #0
 8007242:	dd13      	ble.n	800726c <_dtoa_r+0x78c>
 8007244:	4639      	mov	r1, r7
 8007246:	4632      	mov	r2, r6
 8007248:	4620      	mov	r0, r4
 800724a:	f000 fe29 	bl	8007ea0 <__pow5mult>
 800724e:	ee18 2a10 	vmov	r2, s16
 8007252:	4601      	mov	r1, r0
 8007254:	4607      	mov	r7, r0
 8007256:	4620      	mov	r0, r4
 8007258:	f000 fd78 	bl	8007d4c <__multiply>
 800725c:	ee18 1a10 	vmov	r1, s16
 8007260:	4680      	mov	r8, r0
 8007262:	4620      	mov	r0, r4
 8007264:	f000 fca4 	bl	8007bb0 <_Bfree>
 8007268:	ee08 8a10 	vmov	s16, r8
 800726c:	9b07      	ldr	r3, [sp, #28]
 800726e:	1b9a      	subs	r2, r3, r6
 8007270:	d006      	beq.n	8007280 <_dtoa_r+0x7a0>
 8007272:	ee18 1a10 	vmov	r1, s16
 8007276:	4620      	mov	r0, r4
 8007278:	f000 fe12 	bl	8007ea0 <__pow5mult>
 800727c:	ee08 0a10 	vmov	s16, r0
 8007280:	2101      	movs	r1, #1
 8007282:	4620      	mov	r0, r4
 8007284:	f000 fd4c 	bl	8007d20 <__i2b>
 8007288:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800728a:	2b00      	cmp	r3, #0
 800728c:	4606      	mov	r6, r0
 800728e:	f340 8088 	ble.w	80073a2 <_dtoa_r+0x8c2>
 8007292:	461a      	mov	r2, r3
 8007294:	4601      	mov	r1, r0
 8007296:	4620      	mov	r0, r4
 8007298:	f000 fe02 	bl	8007ea0 <__pow5mult>
 800729c:	9b06      	ldr	r3, [sp, #24]
 800729e:	2b01      	cmp	r3, #1
 80072a0:	4606      	mov	r6, r0
 80072a2:	f340 8081 	ble.w	80073a8 <_dtoa_r+0x8c8>
 80072a6:	f04f 0800 	mov.w	r8, #0
 80072aa:	6933      	ldr	r3, [r6, #16]
 80072ac:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80072b0:	6918      	ldr	r0, [r3, #16]
 80072b2:	f000 fce5 	bl	8007c80 <__hi0bits>
 80072b6:	f1c0 0020 	rsb	r0, r0, #32
 80072ba:	9b05      	ldr	r3, [sp, #20]
 80072bc:	4418      	add	r0, r3
 80072be:	f010 001f 	ands.w	r0, r0, #31
 80072c2:	f000 8092 	beq.w	80073ea <_dtoa_r+0x90a>
 80072c6:	f1c0 0320 	rsb	r3, r0, #32
 80072ca:	2b04      	cmp	r3, #4
 80072cc:	f340 808a 	ble.w	80073e4 <_dtoa_r+0x904>
 80072d0:	f1c0 001c 	rsb	r0, r0, #28
 80072d4:	9b04      	ldr	r3, [sp, #16]
 80072d6:	4403      	add	r3, r0
 80072d8:	9304      	str	r3, [sp, #16]
 80072da:	9b05      	ldr	r3, [sp, #20]
 80072dc:	4403      	add	r3, r0
 80072de:	4405      	add	r5, r0
 80072e0:	9305      	str	r3, [sp, #20]
 80072e2:	9b04      	ldr	r3, [sp, #16]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	dd07      	ble.n	80072f8 <_dtoa_r+0x818>
 80072e8:	ee18 1a10 	vmov	r1, s16
 80072ec:	461a      	mov	r2, r3
 80072ee:	4620      	mov	r0, r4
 80072f0:	f000 fe30 	bl	8007f54 <__lshift>
 80072f4:	ee08 0a10 	vmov	s16, r0
 80072f8:	9b05      	ldr	r3, [sp, #20]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	dd05      	ble.n	800730a <_dtoa_r+0x82a>
 80072fe:	4631      	mov	r1, r6
 8007300:	461a      	mov	r2, r3
 8007302:	4620      	mov	r0, r4
 8007304:	f000 fe26 	bl	8007f54 <__lshift>
 8007308:	4606      	mov	r6, r0
 800730a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800730c:	2b00      	cmp	r3, #0
 800730e:	d06e      	beq.n	80073ee <_dtoa_r+0x90e>
 8007310:	ee18 0a10 	vmov	r0, s16
 8007314:	4631      	mov	r1, r6
 8007316:	f000 fe8d 	bl	8008034 <__mcmp>
 800731a:	2800      	cmp	r0, #0
 800731c:	da67      	bge.n	80073ee <_dtoa_r+0x90e>
 800731e:	9b00      	ldr	r3, [sp, #0]
 8007320:	3b01      	subs	r3, #1
 8007322:	ee18 1a10 	vmov	r1, s16
 8007326:	9300      	str	r3, [sp, #0]
 8007328:	220a      	movs	r2, #10
 800732a:	2300      	movs	r3, #0
 800732c:	4620      	mov	r0, r4
 800732e:	f000 fc61 	bl	8007bf4 <__multadd>
 8007332:	9b08      	ldr	r3, [sp, #32]
 8007334:	ee08 0a10 	vmov	s16, r0
 8007338:	2b00      	cmp	r3, #0
 800733a:	f000 81b1 	beq.w	80076a0 <_dtoa_r+0xbc0>
 800733e:	2300      	movs	r3, #0
 8007340:	4639      	mov	r1, r7
 8007342:	220a      	movs	r2, #10
 8007344:	4620      	mov	r0, r4
 8007346:	f000 fc55 	bl	8007bf4 <__multadd>
 800734a:	9b02      	ldr	r3, [sp, #8]
 800734c:	2b00      	cmp	r3, #0
 800734e:	4607      	mov	r7, r0
 8007350:	f300 808e 	bgt.w	8007470 <_dtoa_r+0x990>
 8007354:	9b06      	ldr	r3, [sp, #24]
 8007356:	2b02      	cmp	r3, #2
 8007358:	dc51      	bgt.n	80073fe <_dtoa_r+0x91e>
 800735a:	e089      	b.n	8007470 <_dtoa_r+0x990>
 800735c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800735e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007362:	e74b      	b.n	80071fc <_dtoa_r+0x71c>
 8007364:	9b03      	ldr	r3, [sp, #12]
 8007366:	1e5e      	subs	r6, r3, #1
 8007368:	9b07      	ldr	r3, [sp, #28]
 800736a:	42b3      	cmp	r3, r6
 800736c:	bfbf      	itttt	lt
 800736e:	9b07      	ldrlt	r3, [sp, #28]
 8007370:	9607      	strlt	r6, [sp, #28]
 8007372:	1af2      	sublt	r2, r6, r3
 8007374:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007376:	bfb6      	itet	lt
 8007378:	189b      	addlt	r3, r3, r2
 800737a:	1b9e      	subge	r6, r3, r6
 800737c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800737e:	9b03      	ldr	r3, [sp, #12]
 8007380:	bfb8      	it	lt
 8007382:	2600      	movlt	r6, #0
 8007384:	2b00      	cmp	r3, #0
 8007386:	bfb7      	itett	lt
 8007388:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800738c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007390:	1a9d      	sublt	r5, r3, r2
 8007392:	2300      	movlt	r3, #0
 8007394:	e734      	b.n	8007200 <_dtoa_r+0x720>
 8007396:	9e07      	ldr	r6, [sp, #28]
 8007398:	9d04      	ldr	r5, [sp, #16]
 800739a:	9f08      	ldr	r7, [sp, #32]
 800739c:	e73b      	b.n	8007216 <_dtoa_r+0x736>
 800739e:	9a07      	ldr	r2, [sp, #28]
 80073a0:	e767      	b.n	8007272 <_dtoa_r+0x792>
 80073a2:	9b06      	ldr	r3, [sp, #24]
 80073a4:	2b01      	cmp	r3, #1
 80073a6:	dc18      	bgt.n	80073da <_dtoa_r+0x8fa>
 80073a8:	f1ba 0f00 	cmp.w	sl, #0
 80073ac:	d115      	bne.n	80073da <_dtoa_r+0x8fa>
 80073ae:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80073b2:	b993      	cbnz	r3, 80073da <_dtoa_r+0x8fa>
 80073b4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80073b8:	0d1b      	lsrs	r3, r3, #20
 80073ba:	051b      	lsls	r3, r3, #20
 80073bc:	b183      	cbz	r3, 80073e0 <_dtoa_r+0x900>
 80073be:	9b04      	ldr	r3, [sp, #16]
 80073c0:	3301      	adds	r3, #1
 80073c2:	9304      	str	r3, [sp, #16]
 80073c4:	9b05      	ldr	r3, [sp, #20]
 80073c6:	3301      	adds	r3, #1
 80073c8:	9305      	str	r3, [sp, #20]
 80073ca:	f04f 0801 	mov.w	r8, #1
 80073ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	f47f af6a 	bne.w	80072aa <_dtoa_r+0x7ca>
 80073d6:	2001      	movs	r0, #1
 80073d8:	e76f      	b.n	80072ba <_dtoa_r+0x7da>
 80073da:	f04f 0800 	mov.w	r8, #0
 80073de:	e7f6      	b.n	80073ce <_dtoa_r+0x8ee>
 80073e0:	4698      	mov	r8, r3
 80073e2:	e7f4      	b.n	80073ce <_dtoa_r+0x8ee>
 80073e4:	f43f af7d 	beq.w	80072e2 <_dtoa_r+0x802>
 80073e8:	4618      	mov	r0, r3
 80073ea:	301c      	adds	r0, #28
 80073ec:	e772      	b.n	80072d4 <_dtoa_r+0x7f4>
 80073ee:	9b03      	ldr	r3, [sp, #12]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	dc37      	bgt.n	8007464 <_dtoa_r+0x984>
 80073f4:	9b06      	ldr	r3, [sp, #24]
 80073f6:	2b02      	cmp	r3, #2
 80073f8:	dd34      	ble.n	8007464 <_dtoa_r+0x984>
 80073fa:	9b03      	ldr	r3, [sp, #12]
 80073fc:	9302      	str	r3, [sp, #8]
 80073fe:	9b02      	ldr	r3, [sp, #8]
 8007400:	b96b      	cbnz	r3, 800741e <_dtoa_r+0x93e>
 8007402:	4631      	mov	r1, r6
 8007404:	2205      	movs	r2, #5
 8007406:	4620      	mov	r0, r4
 8007408:	f000 fbf4 	bl	8007bf4 <__multadd>
 800740c:	4601      	mov	r1, r0
 800740e:	4606      	mov	r6, r0
 8007410:	ee18 0a10 	vmov	r0, s16
 8007414:	f000 fe0e 	bl	8008034 <__mcmp>
 8007418:	2800      	cmp	r0, #0
 800741a:	f73f adbb 	bgt.w	8006f94 <_dtoa_r+0x4b4>
 800741e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007420:	9d01      	ldr	r5, [sp, #4]
 8007422:	43db      	mvns	r3, r3
 8007424:	9300      	str	r3, [sp, #0]
 8007426:	f04f 0800 	mov.w	r8, #0
 800742a:	4631      	mov	r1, r6
 800742c:	4620      	mov	r0, r4
 800742e:	f000 fbbf 	bl	8007bb0 <_Bfree>
 8007432:	2f00      	cmp	r7, #0
 8007434:	f43f aea4 	beq.w	8007180 <_dtoa_r+0x6a0>
 8007438:	f1b8 0f00 	cmp.w	r8, #0
 800743c:	d005      	beq.n	800744a <_dtoa_r+0x96a>
 800743e:	45b8      	cmp	r8, r7
 8007440:	d003      	beq.n	800744a <_dtoa_r+0x96a>
 8007442:	4641      	mov	r1, r8
 8007444:	4620      	mov	r0, r4
 8007446:	f000 fbb3 	bl	8007bb0 <_Bfree>
 800744a:	4639      	mov	r1, r7
 800744c:	4620      	mov	r0, r4
 800744e:	f000 fbaf 	bl	8007bb0 <_Bfree>
 8007452:	e695      	b.n	8007180 <_dtoa_r+0x6a0>
 8007454:	2600      	movs	r6, #0
 8007456:	4637      	mov	r7, r6
 8007458:	e7e1      	b.n	800741e <_dtoa_r+0x93e>
 800745a:	9700      	str	r7, [sp, #0]
 800745c:	4637      	mov	r7, r6
 800745e:	e599      	b.n	8006f94 <_dtoa_r+0x4b4>
 8007460:	40240000 	.word	0x40240000
 8007464:	9b08      	ldr	r3, [sp, #32]
 8007466:	2b00      	cmp	r3, #0
 8007468:	f000 80ca 	beq.w	8007600 <_dtoa_r+0xb20>
 800746c:	9b03      	ldr	r3, [sp, #12]
 800746e:	9302      	str	r3, [sp, #8]
 8007470:	2d00      	cmp	r5, #0
 8007472:	dd05      	ble.n	8007480 <_dtoa_r+0x9a0>
 8007474:	4639      	mov	r1, r7
 8007476:	462a      	mov	r2, r5
 8007478:	4620      	mov	r0, r4
 800747a:	f000 fd6b 	bl	8007f54 <__lshift>
 800747e:	4607      	mov	r7, r0
 8007480:	f1b8 0f00 	cmp.w	r8, #0
 8007484:	d05b      	beq.n	800753e <_dtoa_r+0xa5e>
 8007486:	6879      	ldr	r1, [r7, #4]
 8007488:	4620      	mov	r0, r4
 800748a:	f000 fb51 	bl	8007b30 <_Balloc>
 800748e:	4605      	mov	r5, r0
 8007490:	b928      	cbnz	r0, 800749e <_dtoa_r+0x9be>
 8007492:	4b87      	ldr	r3, [pc, #540]	; (80076b0 <_dtoa_r+0xbd0>)
 8007494:	4602      	mov	r2, r0
 8007496:	f240 21ea 	movw	r1, #746	; 0x2ea
 800749a:	f7ff bb3b 	b.w	8006b14 <_dtoa_r+0x34>
 800749e:	693a      	ldr	r2, [r7, #16]
 80074a0:	3202      	adds	r2, #2
 80074a2:	0092      	lsls	r2, r2, #2
 80074a4:	f107 010c 	add.w	r1, r7, #12
 80074a8:	300c      	adds	r0, #12
 80074aa:	f000 fb33 	bl	8007b14 <memcpy>
 80074ae:	2201      	movs	r2, #1
 80074b0:	4629      	mov	r1, r5
 80074b2:	4620      	mov	r0, r4
 80074b4:	f000 fd4e 	bl	8007f54 <__lshift>
 80074b8:	9b01      	ldr	r3, [sp, #4]
 80074ba:	f103 0901 	add.w	r9, r3, #1
 80074be:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80074c2:	4413      	add	r3, r2
 80074c4:	9305      	str	r3, [sp, #20]
 80074c6:	f00a 0301 	and.w	r3, sl, #1
 80074ca:	46b8      	mov	r8, r7
 80074cc:	9304      	str	r3, [sp, #16]
 80074ce:	4607      	mov	r7, r0
 80074d0:	4631      	mov	r1, r6
 80074d2:	ee18 0a10 	vmov	r0, s16
 80074d6:	f7ff fa75 	bl	80069c4 <quorem>
 80074da:	4641      	mov	r1, r8
 80074dc:	9002      	str	r0, [sp, #8]
 80074de:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80074e2:	ee18 0a10 	vmov	r0, s16
 80074e6:	f000 fda5 	bl	8008034 <__mcmp>
 80074ea:	463a      	mov	r2, r7
 80074ec:	9003      	str	r0, [sp, #12]
 80074ee:	4631      	mov	r1, r6
 80074f0:	4620      	mov	r0, r4
 80074f2:	f000 fdbb 	bl	800806c <__mdiff>
 80074f6:	68c2      	ldr	r2, [r0, #12]
 80074f8:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 80074fc:	4605      	mov	r5, r0
 80074fe:	bb02      	cbnz	r2, 8007542 <_dtoa_r+0xa62>
 8007500:	4601      	mov	r1, r0
 8007502:	ee18 0a10 	vmov	r0, s16
 8007506:	f000 fd95 	bl	8008034 <__mcmp>
 800750a:	4602      	mov	r2, r0
 800750c:	4629      	mov	r1, r5
 800750e:	4620      	mov	r0, r4
 8007510:	9207      	str	r2, [sp, #28]
 8007512:	f000 fb4d 	bl	8007bb0 <_Bfree>
 8007516:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800751a:	ea43 0102 	orr.w	r1, r3, r2
 800751e:	9b04      	ldr	r3, [sp, #16]
 8007520:	430b      	orrs	r3, r1
 8007522:	464d      	mov	r5, r9
 8007524:	d10f      	bne.n	8007546 <_dtoa_r+0xa66>
 8007526:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800752a:	d02a      	beq.n	8007582 <_dtoa_r+0xaa2>
 800752c:	9b03      	ldr	r3, [sp, #12]
 800752e:	2b00      	cmp	r3, #0
 8007530:	dd02      	ble.n	8007538 <_dtoa_r+0xa58>
 8007532:	9b02      	ldr	r3, [sp, #8]
 8007534:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8007538:	f88b a000 	strb.w	sl, [fp]
 800753c:	e775      	b.n	800742a <_dtoa_r+0x94a>
 800753e:	4638      	mov	r0, r7
 8007540:	e7ba      	b.n	80074b8 <_dtoa_r+0x9d8>
 8007542:	2201      	movs	r2, #1
 8007544:	e7e2      	b.n	800750c <_dtoa_r+0xa2c>
 8007546:	9b03      	ldr	r3, [sp, #12]
 8007548:	2b00      	cmp	r3, #0
 800754a:	db04      	blt.n	8007556 <_dtoa_r+0xa76>
 800754c:	9906      	ldr	r1, [sp, #24]
 800754e:	430b      	orrs	r3, r1
 8007550:	9904      	ldr	r1, [sp, #16]
 8007552:	430b      	orrs	r3, r1
 8007554:	d122      	bne.n	800759c <_dtoa_r+0xabc>
 8007556:	2a00      	cmp	r2, #0
 8007558:	ddee      	ble.n	8007538 <_dtoa_r+0xa58>
 800755a:	ee18 1a10 	vmov	r1, s16
 800755e:	2201      	movs	r2, #1
 8007560:	4620      	mov	r0, r4
 8007562:	f000 fcf7 	bl	8007f54 <__lshift>
 8007566:	4631      	mov	r1, r6
 8007568:	ee08 0a10 	vmov	s16, r0
 800756c:	f000 fd62 	bl	8008034 <__mcmp>
 8007570:	2800      	cmp	r0, #0
 8007572:	dc03      	bgt.n	800757c <_dtoa_r+0xa9c>
 8007574:	d1e0      	bne.n	8007538 <_dtoa_r+0xa58>
 8007576:	f01a 0f01 	tst.w	sl, #1
 800757a:	d0dd      	beq.n	8007538 <_dtoa_r+0xa58>
 800757c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007580:	d1d7      	bne.n	8007532 <_dtoa_r+0xa52>
 8007582:	2339      	movs	r3, #57	; 0x39
 8007584:	f88b 3000 	strb.w	r3, [fp]
 8007588:	462b      	mov	r3, r5
 800758a:	461d      	mov	r5, r3
 800758c:	3b01      	subs	r3, #1
 800758e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007592:	2a39      	cmp	r2, #57	; 0x39
 8007594:	d071      	beq.n	800767a <_dtoa_r+0xb9a>
 8007596:	3201      	adds	r2, #1
 8007598:	701a      	strb	r2, [r3, #0]
 800759a:	e746      	b.n	800742a <_dtoa_r+0x94a>
 800759c:	2a00      	cmp	r2, #0
 800759e:	dd07      	ble.n	80075b0 <_dtoa_r+0xad0>
 80075a0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80075a4:	d0ed      	beq.n	8007582 <_dtoa_r+0xaa2>
 80075a6:	f10a 0301 	add.w	r3, sl, #1
 80075aa:	f88b 3000 	strb.w	r3, [fp]
 80075ae:	e73c      	b.n	800742a <_dtoa_r+0x94a>
 80075b0:	9b05      	ldr	r3, [sp, #20]
 80075b2:	f809 ac01 	strb.w	sl, [r9, #-1]
 80075b6:	4599      	cmp	r9, r3
 80075b8:	d047      	beq.n	800764a <_dtoa_r+0xb6a>
 80075ba:	ee18 1a10 	vmov	r1, s16
 80075be:	2300      	movs	r3, #0
 80075c0:	220a      	movs	r2, #10
 80075c2:	4620      	mov	r0, r4
 80075c4:	f000 fb16 	bl	8007bf4 <__multadd>
 80075c8:	45b8      	cmp	r8, r7
 80075ca:	ee08 0a10 	vmov	s16, r0
 80075ce:	f04f 0300 	mov.w	r3, #0
 80075d2:	f04f 020a 	mov.w	r2, #10
 80075d6:	4641      	mov	r1, r8
 80075d8:	4620      	mov	r0, r4
 80075da:	d106      	bne.n	80075ea <_dtoa_r+0xb0a>
 80075dc:	f000 fb0a 	bl	8007bf4 <__multadd>
 80075e0:	4680      	mov	r8, r0
 80075e2:	4607      	mov	r7, r0
 80075e4:	f109 0901 	add.w	r9, r9, #1
 80075e8:	e772      	b.n	80074d0 <_dtoa_r+0x9f0>
 80075ea:	f000 fb03 	bl	8007bf4 <__multadd>
 80075ee:	4639      	mov	r1, r7
 80075f0:	4680      	mov	r8, r0
 80075f2:	2300      	movs	r3, #0
 80075f4:	220a      	movs	r2, #10
 80075f6:	4620      	mov	r0, r4
 80075f8:	f000 fafc 	bl	8007bf4 <__multadd>
 80075fc:	4607      	mov	r7, r0
 80075fe:	e7f1      	b.n	80075e4 <_dtoa_r+0xb04>
 8007600:	9b03      	ldr	r3, [sp, #12]
 8007602:	9302      	str	r3, [sp, #8]
 8007604:	9d01      	ldr	r5, [sp, #4]
 8007606:	ee18 0a10 	vmov	r0, s16
 800760a:	4631      	mov	r1, r6
 800760c:	f7ff f9da 	bl	80069c4 <quorem>
 8007610:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007614:	9b01      	ldr	r3, [sp, #4]
 8007616:	f805 ab01 	strb.w	sl, [r5], #1
 800761a:	1aea      	subs	r2, r5, r3
 800761c:	9b02      	ldr	r3, [sp, #8]
 800761e:	4293      	cmp	r3, r2
 8007620:	dd09      	ble.n	8007636 <_dtoa_r+0xb56>
 8007622:	ee18 1a10 	vmov	r1, s16
 8007626:	2300      	movs	r3, #0
 8007628:	220a      	movs	r2, #10
 800762a:	4620      	mov	r0, r4
 800762c:	f000 fae2 	bl	8007bf4 <__multadd>
 8007630:	ee08 0a10 	vmov	s16, r0
 8007634:	e7e7      	b.n	8007606 <_dtoa_r+0xb26>
 8007636:	9b02      	ldr	r3, [sp, #8]
 8007638:	2b00      	cmp	r3, #0
 800763a:	bfc8      	it	gt
 800763c:	461d      	movgt	r5, r3
 800763e:	9b01      	ldr	r3, [sp, #4]
 8007640:	bfd8      	it	le
 8007642:	2501      	movle	r5, #1
 8007644:	441d      	add	r5, r3
 8007646:	f04f 0800 	mov.w	r8, #0
 800764a:	ee18 1a10 	vmov	r1, s16
 800764e:	2201      	movs	r2, #1
 8007650:	4620      	mov	r0, r4
 8007652:	f000 fc7f 	bl	8007f54 <__lshift>
 8007656:	4631      	mov	r1, r6
 8007658:	ee08 0a10 	vmov	s16, r0
 800765c:	f000 fcea 	bl	8008034 <__mcmp>
 8007660:	2800      	cmp	r0, #0
 8007662:	dc91      	bgt.n	8007588 <_dtoa_r+0xaa8>
 8007664:	d102      	bne.n	800766c <_dtoa_r+0xb8c>
 8007666:	f01a 0f01 	tst.w	sl, #1
 800766a:	d18d      	bne.n	8007588 <_dtoa_r+0xaa8>
 800766c:	462b      	mov	r3, r5
 800766e:	461d      	mov	r5, r3
 8007670:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007674:	2a30      	cmp	r2, #48	; 0x30
 8007676:	d0fa      	beq.n	800766e <_dtoa_r+0xb8e>
 8007678:	e6d7      	b.n	800742a <_dtoa_r+0x94a>
 800767a:	9a01      	ldr	r2, [sp, #4]
 800767c:	429a      	cmp	r2, r3
 800767e:	d184      	bne.n	800758a <_dtoa_r+0xaaa>
 8007680:	9b00      	ldr	r3, [sp, #0]
 8007682:	3301      	adds	r3, #1
 8007684:	9300      	str	r3, [sp, #0]
 8007686:	2331      	movs	r3, #49	; 0x31
 8007688:	7013      	strb	r3, [r2, #0]
 800768a:	e6ce      	b.n	800742a <_dtoa_r+0x94a>
 800768c:	4b09      	ldr	r3, [pc, #36]	; (80076b4 <_dtoa_r+0xbd4>)
 800768e:	f7ff ba95 	b.w	8006bbc <_dtoa_r+0xdc>
 8007692:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007694:	2b00      	cmp	r3, #0
 8007696:	f47f aa6e 	bne.w	8006b76 <_dtoa_r+0x96>
 800769a:	4b07      	ldr	r3, [pc, #28]	; (80076b8 <_dtoa_r+0xbd8>)
 800769c:	f7ff ba8e 	b.w	8006bbc <_dtoa_r+0xdc>
 80076a0:	9b02      	ldr	r3, [sp, #8]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	dcae      	bgt.n	8007604 <_dtoa_r+0xb24>
 80076a6:	9b06      	ldr	r3, [sp, #24]
 80076a8:	2b02      	cmp	r3, #2
 80076aa:	f73f aea8 	bgt.w	80073fe <_dtoa_r+0x91e>
 80076ae:	e7a9      	b.n	8007604 <_dtoa_r+0xb24>
 80076b0:	08008a97 	.word	0x08008a97
 80076b4:	080089f4 	.word	0x080089f4
 80076b8:	08008a18 	.word	0x08008a18

080076bc <__sflush_r>:
 80076bc:	898a      	ldrh	r2, [r1, #12]
 80076be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076c2:	4605      	mov	r5, r0
 80076c4:	0710      	lsls	r0, r2, #28
 80076c6:	460c      	mov	r4, r1
 80076c8:	d458      	bmi.n	800777c <__sflush_r+0xc0>
 80076ca:	684b      	ldr	r3, [r1, #4]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	dc05      	bgt.n	80076dc <__sflush_r+0x20>
 80076d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	dc02      	bgt.n	80076dc <__sflush_r+0x20>
 80076d6:	2000      	movs	r0, #0
 80076d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80076dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80076de:	2e00      	cmp	r6, #0
 80076e0:	d0f9      	beq.n	80076d6 <__sflush_r+0x1a>
 80076e2:	2300      	movs	r3, #0
 80076e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80076e8:	682f      	ldr	r7, [r5, #0]
 80076ea:	602b      	str	r3, [r5, #0]
 80076ec:	d032      	beq.n	8007754 <__sflush_r+0x98>
 80076ee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80076f0:	89a3      	ldrh	r3, [r4, #12]
 80076f2:	075a      	lsls	r2, r3, #29
 80076f4:	d505      	bpl.n	8007702 <__sflush_r+0x46>
 80076f6:	6863      	ldr	r3, [r4, #4]
 80076f8:	1ac0      	subs	r0, r0, r3
 80076fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80076fc:	b10b      	cbz	r3, 8007702 <__sflush_r+0x46>
 80076fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007700:	1ac0      	subs	r0, r0, r3
 8007702:	2300      	movs	r3, #0
 8007704:	4602      	mov	r2, r0
 8007706:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007708:	6a21      	ldr	r1, [r4, #32]
 800770a:	4628      	mov	r0, r5
 800770c:	47b0      	blx	r6
 800770e:	1c43      	adds	r3, r0, #1
 8007710:	89a3      	ldrh	r3, [r4, #12]
 8007712:	d106      	bne.n	8007722 <__sflush_r+0x66>
 8007714:	6829      	ldr	r1, [r5, #0]
 8007716:	291d      	cmp	r1, #29
 8007718:	d82c      	bhi.n	8007774 <__sflush_r+0xb8>
 800771a:	4a2a      	ldr	r2, [pc, #168]	; (80077c4 <__sflush_r+0x108>)
 800771c:	40ca      	lsrs	r2, r1
 800771e:	07d6      	lsls	r6, r2, #31
 8007720:	d528      	bpl.n	8007774 <__sflush_r+0xb8>
 8007722:	2200      	movs	r2, #0
 8007724:	6062      	str	r2, [r4, #4]
 8007726:	04d9      	lsls	r1, r3, #19
 8007728:	6922      	ldr	r2, [r4, #16]
 800772a:	6022      	str	r2, [r4, #0]
 800772c:	d504      	bpl.n	8007738 <__sflush_r+0x7c>
 800772e:	1c42      	adds	r2, r0, #1
 8007730:	d101      	bne.n	8007736 <__sflush_r+0x7a>
 8007732:	682b      	ldr	r3, [r5, #0]
 8007734:	b903      	cbnz	r3, 8007738 <__sflush_r+0x7c>
 8007736:	6560      	str	r0, [r4, #84]	; 0x54
 8007738:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800773a:	602f      	str	r7, [r5, #0]
 800773c:	2900      	cmp	r1, #0
 800773e:	d0ca      	beq.n	80076d6 <__sflush_r+0x1a>
 8007740:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007744:	4299      	cmp	r1, r3
 8007746:	d002      	beq.n	800774e <__sflush_r+0x92>
 8007748:	4628      	mov	r0, r5
 800774a:	f000 fd8b 	bl	8008264 <_free_r>
 800774e:	2000      	movs	r0, #0
 8007750:	6360      	str	r0, [r4, #52]	; 0x34
 8007752:	e7c1      	b.n	80076d8 <__sflush_r+0x1c>
 8007754:	6a21      	ldr	r1, [r4, #32]
 8007756:	2301      	movs	r3, #1
 8007758:	4628      	mov	r0, r5
 800775a:	47b0      	blx	r6
 800775c:	1c41      	adds	r1, r0, #1
 800775e:	d1c7      	bne.n	80076f0 <__sflush_r+0x34>
 8007760:	682b      	ldr	r3, [r5, #0]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d0c4      	beq.n	80076f0 <__sflush_r+0x34>
 8007766:	2b1d      	cmp	r3, #29
 8007768:	d001      	beq.n	800776e <__sflush_r+0xb2>
 800776a:	2b16      	cmp	r3, #22
 800776c:	d101      	bne.n	8007772 <__sflush_r+0xb6>
 800776e:	602f      	str	r7, [r5, #0]
 8007770:	e7b1      	b.n	80076d6 <__sflush_r+0x1a>
 8007772:	89a3      	ldrh	r3, [r4, #12]
 8007774:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007778:	81a3      	strh	r3, [r4, #12]
 800777a:	e7ad      	b.n	80076d8 <__sflush_r+0x1c>
 800777c:	690f      	ldr	r7, [r1, #16]
 800777e:	2f00      	cmp	r7, #0
 8007780:	d0a9      	beq.n	80076d6 <__sflush_r+0x1a>
 8007782:	0793      	lsls	r3, r2, #30
 8007784:	680e      	ldr	r6, [r1, #0]
 8007786:	bf08      	it	eq
 8007788:	694b      	ldreq	r3, [r1, #20]
 800778a:	600f      	str	r7, [r1, #0]
 800778c:	bf18      	it	ne
 800778e:	2300      	movne	r3, #0
 8007790:	eba6 0807 	sub.w	r8, r6, r7
 8007794:	608b      	str	r3, [r1, #8]
 8007796:	f1b8 0f00 	cmp.w	r8, #0
 800779a:	dd9c      	ble.n	80076d6 <__sflush_r+0x1a>
 800779c:	6a21      	ldr	r1, [r4, #32]
 800779e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80077a0:	4643      	mov	r3, r8
 80077a2:	463a      	mov	r2, r7
 80077a4:	4628      	mov	r0, r5
 80077a6:	47b0      	blx	r6
 80077a8:	2800      	cmp	r0, #0
 80077aa:	dc06      	bgt.n	80077ba <__sflush_r+0xfe>
 80077ac:	89a3      	ldrh	r3, [r4, #12]
 80077ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80077b2:	81a3      	strh	r3, [r4, #12]
 80077b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80077b8:	e78e      	b.n	80076d8 <__sflush_r+0x1c>
 80077ba:	4407      	add	r7, r0
 80077bc:	eba8 0800 	sub.w	r8, r8, r0
 80077c0:	e7e9      	b.n	8007796 <__sflush_r+0xda>
 80077c2:	bf00      	nop
 80077c4:	20400001 	.word	0x20400001

080077c8 <_fflush_r>:
 80077c8:	b538      	push	{r3, r4, r5, lr}
 80077ca:	690b      	ldr	r3, [r1, #16]
 80077cc:	4605      	mov	r5, r0
 80077ce:	460c      	mov	r4, r1
 80077d0:	b913      	cbnz	r3, 80077d8 <_fflush_r+0x10>
 80077d2:	2500      	movs	r5, #0
 80077d4:	4628      	mov	r0, r5
 80077d6:	bd38      	pop	{r3, r4, r5, pc}
 80077d8:	b118      	cbz	r0, 80077e2 <_fflush_r+0x1a>
 80077da:	6983      	ldr	r3, [r0, #24]
 80077dc:	b90b      	cbnz	r3, 80077e2 <_fflush_r+0x1a>
 80077de:	f000 f887 	bl	80078f0 <__sinit>
 80077e2:	4b14      	ldr	r3, [pc, #80]	; (8007834 <_fflush_r+0x6c>)
 80077e4:	429c      	cmp	r4, r3
 80077e6:	d11b      	bne.n	8007820 <_fflush_r+0x58>
 80077e8:	686c      	ldr	r4, [r5, #4]
 80077ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d0ef      	beq.n	80077d2 <_fflush_r+0xa>
 80077f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80077f4:	07d0      	lsls	r0, r2, #31
 80077f6:	d404      	bmi.n	8007802 <_fflush_r+0x3a>
 80077f8:	0599      	lsls	r1, r3, #22
 80077fa:	d402      	bmi.n	8007802 <_fflush_r+0x3a>
 80077fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80077fe:	f000 f91a 	bl	8007a36 <__retarget_lock_acquire_recursive>
 8007802:	4628      	mov	r0, r5
 8007804:	4621      	mov	r1, r4
 8007806:	f7ff ff59 	bl	80076bc <__sflush_r>
 800780a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800780c:	07da      	lsls	r2, r3, #31
 800780e:	4605      	mov	r5, r0
 8007810:	d4e0      	bmi.n	80077d4 <_fflush_r+0xc>
 8007812:	89a3      	ldrh	r3, [r4, #12]
 8007814:	059b      	lsls	r3, r3, #22
 8007816:	d4dd      	bmi.n	80077d4 <_fflush_r+0xc>
 8007818:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800781a:	f000 f90d 	bl	8007a38 <__retarget_lock_release_recursive>
 800781e:	e7d9      	b.n	80077d4 <_fflush_r+0xc>
 8007820:	4b05      	ldr	r3, [pc, #20]	; (8007838 <_fflush_r+0x70>)
 8007822:	429c      	cmp	r4, r3
 8007824:	d101      	bne.n	800782a <_fflush_r+0x62>
 8007826:	68ac      	ldr	r4, [r5, #8]
 8007828:	e7df      	b.n	80077ea <_fflush_r+0x22>
 800782a:	4b04      	ldr	r3, [pc, #16]	; (800783c <_fflush_r+0x74>)
 800782c:	429c      	cmp	r4, r3
 800782e:	bf08      	it	eq
 8007830:	68ec      	ldreq	r4, [r5, #12]
 8007832:	e7da      	b.n	80077ea <_fflush_r+0x22>
 8007834:	08008ac8 	.word	0x08008ac8
 8007838:	08008ae8 	.word	0x08008ae8
 800783c:	08008aa8 	.word	0x08008aa8

08007840 <std>:
 8007840:	2300      	movs	r3, #0
 8007842:	b510      	push	{r4, lr}
 8007844:	4604      	mov	r4, r0
 8007846:	e9c0 3300 	strd	r3, r3, [r0]
 800784a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800784e:	6083      	str	r3, [r0, #8]
 8007850:	8181      	strh	r1, [r0, #12]
 8007852:	6643      	str	r3, [r0, #100]	; 0x64
 8007854:	81c2      	strh	r2, [r0, #14]
 8007856:	6183      	str	r3, [r0, #24]
 8007858:	4619      	mov	r1, r3
 800785a:	2208      	movs	r2, #8
 800785c:	305c      	adds	r0, #92	; 0x5c
 800785e:	f7fe fa2b 	bl	8005cb8 <memset>
 8007862:	4b05      	ldr	r3, [pc, #20]	; (8007878 <std+0x38>)
 8007864:	6263      	str	r3, [r4, #36]	; 0x24
 8007866:	4b05      	ldr	r3, [pc, #20]	; (800787c <std+0x3c>)
 8007868:	62a3      	str	r3, [r4, #40]	; 0x28
 800786a:	4b05      	ldr	r3, [pc, #20]	; (8007880 <std+0x40>)
 800786c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800786e:	4b05      	ldr	r3, [pc, #20]	; (8007884 <std+0x44>)
 8007870:	6224      	str	r4, [r4, #32]
 8007872:	6323      	str	r3, [r4, #48]	; 0x30
 8007874:	bd10      	pop	{r4, pc}
 8007876:	bf00      	nop
 8007878:	080086f9 	.word	0x080086f9
 800787c:	0800871b 	.word	0x0800871b
 8007880:	08008753 	.word	0x08008753
 8007884:	08008777 	.word	0x08008777

08007888 <_cleanup_r>:
 8007888:	4901      	ldr	r1, [pc, #4]	; (8007890 <_cleanup_r+0x8>)
 800788a:	f000 b8af 	b.w	80079ec <_fwalk_reent>
 800788e:	bf00      	nop
 8007890:	080077c9 	.word	0x080077c9

08007894 <__sfmoreglue>:
 8007894:	b570      	push	{r4, r5, r6, lr}
 8007896:	2268      	movs	r2, #104	; 0x68
 8007898:	1e4d      	subs	r5, r1, #1
 800789a:	4355      	muls	r5, r2
 800789c:	460e      	mov	r6, r1
 800789e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80078a2:	f000 fd4b 	bl	800833c <_malloc_r>
 80078a6:	4604      	mov	r4, r0
 80078a8:	b140      	cbz	r0, 80078bc <__sfmoreglue+0x28>
 80078aa:	2100      	movs	r1, #0
 80078ac:	e9c0 1600 	strd	r1, r6, [r0]
 80078b0:	300c      	adds	r0, #12
 80078b2:	60a0      	str	r0, [r4, #8]
 80078b4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80078b8:	f7fe f9fe 	bl	8005cb8 <memset>
 80078bc:	4620      	mov	r0, r4
 80078be:	bd70      	pop	{r4, r5, r6, pc}

080078c0 <__sfp_lock_acquire>:
 80078c0:	4801      	ldr	r0, [pc, #4]	; (80078c8 <__sfp_lock_acquire+0x8>)
 80078c2:	f000 b8b8 	b.w	8007a36 <__retarget_lock_acquire_recursive>
 80078c6:	bf00      	nop
 80078c8:	20000349 	.word	0x20000349

080078cc <__sfp_lock_release>:
 80078cc:	4801      	ldr	r0, [pc, #4]	; (80078d4 <__sfp_lock_release+0x8>)
 80078ce:	f000 b8b3 	b.w	8007a38 <__retarget_lock_release_recursive>
 80078d2:	bf00      	nop
 80078d4:	20000349 	.word	0x20000349

080078d8 <__sinit_lock_acquire>:
 80078d8:	4801      	ldr	r0, [pc, #4]	; (80078e0 <__sinit_lock_acquire+0x8>)
 80078da:	f000 b8ac 	b.w	8007a36 <__retarget_lock_acquire_recursive>
 80078de:	bf00      	nop
 80078e0:	2000034a 	.word	0x2000034a

080078e4 <__sinit_lock_release>:
 80078e4:	4801      	ldr	r0, [pc, #4]	; (80078ec <__sinit_lock_release+0x8>)
 80078e6:	f000 b8a7 	b.w	8007a38 <__retarget_lock_release_recursive>
 80078ea:	bf00      	nop
 80078ec:	2000034a 	.word	0x2000034a

080078f0 <__sinit>:
 80078f0:	b510      	push	{r4, lr}
 80078f2:	4604      	mov	r4, r0
 80078f4:	f7ff fff0 	bl	80078d8 <__sinit_lock_acquire>
 80078f8:	69a3      	ldr	r3, [r4, #24]
 80078fa:	b11b      	cbz	r3, 8007904 <__sinit+0x14>
 80078fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007900:	f7ff bff0 	b.w	80078e4 <__sinit_lock_release>
 8007904:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007908:	6523      	str	r3, [r4, #80]	; 0x50
 800790a:	4b13      	ldr	r3, [pc, #76]	; (8007958 <__sinit+0x68>)
 800790c:	4a13      	ldr	r2, [pc, #76]	; (800795c <__sinit+0x6c>)
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	62a2      	str	r2, [r4, #40]	; 0x28
 8007912:	42a3      	cmp	r3, r4
 8007914:	bf04      	itt	eq
 8007916:	2301      	moveq	r3, #1
 8007918:	61a3      	streq	r3, [r4, #24]
 800791a:	4620      	mov	r0, r4
 800791c:	f000 f820 	bl	8007960 <__sfp>
 8007920:	6060      	str	r0, [r4, #4]
 8007922:	4620      	mov	r0, r4
 8007924:	f000 f81c 	bl	8007960 <__sfp>
 8007928:	60a0      	str	r0, [r4, #8]
 800792a:	4620      	mov	r0, r4
 800792c:	f000 f818 	bl	8007960 <__sfp>
 8007930:	2200      	movs	r2, #0
 8007932:	60e0      	str	r0, [r4, #12]
 8007934:	2104      	movs	r1, #4
 8007936:	6860      	ldr	r0, [r4, #4]
 8007938:	f7ff ff82 	bl	8007840 <std>
 800793c:	68a0      	ldr	r0, [r4, #8]
 800793e:	2201      	movs	r2, #1
 8007940:	2109      	movs	r1, #9
 8007942:	f7ff ff7d 	bl	8007840 <std>
 8007946:	68e0      	ldr	r0, [r4, #12]
 8007948:	2202      	movs	r2, #2
 800794a:	2112      	movs	r1, #18
 800794c:	f7ff ff78 	bl	8007840 <std>
 8007950:	2301      	movs	r3, #1
 8007952:	61a3      	str	r3, [r4, #24]
 8007954:	e7d2      	b.n	80078fc <__sinit+0xc>
 8007956:	bf00      	nop
 8007958:	080089e0 	.word	0x080089e0
 800795c:	08007889 	.word	0x08007889

08007960 <__sfp>:
 8007960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007962:	4607      	mov	r7, r0
 8007964:	f7ff ffac 	bl	80078c0 <__sfp_lock_acquire>
 8007968:	4b1e      	ldr	r3, [pc, #120]	; (80079e4 <__sfp+0x84>)
 800796a:	681e      	ldr	r6, [r3, #0]
 800796c:	69b3      	ldr	r3, [r6, #24]
 800796e:	b913      	cbnz	r3, 8007976 <__sfp+0x16>
 8007970:	4630      	mov	r0, r6
 8007972:	f7ff ffbd 	bl	80078f0 <__sinit>
 8007976:	3648      	adds	r6, #72	; 0x48
 8007978:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800797c:	3b01      	subs	r3, #1
 800797e:	d503      	bpl.n	8007988 <__sfp+0x28>
 8007980:	6833      	ldr	r3, [r6, #0]
 8007982:	b30b      	cbz	r3, 80079c8 <__sfp+0x68>
 8007984:	6836      	ldr	r6, [r6, #0]
 8007986:	e7f7      	b.n	8007978 <__sfp+0x18>
 8007988:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800798c:	b9d5      	cbnz	r5, 80079c4 <__sfp+0x64>
 800798e:	4b16      	ldr	r3, [pc, #88]	; (80079e8 <__sfp+0x88>)
 8007990:	60e3      	str	r3, [r4, #12]
 8007992:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007996:	6665      	str	r5, [r4, #100]	; 0x64
 8007998:	f000 f84c 	bl	8007a34 <__retarget_lock_init_recursive>
 800799c:	f7ff ff96 	bl	80078cc <__sfp_lock_release>
 80079a0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80079a4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80079a8:	6025      	str	r5, [r4, #0]
 80079aa:	61a5      	str	r5, [r4, #24]
 80079ac:	2208      	movs	r2, #8
 80079ae:	4629      	mov	r1, r5
 80079b0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80079b4:	f7fe f980 	bl	8005cb8 <memset>
 80079b8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80079bc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80079c0:	4620      	mov	r0, r4
 80079c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079c4:	3468      	adds	r4, #104	; 0x68
 80079c6:	e7d9      	b.n	800797c <__sfp+0x1c>
 80079c8:	2104      	movs	r1, #4
 80079ca:	4638      	mov	r0, r7
 80079cc:	f7ff ff62 	bl	8007894 <__sfmoreglue>
 80079d0:	4604      	mov	r4, r0
 80079d2:	6030      	str	r0, [r6, #0]
 80079d4:	2800      	cmp	r0, #0
 80079d6:	d1d5      	bne.n	8007984 <__sfp+0x24>
 80079d8:	f7ff ff78 	bl	80078cc <__sfp_lock_release>
 80079dc:	230c      	movs	r3, #12
 80079de:	603b      	str	r3, [r7, #0]
 80079e0:	e7ee      	b.n	80079c0 <__sfp+0x60>
 80079e2:	bf00      	nop
 80079e4:	080089e0 	.word	0x080089e0
 80079e8:	ffff0001 	.word	0xffff0001

080079ec <_fwalk_reent>:
 80079ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80079f0:	4606      	mov	r6, r0
 80079f2:	4688      	mov	r8, r1
 80079f4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80079f8:	2700      	movs	r7, #0
 80079fa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80079fe:	f1b9 0901 	subs.w	r9, r9, #1
 8007a02:	d505      	bpl.n	8007a10 <_fwalk_reent+0x24>
 8007a04:	6824      	ldr	r4, [r4, #0]
 8007a06:	2c00      	cmp	r4, #0
 8007a08:	d1f7      	bne.n	80079fa <_fwalk_reent+0xe>
 8007a0a:	4638      	mov	r0, r7
 8007a0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a10:	89ab      	ldrh	r3, [r5, #12]
 8007a12:	2b01      	cmp	r3, #1
 8007a14:	d907      	bls.n	8007a26 <_fwalk_reent+0x3a>
 8007a16:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007a1a:	3301      	adds	r3, #1
 8007a1c:	d003      	beq.n	8007a26 <_fwalk_reent+0x3a>
 8007a1e:	4629      	mov	r1, r5
 8007a20:	4630      	mov	r0, r6
 8007a22:	47c0      	blx	r8
 8007a24:	4307      	orrs	r7, r0
 8007a26:	3568      	adds	r5, #104	; 0x68
 8007a28:	e7e9      	b.n	80079fe <_fwalk_reent+0x12>
	...

08007a2c <_localeconv_r>:
 8007a2c:	4800      	ldr	r0, [pc, #0]	; (8007a30 <_localeconv_r+0x4>)
 8007a2e:	4770      	bx	lr
 8007a30:	20000160 	.word	0x20000160

08007a34 <__retarget_lock_init_recursive>:
 8007a34:	4770      	bx	lr

08007a36 <__retarget_lock_acquire_recursive>:
 8007a36:	4770      	bx	lr

08007a38 <__retarget_lock_release_recursive>:
 8007a38:	4770      	bx	lr

08007a3a <__swhatbuf_r>:
 8007a3a:	b570      	push	{r4, r5, r6, lr}
 8007a3c:	460e      	mov	r6, r1
 8007a3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a42:	2900      	cmp	r1, #0
 8007a44:	b096      	sub	sp, #88	; 0x58
 8007a46:	4614      	mov	r4, r2
 8007a48:	461d      	mov	r5, r3
 8007a4a:	da08      	bge.n	8007a5e <__swhatbuf_r+0x24>
 8007a4c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007a50:	2200      	movs	r2, #0
 8007a52:	602a      	str	r2, [r5, #0]
 8007a54:	061a      	lsls	r2, r3, #24
 8007a56:	d410      	bmi.n	8007a7a <__swhatbuf_r+0x40>
 8007a58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a5c:	e00e      	b.n	8007a7c <__swhatbuf_r+0x42>
 8007a5e:	466a      	mov	r2, sp
 8007a60:	f000 fee0 	bl	8008824 <_fstat_r>
 8007a64:	2800      	cmp	r0, #0
 8007a66:	dbf1      	blt.n	8007a4c <__swhatbuf_r+0x12>
 8007a68:	9a01      	ldr	r2, [sp, #4]
 8007a6a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007a6e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007a72:	425a      	negs	r2, r3
 8007a74:	415a      	adcs	r2, r3
 8007a76:	602a      	str	r2, [r5, #0]
 8007a78:	e7ee      	b.n	8007a58 <__swhatbuf_r+0x1e>
 8007a7a:	2340      	movs	r3, #64	; 0x40
 8007a7c:	2000      	movs	r0, #0
 8007a7e:	6023      	str	r3, [r4, #0]
 8007a80:	b016      	add	sp, #88	; 0x58
 8007a82:	bd70      	pop	{r4, r5, r6, pc}

08007a84 <__smakebuf_r>:
 8007a84:	898b      	ldrh	r3, [r1, #12]
 8007a86:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007a88:	079d      	lsls	r5, r3, #30
 8007a8a:	4606      	mov	r6, r0
 8007a8c:	460c      	mov	r4, r1
 8007a8e:	d507      	bpl.n	8007aa0 <__smakebuf_r+0x1c>
 8007a90:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007a94:	6023      	str	r3, [r4, #0]
 8007a96:	6123      	str	r3, [r4, #16]
 8007a98:	2301      	movs	r3, #1
 8007a9a:	6163      	str	r3, [r4, #20]
 8007a9c:	b002      	add	sp, #8
 8007a9e:	bd70      	pop	{r4, r5, r6, pc}
 8007aa0:	ab01      	add	r3, sp, #4
 8007aa2:	466a      	mov	r2, sp
 8007aa4:	f7ff ffc9 	bl	8007a3a <__swhatbuf_r>
 8007aa8:	9900      	ldr	r1, [sp, #0]
 8007aaa:	4605      	mov	r5, r0
 8007aac:	4630      	mov	r0, r6
 8007aae:	f000 fc45 	bl	800833c <_malloc_r>
 8007ab2:	b948      	cbnz	r0, 8007ac8 <__smakebuf_r+0x44>
 8007ab4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ab8:	059a      	lsls	r2, r3, #22
 8007aba:	d4ef      	bmi.n	8007a9c <__smakebuf_r+0x18>
 8007abc:	f023 0303 	bic.w	r3, r3, #3
 8007ac0:	f043 0302 	orr.w	r3, r3, #2
 8007ac4:	81a3      	strh	r3, [r4, #12]
 8007ac6:	e7e3      	b.n	8007a90 <__smakebuf_r+0xc>
 8007ac8:	4b0d      	ldr	r3, [pc, #52]	; (8007b00 <__smakebuf_r+0x7c>)
 8007aca:	62b3      	str	r3, [r6, #40]	; 0x28
 8007acc:	89a3      	ldrh	r3, [r4, #12]
 8007ace:	6020      	str	r0, [r4, #0]
 8007ad0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ad4:	81a3      	strh	r3, [r4, #12]
 8007ad6:	9b00      	ldr	r3, [sp, #0]
 8007ad8:	6163      	str	r3, [r4, #20]
 8007ada:	9b01      	ldr	r3, [sp, #4]
 8007adc:	6120      	str	r0, [r4, #16]
 8007ade:	b15b      	cbz	r3, 8007af8 <__smakebuf_r+0x74>
 8007ae0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007ae4:	4630      	mov	r0, r6
 8007ae6:	f000 feaf 	bl	8008848 <_isatty_r>
 8007aea:	b128      	cbz	r0, 8007af8 <__smakebuf_r+0x74>
 8007aec:	89a3      	ldrh	r3, [r4, #12]
 8007aee:	f023 0303 	bic.w	r3, r3, #3
 8007af2:	f043 0301 	orr.w	r3, r3, #1
 8007af6:	81a3      	strh	r3, [r4, #12]
 8007af8:	89a0      	ldrh	r0, [r4, #12]
 8007afa:	4305      	orrs	r5, r0
 8007afc:	81a5      	strh	r5, [r4, #12]
 8007afe:	e7cd      	b.n	8007a9c <__smakebuf_r+0x18>
 8007b00:	08007889 	.word	0x08007889

08007b04 <malloc>:
 8007b04:	4b02      	ldr	r3, [pc, #8]	; (8007b10 <malloc+0xc>)
 8007b06:	4601      	mov	r1, r0
 8007b08:	6818      	ldr	r0, [r3, #0]
 8007b0a:	f000 bc17 	b.w	800833c <_malloc_r>
 8007b0e:	bf00      	nop
 8007b10:	2000000c 	.word	0x2000000c

08007b14 <memcpy>:
 8007b14:	440a      	add	r2, r1
 8007b16:	4291      	cmp	r1, r2
 8007b18:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007b1c:	d100      	bne.n	8007b20 <memcpy+0xc>
 8007b1e:	4770      	bx	lr
 8007b20:	b510      	push	{r4, lr}
 8007b22:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b26:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007b2a:	4291      	cmp	r1, r2
 8007b2c:	d1f9      	bne.n	8007b22 <memcpy+0xe>
 8007b2e:	bd10      	pop	{r4, pc}

08007b30 <_Balloc>:
 8007b30:	b570      	push	{r4, r5, r6, lr}
 8007b32:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007b34:	4604      	mov	r4, r0
 8007b36:	460d      	mov	r5, r1
 8007b38:	b976      	cbnz	r6, 8007b58 <_Balloc+0x28>
 8007b3a:	2010      	movs	r0, #16
 8007b3c:	f7ff ffe2 	bl	8007b04 <malloc>
 8007b40:	4602      	mov	r2, r0
 8007b42:	6260      	str	r0, [r4, #36]	; 0x24
 8007b44:	b920      	cbnz	r0, 8007b50 <_Balloc+0x20>
 8007b46:	4b18      	ldr	r3, [pc, #96]	; (8007ba8 <_Balloc+0x78>)
 8007b48:	4818      	ldr	r0, [pc, #96]	; (8007bac <_Balloc+0x7c>)
 8007b4a:	2166      	movs	r1, #102	; 0x66
 8007b4c:	f000 fe2a 	bl	80087a4 <__assert_func>
 8007b50:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007b54:	6006      	str	r6, [r0, #0]
 8007b56:	60c6      	str	r6, [r0, #12]
 8007b58:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007b5a:	68f3      	ldr	r3, [r6, #12]
 8007b5c:	b183      	cbz	r3, 8007b80 <_Balloc+0x50>
 8007b5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b60:	68db      	ldr	r3, [r3, #12]
 8007b62:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007b66:	b9b8      	cbnz	r0, 8007b98 <_Balloc+0x68>
 8007b68:	2101      	movs	r1, #1
 8007b6a:	fa01 f605 	lsl.w	r6, r1, r5
 8007b6e:	1d72      	adds	r2, r6, #5
 8007b70:	0092      	lsls	r2, r2, #2
 8007b72:	4620      	mov	r0, r4
 8007b74:	f000 fb60 	bl	8008238 <_calloc_r>
 8007b78:	b160      	cbz	r0, 8007b94 <_Balloc+0x64>
 8007b7a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007b7e:	e00e      	b.n	8007b9e <_Balloc+0x6e>
 8007b80:	2221      	movs	r2, #33	; 0x21
 8007b82:	2104      	movs	r1, #4
 8007b84:	4620      	mov	r0, r4
 8007b86:	f000 fb57 	bl	8008238 <_calloc_r>
 8007b8a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b8c:	60f0      	str	r0, [r6, #12]
 8007b8e:	68db      	ldr	r3, [r3, #12]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d1e4      	bne.n	8007b5e <_Balloc+0x2e>
 8007b94:	2000      	movs	r0, #0
 8007b96:	bd70      	pop	{r4, r5, r6, pc}
 8007b98:	6802      	ldr	r2, [r0, #0]
 8007b9a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007ba4:	e7f7      	b.n	8007b96 <_Balloc+0x66>
 8007ba6:	bf00      	nop
 8007ba8:	08008a25 	.word	0x08008a25
 8007bac:	08008b08 	.word	0x08008b08

08007bb0 <_Bfree>:
 8007bb0:	b570      	push	{r4, r5, r6, lr}
 8007bb2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007bb4:	4605      	mov	r5, r0
 8007bb6:	460c      	mov	r4, r1
 8007bb8:	b976      	cbnz	r6, 8007bd8 <_Bfree+0x28>
 8007bba:	2010      	movs	r0, #16
 8007bbc:	f7ff ffa2 	bl	8007b04 <malloc>
 8007bc0:	4602      	mov	r2, r0
 8007bc2:	6268      	str	r0, [r5, #36]	; 0x24
 8007bc4:	b920      	cbnz	r0, 8007bd0 <_Bfree+0x20>
 8007bc6:	4b09      	ldr	r3, [pc, #36]	; (8007bec <_Bfree+0x3c>)
 8007bc8:	4809      	ldr	r0, [pc, #36]	; (8007bf0 <_Bfree+0x40>)
 8007bca:	218a      	movs	r1, #138	; 0x8a
 8007bcc:	f000 fdea 	bl	80087a4 <__assert_func>
 8007bd0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007bd4:	6006      	str	r6, [r0, #0]
 8007bd6:	60c6      	str	r6, [r0, #12]
 8007bd8:	b13c      	cbz	r4, 8007bea <_Bfree+0x3a>
 8007bda:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007bdc:	6862      	ldr	r2, [r4, #4]
 8007bde:	68db      	ldr	r3, [r3, #12]
 8007be0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007be4:	6021      	str	r1, [r4, #0]
 8007be6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007bea:	bd70      	pop	{r4, r5, r6, pc}
 8007bec:	08008a25 	.word	0x08008a25
 8007bf0:	08008b08 	.word	0x08008b08

08007bf4 <__multadd>:
 8007bf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bf8:	690d      	ldr	r5, [r1, #16]
 8007bfa:	4607      	mov	r7, r0
 8007bfc:	460c      	mov	r4, r1
 8007bfe:	461e      	mov	r6, r3
 8007c00:	f101 0c14 	add.w	ip, r1, #20
 8007c04:	2000      	movs	r0, #0
 8007c06:	f8dc 3000 	ldr.w	r3, [ip]
 8007c0a:	b299      	uxth	r1, r3
 8007c0c:	fb02 6101 	mla	r1, r2, r1, r6
 8007c10:	0c1e      	lsrs	r6, r3, #16
 8007c12:	0c0b      	lsrs	r3, r1, #16
 8007c14:	fb02 3306 	mla	r3, r2, r6, r3
 8007c18:	b289      	uxth	r1, r1
 8007c1a:	3001      	adds	r0, #1
 8007c1c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007c20:	4285      	cmp	r5, r0
 8007c22:	f84c 1b04 	str.w	r1, [ip], #4
 8007c26:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007c2a:	dcec      	bgt.n	8007c06 <__multadd+0x12>
 8007c2c:	b30e      	cbz	r6, 8007c72 <__multadd+0x7e>
 8007c2e:	68a3      	ldr	r3, [r4, #8]
 8007c30:	42ab      	cmp	r3, r5
 8007c32:	dc19      	bgt.n	8007c68 <__multadd+0x74>
 8007c34:	6861      	ldr	r1, [r4, #4]
 8007c36:	4638      	mov	r0, r7
 8007c38:	3101      	adds	r1, #1
 8007c3a:	f7ff ff79 	bl	8007b30 <_Balloc>
 8007c3e:	4680      	mov	r8, r0
 8007c40:	b928      	cbnz	r0, 8007c4e <__multadd+0x5a>
 8007c42:	4602      	mov	r2, r0
 8007c44:	4b0c      	ldr	r3, [pc, #48]	; (8007c78 <__multadd+0x84>)
 8007c46:	480d      	ldr	r0, [pc, #52]	; (8007c7c <__multadd+0x88>)
 8007c48:	21b5      	movs	r1, #181	; 0xb5
 8007c4a:	f000 fdab 	bl	80087a4 <__assert_func>
 8007c4e:	6922      	ldr	r2, [r4, #16]
 8007c50:	3202      	adds	r2, #2
 8007c52:	f104 010c 	add.w	r1, r4, #12
 8007c56:	0092      	lsls	r2, r2, #2
 8007c58:	300c      	adds	r0, #12
 8007c5a:	f7ff ff5b 	bl	8007b14 <memcpy>
 8007c5e:	4621      	mov	r1, r4
 8007c60:	4638      	mov	r0, r7
 8007c62:	f7ff ffa5 	bl	8007bb0 <_Bfree>
 8007c66:	4644      	mov	r4, r8
 8007c68:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007c6c:	3501      	adds	r5, #1
 8007c6e:	615e      	str	r6, [r3, #20]
 8007c70:	6125      	str	r5, [r4, #16]
 8007c72:	4620      	mov	r0, r4
 8007c74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c78:	08008a97 	.word	0x08008a97
 8007c7c:	08008b08 	.word	0x08008b08

08007c80 <__hi0bits>:
 8007c80:	0c03      	lsrs	r3, r0, #16
 8007c82:	041b      	lsls	r3, r3, #16
 8007c84:	b9d3      	cbnz	r3, 8007cbc <__hi0bits+0x3c>
 8007c86:	0400      	lsls	r0, r0, #16
 8007c88:	2310      	movs	r3, #16
 8007c8a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007c8e:	bf04      	itt	eq
 8007c90:	0200      	lsleq	r0, r0, #8
 8007c92:	3308      	addeq	r3, #8
 8007c94:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007c98:	bf04      	itt	eq
 8007c9a:	0100      	lsleq	r0, r0, #4
 8007c9c:	3304      	addeq	r3, #4
 8007c9e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007ca2:	bf04      	itt	eq
 8007ca4:	0080      	lsleq	r0, r0, #2
 8007ca6:	3302      	addeq	r3, #2
 8007ca8:	2800      	cmp	r0, #0
 8007caa:	db05      	blt.n	8007cb8 <__hi0bits+0x38>
 8007cac:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007cb0:	f103 0301 	add.w	r3, r3, #1
 8007cb4:	bf08      	it	eq
 8007cb6:	2320      	moveq	r3, #32
 8007cb8:	4618      	mov	r0, r3
 8007cba:	4770      	bx	lr
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	e7e4      	b.n	8007c8a <__hi0bits+0xa>

08007cc0 <__lo0bits>:
 8007cc0:	6803      	ldr	r3, [r0, #0]
 8007cc2:	f013 0207 	ands.w	r2, r3, #7
 8007cc6:	4601      	mov	r1, r0
 8007cc8:	d00b      	beq.n	8007ce2 <__lo0bits+0x22>
 8007cca:	07da      	lsls	r2, r3, #31
 8007ccc:	d423      	bmi.n	8007d16 <__lo0bits+0x56>
 8007cce:	0798      	lsls	r0, r3, #30
 8007cd0:	bf49      	itett	mi
 8007cd2:	085b      	lsrmi	r3, r3, #1
 8007cd4:	089b      	lsrpl	r3, r3, #2
 8007cd6:	2001      	movmi	r0, #1
 8007cd8:	600b      	strmi	r3, [r1, #0]
 8007cda:	bf5c      	itt	pl
 8007cdc:	600b      	strpl	r3, [r1, #0]
 8007cde:	2002      	movpl	r0, #2
 8007ce0:	4770      	bx	lr
 8007ce2:	b298      	uxth	r0, r3
 8007ce4:	b9a8      	cbnz	r0, 8007d12 <__lo0bits+0x52>
 8007ce6:	0c1b      	lsrs	r3, r3, #16
 8007ce8:	2010      	movs	r0, #16
 8007cea:	b2da      	uxtb	r2, r3
 8007cec:	b90a      	cbnz	r2, 8007cf2 <__lo0bits+0x32>
 8007cee:	3008      	adds	r0, #8
 8007cf0:	0a1b      	lsrs	r3, r3, #8
 8007cf2:	071a      	lsls	r2, r3, #28
 8007cf4:	bf04      	itt	eq
 8007cf6:	091b      	lsreq	r3, r3, #4
 8007cf8:	3004      	addeq	r0, #4
 8007cfa:	079a      	lsls	r2, r3, #30
 8007cfc:	bf04      	itt	eq
 8007cfe:	089b      	lsreq	r3, r3, #2
 8007d00:	3002      	addeq	r0, #2
 8007d02:	07da      	lsls	r2, r3, #31
 8007d04:	d403      	bmi.n	8007d0e <__lo0bits+0x4e>
 8007d06:	085b      	lsrs	r3, r3, #1
 8007d08:	f100 0001 	add.w	r0, r0, #1
 8007d0c:	d005      	beq.n	8007d1a <__lo0bits+0x5a>
 8007d0e:	600b      	str	r3, [r1, #0]
 8007d10:	4770      	bx	lr
 8007d12:	4610      	mov	r0, r2
 8007d14:	e7e9      	b.n	8007cea <__lo0bits+0x2a>
 8007d16:	2000      	movs	r0, #0
 8007d18:	4770      	bx	lr
 8007d1a:	2020      	movs	r0, #32
 8007d1c:	4770      	bx	lr
	...

08007d20 <__i2b>:
 8007d20:	b510      	push	{r4, lr}
 8007d22:	460c      	mov	r4, r1
 8007d24:	2101      	movs	r1, #1
 8007d26:	f7ff ff03 	bl	8007b30 <_Balloc>
 8007d2a:	4602      	mov	r2, r0
 8007d2c:	b928      	cbnz	r0, 8007d3a <__i2b+0x1a>
 8007d2e:	4b05      	ldr	r3, [pc, #20]	; (8007d44 <__i2b+0x24>)
 8007d30:	4805      	ldr	r0, [pc, #20]	; (8007d48 <__i2b+0x28>)
 8007d32:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007d36:	f000 fd35 	bl	80087a4 <__assert_func>
 8007d3a:	2301      	movs	r3, #1
 8007d3c:	6144      	str	r4, [r0, #20]
 8007d3e:	6103      	str	r3, [r0, #16]
 8007d40:	bd10      	pop	{r4, pc}
 8007d42:	bf00      	nop
 8007d44:	08008a97 	.word	0x08008a97
 8007d48:	08008b08 	.word	0x08008b08

08007d4c <__multiply>:
 8007d4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d50:	4691      	mov	r9, r2
 8007d52:	690a      	ldr	r2, [r1, #16]
 8007d54:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007d58:	429a      	cmp	r2, r3
 8007d5a:	bfb8      	it	lt
 8007d5c:	460b      	movlt	r3, r1
 8007d5e:	460c      	mov	r4, r1
 8007d60:	bfbc      	itt	lt
 8007d62:	464c      	movlt	r4, r9
 8007d64:	4699      	movlt	r9, r3
 8007d66:	6927      	ldr	r7, [r4, #16]
 8007d68:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007d6c:	68a3      	ldr	r3, [r4, #8]
 8007d6e:	6861      	ldr	r1, [r4, #4]
 8007d70:	eb07 060a 	add.w	r6, r7, sl
 8007d74:	42b3      	cmp	r3, r6
 8007d76:	b085      	sub	sp, #20
 8007d78:	bfb8      	it	lt
 8007d7a:	3101      	addlt	r1, #1
 8007d7c:	f7ff fed8 	bl	8007b30 <_Balloc>
 8007d80:	b930      	cbnz	r0, 8007d90 <__multiply+0x44>
 8007d82:	4602      	mov	r2, r0
 8007d84:	4b44      	ldr	r3, [pc, #272]	; (8007e98 <__multiply+0x14c>)
 8007d86:	4845      	ldr	r0, [pc, #276]	; (8007e9c <__multiply+0x150>)
 8007d88:	f240 115d 	movw	r1, #349	; 0x15d
 8007d8c:	f000 fd0a 	bl	80087a4 <__assert_func>
 8007d90:	f100 0514 	add.w	r5, r0, #20
 8007d94:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007d98:	462b      	mov	r3, r5
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	4543      	cmp	r3, r8
 8007d9e:	d321      	bcc.n	8007de4 <__multiply+0x98>
 8007da0:	f104 0314 	add.w	r3, r4, #20
 8007da4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007da8:	f109 0314 	add.w	r3, r9, #20
 8007dac:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007db0:	9202      	str	r2, [sp, #8]
 8007db2:	1b3a      	subs	r2, r7, r4
 8007db4:	3a15      	subs	r2, #21
 8007db6:	f022 0203 	bic.w	r2, r2, #3
 8007dba:	3204      	adds	r2, #4
 8007dbc:	f104 0115 	add.w	r1, r4, #21
 8007dc0:	428f      	cmp	r7, r1
 8007dc2:	bf38      	it	cc
 8007dc4:	2204      	movcc	r2, #4
 8007dc6:	9201      	str	r2, [sp, #4]
 8007dc8:	9a02      	ldr	r2, [sp, #8]
 8007dca:	9303      	str	r3, [sp, #12]
 8007dcc:	429a      	cmp	r2, r3
 8007dce:	d80c      	bhi.n	8007dea <__multiply+0x9e>
 8007dd0:	2e00      	cmp	r6, #0
 8007dd2:	dd03      	ble.n	8007ddc <__multiply+0x90>
 8007dd4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d05a      	beq.n	8007e92 <__multiply+0x146>
 8007ddc:	6106      	str	r6, [r0, #16]
 8007dde:	b005      	add	sp, #20
 8007de0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007de4:	f843 2b04 	str.w	r2, [r3], #4
 8007de8:	e7d8      	b.n	8007d9c <__multiply+0x50>
 8007dea:	f8b3 a000 	ldrh.w	sl, [r3]
 8007dee:	f1ba 0f00 	cmp.w	sl, #0
 8007df2:	d024      	beq.n	8007e3e <__multiply+0xf2>
 8007df4:	f104 0e14 	add.w	lr, r4, #20
 8007df8:	46a9      	mov	r9, r5
 8007dfa:	f04f 0c00 	mov.w	ip, #0
 8007dfe:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007e02:	f8d9 1000 	ldr.w	r1, [r9]
 8007e06:	fa1f fb82 	uxth.w	fp, r2
 8007e0a:	b289      	uxth	r1, r1
 8007e0c:	fb0a 110b 	mla	r1, sl, fp, r1
 8007e10:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007e14:	f8d9 2000 	ldr.w	r2, [r9]
 8007e18:	4461      	add	r1, ip
 8007e1a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007e1e:	fb0a c20b 	mla	r2, sl, fp, ip
 8007e22:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007e26:	b289      	uxth	r1, r1
 8007e28:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007e2c:	4577      	cmp	r7, lr
 8007e2e:	f849 1b04 	str.w	r1, [r9], #4
 8007e32:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007e36:	d8e2      	bhi.n	8007dfe <__multiply+0xb2>
 8007e38:	9a01      	ldr	r2, [sp, #4]
 8007e3a:	f845 c002 	str.w	ip, [r5, r2]
 8007e3e:	9a03      	ldr	r2, [sp, #12]
 8007e40:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007e44:	3304      	adds	r3, #4
 8007e46:	f1b9 0f00 	cmp.w	r9, #0
 8007e4a:	d020      	beq.n	8007e8e <__multiply+0x142>
 8007e4c:	6829      	ldr	r1, [r5, #0]
 8007e4e:	f104 0c14 	add.w	ip, r4, #20
 8007e52:	46ae      	mov	lr, r5
 8007e54:	f04f 0a00 	mov.w	sl, #0
 8007e58:	f8bc b000 	ldrh.w	fp, [ip]
 8007e5c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007e60:	fb09 220b 	mla	r2, r9, fp, r2
 8007e64:	4492      	add	sl, r2
 8007e66:	b289      	uxth	r1, r1
 8007e68:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007e6c:	f84e 1b04 	str.w	r1, [lr], #4
 8007e70:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007e74:	f8be 1000 	ldrh.w	r1, [lr]
 8007e78:	0c12      	lsrs	r2, r2, #16
 8007e7a:	fb09 1102 	mla	r1, r9, r2, r1
 8007e7e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007e82:	4567      	cmp	r7, ip
 8007e84:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007e88:	d8e6      	bhi.n	8007e58 <__multiply+0x10c>
 8007e8a:	9a01      	ldr	r2, [sp, #4]
 8007e8c:	50a9      	str	r1, [r5, r2]
 8007e8e:	3504      	adds	r5, #4
 8007e90:	e79a      	b.n	8007dc8 <__multiply+0x7c>
 8007e92:	3e01      	subs	r6, #1
 8007e94:	e79c      	b.n	8007dd0 <__multiply+0x84>
 8007e96:	bf00      	nop
 8007e98:	08008a97 	.word	0x08008a97
 8007e9c:	08008b08 	.word	0x08008b08

08007ea0 <__pow5mult>:
 8007ea0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ea4:	4615      	mov	r5, r2
 8007ea6:	f012 0203 	ands.w	r2, r2, #3
 8007eaa:	4606      	mov	r6, r0
 8007eac:	460f      	mov	r7, r1
 8007eae:	d007      	beq.n	8007ec0 <__pow5mult+0x20>
 8007eb0:	4c25      	ldr	r4, [pc, #148]	; (8007f48 <__pow5mult+0xa8>)
 8007eb2:	3a01      	subs	r2, #1
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007eba:	f7ff fe9b 	bl	8007bf4 <__multadd>
 8007ebe:	4607      	mov	r7, r0
 8007ec0:	10ad      	asrs	r5, r5, #2
 8007ec2:	d03d      	beq.n	8007f40 <__pow5mult+0xa0>
 8007ec4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007ec6:	b97c      	cbnz	r4, 8007ee8 <__pow5mult+0x48>
 8007ec8:	2010      	movs	r0, #16
 8007eca:	f7ff fe1b 	bl	8007b04 <malloc>
 8007ece:	4602      	mov	r2, r0
 8007ed0:	6270      	str	r0, [r6, #36]	; 0x24
 8007ed2:	b928      	cbnz	r0, 8007ee0 <__pow5mult+0x40>
 8007ed4:	4b1d      	ldr	r3, [pc, #116]	; (8007f4c <__pow5mult+0xac>)
 8007ed6:	481e      	ldr	r0, [pc, #120]	; (8007f50 <__pow5mult+0xb0>)
 8007ed8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007edc:	f000 fc62 	bl	80087a4 <__assert_func>
 8007ee0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007ee4:	6004      	str	r4, [r0, #0]
 8007ee6:	60c4      	str	r4, [r0, #12]
 8007ee8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007eec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007ef0:	b94c      	cbnz	r4, 8007f06 <__pow5mult+0x66>
 8007ef2:	f240 2171 	movw	r1, #625	; 0x271
 8007ef6:	4630      	mov	r0, r6
 8007ef8:	f7ff ff12 	bl	8007d20 <__i2b>
 8007efc:	2300      	movs	r3, #0
 8007efe:	f8c8 0008 	str.w	r0, [r8, #8]
 8007f02:	4604      	mov	r4, r0
 8007f04:	6003      	str	r3, [r0, #0]
 8007f06:	f04f 0900 	mov.w	r9, #0
 8007f0a:	07eb      	lsls	r3, r5, #31
 8007f0c:	d50a      	bpl.n	8007f24 <__pow5mult+0x84>
 8007f0e:	4639      	mov	r1, r7
 8007f10:	4622      	mov	r2, r4
 8007f12:	4630      	mov	r0, r6
 8007f14:	f7ff ff1a 	bl	8007d4c <__multiply>
 8007f18:	4639      	mov	r1, r7
 8007f1a:	4680      	mov	r8, r0
 8007f1c:	4630      	mov	r0, r6
 8007f1e:	f7ff fe47 	bl	8007bb0 <_Bfree>
 8007f22:	4647      	mov	r7, r8
 8007f24:	106d      	asrs	r5, r5, #1
 8007f26:	d00b      	beq.n	8007f40 <__pow5mult+0xa0>
 8007f28:	6820      	ldr	r0, [r4, #0]
 8007f2a:	b938      	cbnz	r0, 8007f3c <__pow5mult+0x9c>
 8007f2c:	4622      	mov	r2, r4
 8007f2e:	4621      	mov	r1, r4
 8007f30:	4630      	mov	r0, r6
 8007f32:	f7ff ff0b 	bl	8007d4c <__multiply>
 8007f36:	6020      	str	r0, [r4, #0]
 8007f38:	f8c0 9000 	str.w	r9, [r0]
 8007f3c:	4604      	mov	r4, r0
 8007f3e:	e7e4      	b.n	8007f0a <__pow5mult+0x6a>
 8007f40:	4638      	mov	r0, r7
 8007f42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f46:	bf00      	nop
 8007f48:	08008c58 	.word	0x08008c58
 8007f4c:	08008a25 	.word	0x08008a25
 8007f50:	08008b08 	.word	0x08008b08

08007f54 <__lshift>:
 8007f54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f58:	460c      	mov	r4, r1
 8007f5a:	6849      	ldr	r1, [r1, #4]
 8007f5c:	6923      	ldr	r3, [r4, #16]
 8007f5e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007f62:	68a3      	ldr	r3, [r4, #8]
 8007f64:	4607      	mov	r7, r0
 8007f66:	4691      	mov	r9, r2
 8007f68:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007f6c:	f108 0601 	add.w	r6, r8, #1
 8007f70:	42b3      	cmp	r3, r6
 8007f72:	db0b      	blt.n	8007f8c <__lshift+0x38>
 8007f74:	4638      	mov	r0, r7
 8007f76:	f7ff fddb 	bl	8007b30 <_Balloc>
 8007f7a:	4605      	mov	r5, r0
 8007f7c:	b948      	cbnz	r0, 8007f92 <__lshift+0x3e>
 8007f7e:	4602      	mov	r2, r0
 8007f80:	4b2a      	ldr	r3, [pc, #168]	; (800802c <__lshift+0xd8>)
 8007f82:	482b      	ldr	r0, [pc, #172]	; (8008030 <__lshift+0xdc>)
 8007f84:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007f88:	f000 fc0c 	bl	80087a4 <__assert_func>
 8007f8c:	3101      	adds	r1, #1
 8007f8e:	005b      	lsls	r3, r3, #1
 8007f90:	e7ee      	b.n	8007f70 <__lshift+0x1c>
 8007f92:	2300      	movs	r3, #0
 8007f94:	f100 0114 	add.w	r1, r0, #20
 8007f98:	f100 0210 	add.w	r2, r0, #16
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	4553      	cmp	r3, sl
 8007fa0:	db37      	blt.n	8008012 <__lshift+0xbe>
 8007fa2:	6920      	ldr	r0, [r4, #16]
 8007fa4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007fa8:	f104 0314 	add.w	r3, r4, #20
 8007fac:	f019 091f 	ands.w	r9, r9, #31
 8007fb0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007fb4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007fb8:	d02f      	beq.n	800801a <__lshift+0xc6>
 8007fba:	f1c9 0e20 	rsb	lr, r9, #32
 8007fbe:	468a      	mov	sl, r1
 8007fc0:	f04f 0c00 	mov.w	ip, #0
 8007fc4:	681a      	ldr	r2, [r3, #0]
 8007fc6:	fa02 f209 	lsl.w	r2, r2, r9
 8007fca:	ea42 020c 	orr.w	r2, r2, ip
 8007fce:	f84a 2b04 	str.w	r2, [sl], #4
 8007fd2:	f853 2b04 	ldr.w	r2, [r3], #4
 8007fd6:	4298      	cmp	r0, r3
 8007fd8:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007fdc:	d8f2      	bhi.n	8007fc4 <__lshift+0x70>
 8007fde:	1b03      	subs	r3, r0, r4
 8007fe0:	3b15      	subs	r3, #21
 8007fe2:	f023 0303 	bic.w	r3, r3, #3
 8007fe6:	3304      	adds	r3, #4
 8007fe8:	f104 0215 	add.w	r2, r4, #21
 8007fec:	4290      	cmp	r0, r2
 8007fee:	bf38      	it	cc
 8007ff0:	2304      	movcc	r3, #4
 8007ff2:	f841 c003 	str.w	ip, [r1, r3]
 8007ff6:	f1bc 0f00 	cmp.w	ip, #0
 8007ffa:	d001      	beq.n	8008000 <__lshift+0xac>
 8007ffc:	f108 0602 	add.w	r6, r8, #2
 8008000:	3e01      	subs	r6, #1
 8008002:	4638      	mov	r0, r7
 8008004:	612e      	str	r6, [r5, #16]
 8008006:	4621      	mov	r1, r4
 8008008:	f7ff fdd2 	bl	8007bb0 <_Bfree>
 800800c:	4628      	mov	r0, r5
 800800e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008012:	f842 0f04 	str.w	r0, [r2, #4]!
 8008016:	3301      	adds	r3, #1
 8008018:	e7c1      	b.n	8007f9e <__lshift+0x4a>
 800801a:	3904      	subs	r1, #4
 800801c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008020:	f841 2f04 	str.w	r2, [r1, #4]!
 8008024:	4298      	cmp	r0, r3
 8008026:	d8f9      	bhi.n	800801c <__lshift+0xc8>
 8008028:	e7ea      	b.n	8008000 <__lshift+0xac>
 800802a:	bf00      	nop
 800802c:	08008a97 	.word	0x08008a97
 8008030:	08008b08 	.word	0x08008b08

08008034 <__mcmp>:
 8008034:	b530      	push	{r4, r5, lr}
 8008036:	6902      	ldr	r2, [r0, #16]
 8008038:	690c      	ldr	r4, [r1, #16]
 800803a:	1b12      	subs	r2, r2, r4
 800803c:	d10e      	bne.n	800805c <__mcmp+0x28>
 800803e:	f100 0314 	add.w	r3, r0, #20
 8008042:	3114      	adds	r1, #20
 8008044:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008048:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800804c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008050:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008054:	42a5      	cmp	r5, r4
 8008056:	d003      	beq.n	8008060 <__mcmp+0x2c>
 8008058:	d305      	bcc.n	8008066 <__mcmp+0x32>
 800805a:	2201      	movs	r2, #1
 800805c:	4610      	mov	r0, r2
 800805e:	bd30      	pop	{r4, r5, pc}
 8008060:	4283      	cmp	r3, r0
 8008062:	d3f3      	bcc.n	800804c <__mcmp+0x18>
 8008064:	e7fa      	b.n	800805c <__mcmp+0x28>
 8008066:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800806a:	e7f7      	b.n	800805c <__mcmp+0x28>

0800806c <__mdiff>:
 800806c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008070:	460c      	mov	r4, r1
 8008072:	4606      	mov	r6, r0
 8008074:	4611      	mov	r1, r2
 8008076:	4620      	mov	r0, r4
 8008078:	4690      	mov	r8, r2
 800807a:	f7ff ffdb 	bl	8008034 <__mcmp>
 800807e:	1e05      	subs	r5, r0, #0
 8008080:	d110      	bne.n	80080a4 <__mdiff+0x38>
 8008082:	4629      	mov	r1, r5
 8008084:	4630      	mov	r0, r6
 8008086:	f7ff fd53 	bl	8007b30 <_Balloc>
 800808a:	b930      	cbnz	r0, 800809a <__mdiff+0x2e>
 800808c:	4b3a      	ldr	r3, [pc, #232]	; (8008178 <__mdiff+0x10c>)
 800808e:	4602      	mov	r2, r0
 8008090:	f240 2132 	movw	r1, #562	; 0x232
 8008094:	4839      	ldr	r0, [pc, #228]	; (800817c <__mdiff+0x110>)
 8008096:	f000 fb85 	bl	80087a4 <__assert_func>
 800809a:	2301      	movs	r3, #1
 800809c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80080a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080a4:	bfa4      	itt	ge
 80080a6:	4643      	movge	r3, r8
 80080a8:	46a0      	movge	r8, r4
 80080aa:	4630      	mov	r0, r6
 80080ac:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80080b0:	bfa6      	itte	ge
 80080b2:	461c      	movge	r4, r3
 80080b4:	2500      	movge	r5, #0
 80080b6:	2501      	movlt	r5, #1
 80080b8:	f7ff fd3a 	bl	8007b30 <_Balloc>
 80080bc:	b920      	cbnz	r0, 80080c8 <__mdiff+0x5c>
 80080be:	4b2e      	ldr	r3, [pc, #184]	; (8008178 <__mdiff+0x10c>)
 80080c0:	4602      	mov	r2, r0
 80080c2:	f44f 7110 	mov.w	r1, #576	; 0x240
 80080c6:	e7e5      	b.n	8008094 <__mdiff+0x28>
 80080c8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80080cc:	6926      	ldr	r6, [r4, #16]
 80080ce:	60c5      	str	r5, [r0, #12]
 80080d0:	f104 0914 	add.w	r9, r4, #20
 80080d4:	f108 0514 	add.w	r5, r8, #20
 80080d8:	f100 0e14 	add.w	lr, r0, #20
 80080dc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80080e0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80080e4:	f108 0210 	add.w	r2, r8, #16
 80080e8:	46f2      	mov	sl, lr
 80080ea:	2100      	movs	r1, #0
 80080ec:	f859 3b04 	ldr.w	r3, [r9], #4
 80080f0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80080f4:	fa1f f883 	uxth.w	r8, r3
 80080f8:	fa11 f18b 	uxtah	r1, r1, fp
 80080fc:	0c1b      	lsrs	r3, r3, #16
 80080fe:	eba1 0808 	sub.w	r8, r1, r8
 8008102:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008106:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800810a:	fa1f f888 	uxth.w	r8, r8
 800810e:	1419      	asrs	r1, r3, #16
 8008110:	454e      	cmp	r6, r9
 8008112:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008116:	f84a 3b04 	str.w	r3, [sl], #4
 800811a:	d8e7      	bhi.n	80080ec <__mdiff+0x80>
 800811c:	1b33      	subs	r3, r6, r4
 800811e:	3b15      	subs	r3, #21
 8008120:	f023 0303 	bic.w	r3, r3, #3
 8008124:	3304      	adds	r3, #4
 8008126:	3415      	adds	r4, #21
 8008128:	42a6      	cmp	r6, r4
 800812a:	bf38      	it	cc
 800812c:	2304      	movcc	r3, #4
 800812e:	441d      	add	r5, r3
 8008130:	4473      	add	r3, lr
 8008132:	469e      	mov	lr, r3
 8008134:	462e      	mov	r6, r5
 8008136:	4566      	cmp	r6, ip
 8008138:	d30e      	bcc.n	8008158 <__mdiff+0xec>
 800813a:	f10c 0203 	add.w	r2, ip, #3
 800813e:	1b52      	subs	r2, r2, r5
 8008140:	f022 0203 	bic.w	r2, r2, #3
 8008144:	3d03      	subs	r5, #3
 8008146:	45ac      	cmp	ip, r5
 8008148:	bf38      	it	cc
 800814a:	2200      	movcc	r2, #0
 800814c:	441a      	add	r2, r3
 800814e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008152:	b17b      	cbz	r3, 8008174 <__mdiff+0x108>
 8008154:	6107      	str	r7, [r0, #16]
 8008156:	e7a3      	b.n	80080a0 <__mdiff+0x34>
 8008158:	f856 8b04 	ldr.w	r8, [r6], #4
 800815c:	fa11 f288 	uxtah	r2, r1, r8
 8008160:	1414      	asrs	r4, r2, #16
 8008162:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008166:	b292      	uxth	r2, r2
 8008168:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800816c:	f84e 2b04 	str.w	r2, [lr], #4
 8008170:	1421      	asrs	r1, r4, #16
 8008172:	e7e0      	b.n	8008136 <__mdiff+0xca>
 8008174:	3f01      	subs	r7, #1
 8008176:	e7ea      	b.n	800814e <__mdiff+0xe2>
 8008178:	08008a97 	.word	0x08008a97
 800817c:	08008b08 	.word	0x08008b08

08008180 <__d2b>:
 8008180:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008184:	4689      	mov	r9, r1
 8008186:	2101      	movs	r1, #1
 8008188:	ec57 6b10 	vmov	r6, r7, d0
 800818c:	4690      	mov	r8, r2
 800818e:	f7ff fccf 	bl	8007b30 <_Balloc>
 8008192:	4604      	mov	r4, r0
 8008194:	b930      	cbnz	r0, 80081a4 <__d2b+0x24>
 8008196:	4602      	mov	r2, r0
 8008198:	4b25      	ldr	r3, [pc, #148]	; (8008230 <__d2b+0xb0>)
 800819a:	4826      	ldr	r0, [pc, #152]	; (8008234 <__d2b+0xb4>)
 800819c:	f240 310a 	movw	r1, #778	; 0x30a
 80081a0:	f000 fb00 	bl	80087a4 <__assert_func>
 80081a4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80081a8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80081ac:	bb35      	cbnz	r5, 80081fc <__d2b+0x7c>
 80081ae:	2e00      	cmp	r6, #0
 80081b0:	9301      	str	r3, [sp, #4]
 80081b2:	d028      	beq.n	8008206 <__d2b+0x86>
 80081b4:	4668      	mov	r0, sp
 80081b6:	9600      	str	r6, [sp, #0]
 80081b8:	f7ff fd82 	bl	8007cc0 <__lo0bits>
 80081bc:	9900      	ldr	r1, [sp, #0]
 80081be:	b300      	cbz	r0, 8008202 <__d2b+0x82>
 80081c0:	9a01      	ldr	r2, [sp, #4]
 80081c2:	f1c0 0320 	rsb	r3, r0, #32
 80081c6:	fa02 f303 	lsl.w	r3, r2, r3
 80081ca:	430b      	orrs	r3, r1
 80081cc:	40c2      	lsrs	r2, r0
 80081ce:	6163      	str	r3, [r4, #20]
 80081d0:	9201      	str	r2, [sp, #4]
 80081d2:	9b01      	ldr	r3, [sp, #4]
 80081d4:	61a3      	str	r3, [r4, #24]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	bf14      	ite	ne
 80081da:	2202      	movne	r2, #2
 80081dc:	2201      	moveq	r2, #1
 80081de:	6122      	str	r2, [r4, #16]
 80081e0:	b1d5      	cbz	r5, 8008218 <__d2b+0x98>
 80081e2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80081e6:	4405      	add	r5, r0
 80081e8:	f8c9 5000 	str.w	r5, [r9]
 80081ec:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80081f0:	f8c8 0000 	str.w	r0, [r8]
 80081f4:	4620      	mov	r0, r4
 80081f6:	b003      	add	sp, #12
 80081f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80081fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008200:	e7d5      	b.n	80081ae <__d2b+0x2e>
 8008202:	6161      	str	r1, [r4, #20]
 8008204:	e7e5      	b.n	80081d2 <__d2b+0x52>
 8008206:	a801      	add	r0, sp, #4
 8008208:	f7ff fd5a 	bl	8007cc0 <__lo0bits>
 800820c:	9b01      	ldr	r3, [sp, #4]
 800820e:	6163      	str	r3, [r4, #20]
 8008210:	2201      	movs	r2, #1
 8008212:	6122      	str	r2, [r4, #16]
 8008214:	3020      	adds	r0, #32
 8008216:	e7e3      	b.n	80081e0 <__d2b+0x60>
 8008218:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800821c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008220:	f8c9 0000 	str.w	r0, [r9]
 8008224:	6918      	ldr	r0, [r3, #16]
 8008226:	f7ff fd2b 	bl	8007c80 <__hi0bits>
 800822a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800822e:	e7df      	b.n	80081f0 <__d2b+0x70>
 8008230:	08008a97 	.word	0x08008a97
 8008234:	08008b08 	.word	0x08008b08

08008238 <_calloc_r>:
 8008238:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800823a:	fba1 2402 	umull	r2, r4, r1, r2
 800823e:	b94c      	cbnz	r4, 8008254 <_calloc_r+0x1c>
 8008240:	4611      	mov	r1, r2
 8008242:	9201      	str	r2, [sp, #4]
 8008244:	f000 f87a 	bl	800833c <_malloc_r>
 8008248:	9a01      	ldr	r2, [sp, #4]
 800824a:	4605      	mov	r5, r0
 800824c:	b930      	cbnz	r0, 800825c <_calloc_r+0x24>
 800824e:	4628      	mov	r0, r5
 8008250:	b003      	add	sp, #12
 8008252:	bd30      	pop	{r4, r5, pc}
 8008254:	220c      	movs	r2, #12
 8008256:	6002      	str	r2, [r0, #0]
 8008258:	2500      	movs	r5, #0
 800825a:	e7f8      	b.n	800824e <_calloc_r+0x16>
 800825c:	4621      	mov	r1, r4
 800825e:	f7fd fd2b 	bl	8005cb8 <memset>
 8008262:	e7f4      	b.n	800824e <_calloc_r+0x16>

08008264 <_free_r>:
 8008264:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008266:	2900      	cmp	r1, #0
 8008268:	d044      	beq.n	80082f4 <_free_r+0x90>
 800826a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800826e:	9001      	str	r0, [sp, #4]
 8008270:	2b00      	cmp	r3, #0
 8008272:	f1a1 0404 	sub.w	r4, r1, #4
 8008276:	bfb8      	it	lt
 8008278:	18e4      	addlt	r4, r4, r3
 800827a:	f000 fb19 	bl	80088b0 <__malloc_lock>
 800827e:	4a1e      	ldr	r2, [pc, #120]	; (80082f8 <_free_r+0x94>)
 8008280:	9801      	ldr	r0, [sp, #4]
 8008282:	6813      	ldr	r3, [r2, #0]
 8008284:	b933      	cbnz	r3, 8008294 <_free_r+0x30>
 8008286:	6063      	str	r3, [r4, #4]
 8008288:	6014      	str	r4, [r2, #0]
 800828a:	b003      	add	sp, #12
 800828c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008290:	f000 bb14 	b.w	80088bc <__malloc_unlock>
 8008294:	42a3      	cmp	r3, r4
 8008296:	d908      	bls.n	80082aa <_free_r+0x46>
 8008298:	6825      	ldr	r5, [r4, #0]
 800829a:	1961      	adds	r1, r4, r5
 800829c:	428b      	cmp	r3, r1
 800829e:	bf01      	itttt	eq
 80082a0:	6819      	ldreq	r1, [r3, #0]
 80082a2:	685b      	ldreq	r3, [r3, #4]
 80082a4:	1949      	addeq	r1, r1, r5
 80082a6:	6021      	streq	r1, [r4, #0]
 80082a8:	e7ed      	b.n	8008286 <_free_r+0x22>
 80082aa:	461a      	mov	r2, r3
 80082ac:	685b      	ldr	r3, [r3, #4]
 80082ae:	b10b      	cbz	r3, 80082b4 <_free_r+0x50>
 80082b0:	42a3      	cmp	r3, r4
 80082b2:	d9fa      	bls.n	80082aa <_free_r+0x46>
 80082b4:	6811      	ldr	r1, [r2, #0]
 80082b6:	1855      	adds	r5, r2, r1
 80082b8:	42a5      	cmp	r5, r4
 80082ba:	d10b      	bne.n	80082d4 <_free_r+0x70>
 80082bc:	6824      	ldr	r4, [r4, #0]
 80082be:	4421      	add	r1, r4
 80082c0:	1854      	adds	r4, r2, r1
 80082c2:	42a3      	cmp	r3, r4
 80082c4:	6011      	str	r1, [r2, #0]
 80082c6:	d1e0      	bne.n	800828a <_free_r+0x26>
 80082c8:	681c      	ldr	r4, [r3, #0]
 80082ca:	685b      	ldr	r3, [r3, #4]
 80082cc:	6053      	str	r3, [r2, #4]
 80082ce:	4421      	add	r1, r4
 80082d0:	6011      	str	r1, [r2, #0]
 80082d2:	e7da      	b.n	800828a <_free_r+0x26>
 80082d4:	d902      	bls.n	80082dc <_free_r+0x78>
 80082d6:	230c      	movs	r3, #12
 80082d8:	6003      	str	r3, [r0, #0]
 80082da:	e7d6      	b.n	800828a <_free_r+0x26>
 80082dc:	6825      	ldr	r5, [r4, #0]
 80082de:	1961      	adds	r1, r4, r5
 80082e0:	428b      	cmp	r3, r1
 80082e2:	bf04      	itt	eq
 80082e4:	6819      	ldreq	r1, [r3, #0]
 80082e6:	685b      	ldreq	r3, [r3, #4]
 80082e8:	6063      	str	r3, [r4, #4]
 80082ea:	bf04      	itt	eq
 80082ec:	1949      	addeq	r1, r1, r5
 80082ee:	6021      	streq	r1, [r4, #0]
 80082f0:	6054      	str	r4, [r2, #4]
 80082f2:	e7ca      	b.n	800828a <_free_r+0x26>
 80082f4:	b003      	add	sp, #12
 80082f6:	bd30      	pop	{r4, r5, pc}
 80082f8:	2000034c 	.word	0x2000034c

080082fc <sbrk_aligned>:
 80082fc:	b570      	push	{r4, r5, r6, lr}
 80082fe:	4e0e      	ldr	r6, [pc, #56]	; (8008338 <sbrk_aligned+0x3c>)
 8008300:	460c      	mov	r4, r1
 8008302:	6831      	ldr	r1, [r6, #0]
 8008304:	4605      	mov	r5, r0
 8008306:	b911      	cbnz	r1, 800830e <sbrk_aligned+0x12>
 8008308:	f000 f9e6 	bl	80086d8 <_sbrk_r>
 800830c:	6030      	str	r0, [r6, #0]
 800830e:	4621      	mov	r1, r4
 8008310:	4628      	mov	r0, r5
 8008312:	f000 f9e1 	bl	80086d8 <_sbrk_r>
 8008316:	1c43      	adds	r3, r0, #1
 8008318:	d00a      	beq.n	8008330 <sbrk_aligned+0x34>
 800831a:	1cc4      	adds	r4, r0, #3
 800831c:	f024 0403 	bic.w	r4, r4, #3
 8008320:	42a0      	cmp	r0, r4
 8008322:	d007      	beq.n	8008334 <sbrk_aligned+0x38>
 8008324:	1a21      	subs	r1, r4, r0
 8008326:	4628      	mov	r0, r5
 8008328:	f000 f9d6 	bl	80086d8 <_sbrk_r>
 800832c:	3001      	adds	r0, #1
 800832e:	d101      	bne.n	8008334 <sbrk_aligned+0x38>
 8008330:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008334:	4620      	mov	r0, r4
 8008336:	bd70      	pop	{r4, r5, r6, pc}
 8008338:	20000350 	.word	0x20000350

0800833c <_malloc_r>:
 800833c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008340:	1ccd      	adds	r5, r1, #3
 8008342:	f025 0503 	bic.w	r5, r5, #3
 8008346:	3508      	adds	r5, #8
 8008348:	2d0c      	cmp	r5, #12
 800834a:	bf38      	it	cc
 800834c:	250c      	movcc	r5, #12
 800834e:	2d00      	cmp	r5, #0
 8008350:	4607      	mov	r7, r0
 8008352:	db01      	blt.n	8008358 <_malloc_r+0x1c>
 8008354:	42a9      	cmp	r1, r5
 8008356:	d905      	bls.n	8008364 <_malloc_r+0x28>
 8008358:	230c      	movs	r3, #12
 800835a:	603b      	str	r3, [r7, #0]
 800835c:	2600      	movs	r6, #0
 800835e:	4630      	mov	r0, r6
 8008360:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008364:	4e2e      	ldr	r6, [pc, #184]	; (8008420 <_malloc_r+0xe4>)
 8008366:	f000 faa3 	bl	80088b0 <__malloc_lock>
 800836a:	6833      	ldr	r3, [r6, #0]
 800836c:	461c      	mov	r4, r3
 800836e:	bb34      	cbnz	r4, 80083be <_malloc_r+0x82>
 8008370:	4629      	mov	r1, r5
 8008372:	4638      	mov	r0, r7
 8008374:	f7ff ffc2 	bl	80082fc <sbrk_aligned>
 8008378:	1c43      	adds	r3, r0, #1
 800837a:	4604      	mov	r4, r0
 800837c:	d14d      	bne.n	800841a <_malloc_r+0xde>
 800837e:	6834      	ldr	r4, [r6, #0]
 8008380:	4626      	mov	r6, r4
 8008382:	2e00      	cmp	r6, #0
 8008384:	d140      	bne.n	8008408 <_malloc_r+0xcc>
 8008386:	6823      	ldr	r3, [r4, #0]
 8008388:	4631      	mov	r1, r6
 800838a:	4638      	mov	r0, r7
 800838c:	eb04 0803 	add.w	r8, r4, r3
 8008390:	f000 f9a2 	bl	80086d8 <_sbrk_r>
 8008394:	4580      	cmp	r8, r0
 8008396:	d13a      	bne.n	800840e <_malloc_r+0xd2>
 8008398:	6821      	ldr	r1, [r4, #0]
 800839a:	3503      	adds	r5, #3
 800839c:	1a6d      	subs	r5, r5, r1
 800839e:	f025 0503 	bic.w	r5, r5, #3
 80083a2:	3508      	adds	r5, #8
 80083a4:	2d0c      	cmp	r5, #12
 80083a6:	bf38      	it	cc
 80083a8:	250c      	movcc	r5, #12
 80083aa:	4629      	mov	r1, r5
 80083ac:	4638      	mov	r0, r7
 80083ae:	f7ff ffa5 	bl	80082fc <sbrk_aligned>
 80083b2:	3001      	adds	r0, #1
 80083b4:	d02b      	beq.n	800840e <_malloc_r+0xd2>
 80083b6:	6823      	ldr	r3, [r4, #0]
 80083b8:	442b      	add	r3, r5
 80083ba:	6023      	str	r3, [r4, #0]
 80083bc:	e00e      	b.n	80083dc <_malloc_r+0xa0>
 80083be:	6822      	ldr	r2, [r4, #0]
 80083c0:	1b52      	subs	r2, r2, r5
 80083c2:	d41e      	bmi.n	8008402 <_malloc_r+0xc6>
 80083c4:	2a0b      	cmp	r2, #11
 80083c6:	d916      	bls.n	80083f6 <_malloc_r+0xba>
 80083c8:	1961      	adds	r1, r4, r5
 80083ca:	42a3      	cmp	r3, r4
 80083cc:	6025      	str	r5, [r4, #0]
 80083ce:	bf18      	it	ne
 80083d0:	6059      	strne	r1, [r3, #4]
 80083d2:	6863      	ldr	r3, [r4, #4]
 80083d4:	bf08      	it	eq
 80083d6:	6031      	streq	r1, [r6, #0]
 80083d8:	5162      	str	r2, [r4, r5]
 80083da:	604b      	str	r3, [r1, #4]
 80083dc:	4638      	mov	r0, r7
 80083de:	f104 060b 	add.w	r6, r4, #11
 80083e2:	f000 fa6b 	bl	80088bc <__malloc_unlock>
 80083e6:	f026 0607 	bic.w	r6, r6, #7
 80083ea:	1d23      	adds	r3, r4, #4
 80083ec:	1af2      	subs	r2, r6, r3
 80083ee:	d0b6      	beq.n	800835e <_malloc_r+0x22>
 80083f0:	1b9b      	subs	r3, r3, r6
 80083f2:	50a3      	str	r3, [r4, r2]
 80083f4:	e7b3      	b.n	800835e <_malloc_r+0x22>
 80083f6:	6862      	ldr	r2, [r4, #4]
 80083f8:	42a3      	cmp	r3, r4
 80083fa:	bf0c      	ite	eq
 80083fc:	6032      	streq	r2, [r6, #0]
 80083fe:	605a      	strne	r2, [r3, #4]
 8008400:	e7ec      	b.n	80083dc <_malloc_r+0xa0>
 8008402:	4623      	mov	r3, r4
 8008404:	6864      	ldr	r4, [r4, #4]
 8008406:	e7b2      	b.n	800836e <_malloc_r+0x32>
 8008408:	4634      	mov	r4, r6
 800840a:	6876      	ldr	r6, [r6, #4]
 800840c:	e7b9      	b.n	8008382 <_malloc_r+0x46>
 800840e:	230c      	movs	r3, #12
 8008410:	603b      	str	r3, [r7, #0]
 8008412:	4638      	mov	r0, r7
 8008414:	f000 fa52 	bl	80088bc <__malloc_unlock>
 8008418:	e7a1      	b.n	800835e <_malloc_r+0x22>
 800841a:	6025      	str	r5, [r4, #0]
 800841c:	e7de      	b.n	80083dc <_malloc_r+0xa0>
 800841e:	bf00      	nop
 8008420:	2000034c 	.word	0x2000034c

08008424 <__sfputc_r>:
 8008424:	6893      	ldr	r3, [r2, #8]
 8008426:	3b01      	subs	r3, #1
 8008428:	2b00      	cmp	r3, #0
 800842a:	b410      	push	{r4}
 800842c:	6093      	str	r3, [r2, #8]
 800842e:	da08      	bge.n	8008442 <__sfputc_r+0x1e>
 8008430:	6994      	ldr	r4, [r2, #24]
 8008432:	42a3      	cmp	r3, r4
 8008434:	db01      	blt.n	800843a <__sfputc_r+0x16>
 8008436:	290a      	cmp	r1, #10
 8008438:	d103      	bne.n	8008442 <__sfputc_r+0x1e>
 800843a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800843e:	f7fe ba01 	b.w	8006844 <__swbuf_r>
 8008442:	6813      	ldr	r3, [r2, #0]
 8008444:	1c58      	adds	r0, r3, #1
 8008446:	6010      	str	r0, [r2, #0]
 8008448:	7019      	strb	r1, [r3, #0]
 800844a:	4608      	mov	r0, r1
 800844c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008450:	4770      	bx	lr

08008452 <__sfputs_r>:
 8008452:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008454:	4606      	mov	r6, r0
 8008456:	460f      	mov	r7, r1
 8008458:	4614      	mov	r4, r2
 800845a:	18d5      	adds	r5, r2, r3
 800845c:	42ac      	cmp	r4, r5
 800845e:	d101      	bne.n	8008464 <__sfputs_r+0x12>
 8008460:	2000      	movs	r0, #0
 8008462:	e007      	b.n	8008474 <__sfputs_r+0x22>
 8008464:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008468:	463a      	mov	r2, r7
 800846a:	4630      	mov	r0, r6
 800846c:	f7ff ffda 	bl	8008424 <__sfputc_r>
 8008470:	1c43      	adds	r3, r0, #1
 8008472:	d1f3      	bne.n	800845c <__sfputs_r+0xa>
 8008474:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008478 <_vfiprintf_r>:
 8008478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800847c:	460d      	mov	r5, r1
 800847e:	b09d      	sub	sp, #116	; 0x74
 8008480:	4614      	mov	r4, r2
 8008482:	4698      	mov	r8, r3
 8008484:	4606      	mov	r6, r0
 8008486:	b118      	cbz	r0, 8008490 <_vfiprintf_r+0x18>
 8008488:	6983      	ldr	r3, [r0, #24]
 800848a:	b90b      	cbnz	r3, 8008490 <_vfiprintf_r+0x18>
 800848c:	f7ff fa30 	bl	80078f0 <__sinit>
 8008490:	4b89      	ldr	r3, [pc, #548]	; (80086b8 <_vfiprintf_r+0x240>)
 8008492:	429d      	cmp	r5, r3
 8008494:	d11b      	bne.n	80084ce <_vfiprintf_r+0x56>
 8008496:	6875      	ldr	r5, [r6, #4]
 8008498:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800849a:	07d9      	lsls	r1, r3, #31
 800849c:	d405      	bmi.n	80084aa <_vfiprintf_r+0x32>
 800849e:	89ab      	ldrh	r3, [r5, #12]
 80084a0:	059a      	lsls	r2, r3, #22
 80084a2:	d402      	bmi.n	80084aa <_vfiprintf_r+0x32>
 80084a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80084a6:	f7ff fac6 	bl	8007a36 <__retarget_lock_acquire_recursive>
 80084aa:	89ab      	ldrh	r3, [r5, #12]
 80084ac:	071b      	lsls	r3, r3, #28
 80084ae:	d501      	bpl.n	80084b4 <_vfiprintf_r+0x3c>
 80084b0:	692b      	ldr	r3, [r5, #16]
 80084b2:	b9eb      	cbnz	r3, 80084f0 <_vfiprintf_r+0x78>
 80084b4:	4629      	mov	r1, r5
 80084b6:	4630      	mov	r0, r6
 80084b8:	f7fe fa16 	bl	80068e8 <__swsetup_r>
 80084bc:	b1c0      	cbz	r0, 80084f0 <_vfiprintf_r+0x78>
 80084be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80084c0:	07dc      	lsls	r4, r3, #31
 80084c2:	d50e      	bpl.n	80084e2 <_vfiprintf_r+0x6a>
 80084c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80084c8:	b01d      	add	sp, #116	; 0x74
 80084ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084ce:	4b7b      	ldr	r3, [pc, #492]	; (80086bc <_vfiprintf_r+0x244>)
 80084d0:	429d      	cmp	r5, r3
 80084d2:	d101      	bne.n	80084d8 <_vfiprintf_r+0x60>
 80084d4:	68b5      	ldr	r5, [r6, #8]
 80084d6:	e7df      	b.n	8008498 <_vfiprintf_r+0x20>
 80084d8:	4b79      	ldr	r3, [pc, #484]	; (80086c0 <_vfiprintf_r+0x248>)
 80084da:	429d      	cmp	r5, r3
 80084dc:	bf08      	it	eq
 80084de:	68f5      	ldreq	r5, [r6, #12]
 80084e0:	e7da      	b.n	8008498 <_vfiprintf_r+0x20>
 80084e2:	89ab      	ldrh	r3, [r5, #12]
 80084e4:	0598      	lsls	r0, r3, #22
 80084e6:	d4ed      	bmi.n	80084c4 <_vfiprintf_r+0x4c>
 80084e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80084ea:	f7ff faa5 	bl	8007a38 <__retarget_lock_release_recursive>
 80084ee:	e7e9      	b.n	80084c4 <_vfiprintf_r+0x4c>
 80084f0:	2300      	movs	r3, #0
 80084f2:	9309      	str	r3, [sp, #36]	; 0x24
 80084f4:	2320      	movs	r3, #32
 80084f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80084fa:	f8cd 800c 	str.w	r8, [sp, #12]
 80084fe:	2330      	movs	r3, #48	; 0x30
 8008500:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80086c4 <_vfiprintf_r+0x24c>
 8008504:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008508:	f04f 0901 	mov.w	r9, #1
 800850c:	4623      	mov	r3, r4
 800850e:	469a      	mov	sl, r3
 8008510:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008514:	b10a      	cbz	r2, 800851a <_vfiprintf_r+0xa2>
 8008516:	2a25      	cmp	r2, #37	; 0x25
 8008518:	d1f9      	bne.n	800850e <_vfiprintf_r+0x96>
 800851a:	ebba 0b04 	subs.w	fp, sl, r4
 800851e:	d00b      	beq.n	8008538 <_vfiprintf_r+0xc0>
 8008520:	465b      	mov	r3, fp
 8008522:	4622      	mov	r2, r4
 8008524:	4629      	mov	r1, r5
 8008526:	4630      	mov	r0, r6
 8008528:	f7ff ff93 	bl	8008452 <__sfputs_r>
 800852c:	3001      	adds	r0, #1
 800852e:	f000 80aa 	beq.w	8008686 <_vfiprintf_r+0x20e>
 8008532:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008534:	445a      	add	r2, fp
 8008536:	9209      	str	r2, [sp, #36]	; 0x24
 8008538:	f89a 3000 	ldrb.w	r3, [sl]
 800853c:	2b00      	cmp	r3, #0
 800853e:	f000 80a2 	beq.w	8008686 <_vfiprintf_r+0x20e>
 8008542:	2300      	movs	r3, #0
 8008544:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008548:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800854c:	f10a 0a01 	add.w	sl, sl, #1
 8008550:	9304      	str	r3, [sp, #16]
 8008552:	9307      	str	r3, [sp, #28]
 8008554:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008558:	931a      	str	r3, [sp, #104]	; 0x68
 800855a:	4654      	mov	r4, sl
 800855c:	2205      	movs	r2, #5
 800855e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008562:	4858      	ldr	r0, [pc, #352]	; (80086c4 <_vfiprintf_r+0x24c>)
 8008564:	f7f7 fe5c 	bl	8000220 <memchr>
 8008568:	9a04      	ldr	r2, [sp, #16]
 800856a:	b9d8      	cbnz	r0, 80085a4 <_vfiprintf_r+0x12c>
 800856c:	06d1      	lsls	r1, r2, #27
 800856e:	bf44      	itt	mi
 8008570:	2320      	movmi	r3, #32
 8008572:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008576:	0713      	lsls	r3, r2, #28
 8008578:	bf44      	itt	mi
 800857a:	232b      	movmi	r3, #43	; 0x2b
 800857c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008580:	f89a 3000 	ldrb.w	r3, [sl]
 8008584:	2b2a      	cmp	r3, #42	; 0x2a
 8008586:	d015      	beq.n	80085b4 <_vfiprintf_r+0x13c>
 8008588:	9a07      	ldr	r2, [sp, #28]
 800858a:	4654      	mov	r4, sl
 800858c:	2000      	movs	r0, #0
 800858e:	f04f 0c0a 	mov.w	ip, #10
 8008592:	4621      	mov	r1, r4
 8008594:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008598:	3b30      	subs	r3, #48	; 0x30
 800859a:	2b09      	cmp	r3, #9
 800859c:	d94e      	bls.n	800863c <_vfiprintf_r+0x1c4>
 800859e:	b1b0      	cbz	r0, 80085ce <_vfiprintf_r+0x156>
 80085a0:	9207      	str	r2, [sp, #28]
 80085a2:	e014      	b.n	80085ce <_vfiprintf_r+0x156>
 80085a4:	eba0 0308 	sub.w	r3, r0, r8
 80085a8:	fa09 f303 	lsl.w	r3, r9, r3
 80085ac:	4313      	orrs	r3, r2
 80085ae:	9304      	str	r3, [sp, #16]
 80085b0:	46a2      	mov	sl, r4
 80085b2:	e7d2      	b.n	800855a <_vfiprintf_r+0xe2>
 80085b4:	9b03      	ldr	r3, [sp, #12]
 80085b6:	1d19      	adds	r1, r3, #4
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	9103      	str	r1, [sp, #12]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	bfbb      	ittet	lt
 80085c0:	425b      	neglt	r3, r3
 80085c2:	f042 0202 	orrlt.w	r2, r2, #2
 80085c6:	9307      	strge	r3, [sp, #28]
 80085c8:	9307      	strlt	r3, [sp, #28]
 80085ca:	bfb8      	it	lt
 80085cc:	9204      	strlt	r2, [sp, #16]
 80085ce:	7823      	ldrb	r3, [r4, #0]
 80085d0:	2b2e      	cmp	r3, #46	; 0x2e
 80085d2:	d10c      	bne.n	80085ee <_vfiprintf_r+0x176>
 80085d4:	7863      	ldrb	r3, [r4, #1]
 80085d6:	2b2a      	cmp	r3, #42	; 0x2a
 80085d8:	d135      	bne.n	8008646 <_vfiprintf_r+0x1ce>
 80085da:	9b03      	ldr	r3, [sp, #12]
 80085dc:	1d1a      	adds	r2, r3, #4
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	9203      	str	r2, [sp, #12]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	bfb8      	it	lt
 80085e6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80085ea:	3402      	adds	r4, #2
 80085ec:	9305      	str	r3, [sp, #20]
 80085ee:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80086d4 <_vfiprintf_r+0x25c>
 80085f2:	7821      	ldrb	r1, [r4, #0]
 80085f4:	2203      	movs	r2, #3
 80085f6:	4650      	mov	r0, sl
 80085f8:	f7f7 fe12 	bl	8000220 <memchr>
 80085fc:	b140      	cbz	r0, 8008610 <_vfiprintf_r+0x198>
 80085fe:	2340      	movs	r3, #64	; 0x40
 8008600:	eba0 000a 	sub.w	r0, r0, sl
 8008604:	fa03 f000 	lsl.w	r0, r3, r0
 8008608:	9b04      	ldr	r3, [sp, #16]
 800860a:	4303      	orrs	r3, r0
 800860c:	3401      	adds	r4, #1
 800860e:	9304      	str	r3, [sp, #16]
 8008610:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008614:	482c      	ldr	r0, [pc, #176]	; (80086c8 <_vfiprintf_r+0x250>)
 8008616:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800861a:	2206      	movs	r2, #6
 800861c:	f7f7 fe00 	bl	8000220 <memchr>
 8008620:	2800      	cmp	r0, #0
 8008622:	d03f      	beq.n	80086a4 <_vfiprintf_r+0x22c>
 8008624:	4b29      	ldr	r3, [pc, #164]	; (80086cc <_vfiprintf_r+0x254>)
 8008626:	bb1b      	cbnz	r3, 8008670 <_vfiprintf_r+0x1f8>
 8008628:	9b03      	ldr	r3, [sp, #12]
 800862a:	3307      	adds	r3, #7
 800862c:	f023 0307 	bic.w	r3, r3, #7
 8008630:	3308      	adds	r3, #8
 8008632:	9303      	str	r3, [sp, #12]
 8008634:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008636:	443b      	add	r3, r7
 8008638:	9309      	str	r3, [sp, #36]	; 0x24
 800863a:	e767      	b.n	800850c <_vfiprintf_r+0x94>
 800863c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008640:	460c      	mov	r4, r1
 8008642:	2001      	movs	r0, #1
 8008644:	e7a5      	b.n	8008592 <_vfiprintf_r+0x11a>
 8008646:	2300      	movs	r3, #0
 8008648:	3401      	adds	r4, #1
 800864a:	9305      	str	r3, [sp, #20]
 800864c:	4619      	mov	r1, r3
 800864e:	f04f 0c0a 	mov.w	ip, #10
 8008652:	4620      	mov	r0, r4
 8008654:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008658:	3a30      	subs	r2, #48	; 0x30
 800865a:	2a09      	cmp	r2, #9
 800865c:	d903      	bls.n	8008666 <_vfiprintf_r+0x1ee>
 800865e:	2b00      	cmp	r3, #0
 8008660:	d0c5      	beq.n	80085ee <_vfiprintf_r+0x176>
 8008662:	9105      	str	r1, [sp, #20]
 8008664:	e7c3      	b.n	80085ee <_vfiprintf_r+0x176>
 8008666:	fb0c 2101 	mla	r1, ip, r1, r2
 800866a:	4604      	mov	r4, r0
 800866c:	2301      	movs	r3, #1
 800866e:	e7f0      	b.n	8008652 <_vfiprintf_r+0x1da>
 8008670:	ab03      	add	r3, sp, #12
 8008672:	9300      	str	r3, [sp, #0]
 8008674:	462a      	mov	r2, r5
 8008676:	4b16      	ldr	r3, [pc, #88]	; (80086d0 <_vfiprintf_r+0x258>)
 8008678:	a904      	add	r1, sp, #16
 800867a:	4630      	mov	r0, r6
 800867c:	f7fd fbc4 	bl	8005e08 <_printf_float>
 8008680:	4607      	mov	r7, r0
 8008682:	1c78      	adds	r0, r7, #1
 8008684:	d1d6      	bne.n	8008634 <_vfiprintf_r+0x1bc>
 8008686:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008688:	07d9      	lsls	r1, r3, #31
 800868a:	d405      	bmi.n	8008698 <_vfiprintf_r+0x220>
 800868c:	89ab      	ldrh	r3, [r5, #12]
 800868e:	059a      	lsls	r2, r3, #22
 8008690:	d402      	bmi.n	8008698 <_vfiprintf_r+0x220>
 8008692:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008694:	f7ff f9d0 	bl	8007a38 <__retarget_lock_release_recursive>
 8008698:	89ab      	ldrh	r3, [r5, #12]
 800869a:	065b      	lsls	r3, r3, #25
 800869c:	f53f af12 	bmi.w	80084c4 <_vfiprintf_r+0x4c>
 80086a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80086a2:	e711      	b.n	80084c8 <_vfiprintf_r+0x50>
 80086a4:	ab03      	add	r3, sp, #12
 80086a6:	9300      	str	r3, [sp, #0]
 80086a8:	462a      	mov	r2, r5
 80086aa:	4b09      	ldr	r3, [pc, #36]	; (80086d0 <_vfiprintf_r+0x258>)
 80086ac:	a904      	add	r1, sp, #16
 80086ae:	4630      	mov	r0, r6
 80086b0:	f7fd fe4e 	bl	8006350 <_printf_i>
 80086b4:	e7e4      	b.n	8008680 <_vfiprintf_r+0x208>
 80086b6:	bf00      	nop
 80086b8:	08008ac8 	.word	0x08008ac8
 80086bc:	08008ae8 	.word	0x08008ae8
 80086c0:	08008aa8 	.word	0x08008aa8
 80086c4:	08008c64 	.word	0x08008c64
 80086c8:	08008c6e 	.word	0x08008c6e
 80086cc:	08005e09 	.word	0x08005e09
 80086d0:	08008453 	.word	0x08008453
 80086d4:	08008c6a 	.word	0x08008c6a

080086d8 <_sbrk_r>:
 80086d8:	b538      	push	{r3, r4, r5, lr}
 80086da:	4d06      	ldr	r5, [pc, #24]	; (80086f4 <_sbrk_r+0x1c>)
 80086dc:	2300      	movs	r3, #0
 80086de:	4604      	mov	r4, r0
 80086e0:	4608      	mov	r0, r1
 80086e2:	602b      	str	r3, [r5, #0]
 80086e4:	f7f9 f9e6 	bl	8001ab4 <_sbrk>
 80086e8:	1c43      	adds	r3, r0, #1
 80086ea:	d102      	bne.n	80086f2 <_sbrk_r+0x1a>
 80086ec:	682b      	ldr	r3, [r5, #0]
 80086ee:	b103      	cbz	r3, 80086f2 <_sbrk_r+0x1a>
 80086f0:	6023      	str	r3, [r4, #0]
 80086f2:	bd38      	pop	{r3, r4, r5, pc}
 80086f4:	20000354 	.word	0x20000354

080086f8 <__sread>:
 80086f8:	b510      	push	{r4, lr}
 80086fa:	460c      	mov	r4, r1
 80086fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008700:	f000 f8e2 	bl	80088c8 <_read_r>
 8008704:	2800      	cmp	r0, #0
 8008706:	bfab      	itete	ge
 8008708:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800870a:	89a3      	ldrhlt	r3, [r4, #12]
 800870c:	181b      	addge	r3, r3, r0
 800870e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008712:	bfac      	ite	ge
 8008714:	6563      	strge	r3, [r4, #84]	; 0x54
 8008716:	81a3      	strhlt	r3, [r4, #12]
 8008718:	bd10      	pop	{r4, pc}

0800871a <__swrite>:
 800871a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800871e:	461f      	mov	r7, r3
 8008720:	898b      	ldrh	r3, [r1, #12]
 8008722:	05db      	lsls	r3, r3, #23
 8008724:	4605      	mov	r5, r0
 8008726:	460c      	mov	r4, r1
 8008728:	4616      	mov	r6, r2
 800872a:	d505      	bpl.n	8008738 <__swrite+0x1e>
 800872c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008730:	2302      	movs	r3, #2
 8008732:	2200      	movs	r2, #0
 8008734:	f000 f898 	bl	8008868 <_lseek_r>
 8008738:	89a3      	ldrh	r3, [r4, #12]
 800873a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800873e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008742:	81a3      	strh	r3, [r4, #12]
 8008744:	4632      	mov	r2, r6
 8008746:	463b      	mov	r3, r7
 8008748:	4628      	mov	r0, r5
 800874a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800874e:	f000 b817 	b.w	8008780 <_write_r>

08008752 <__sseek>:
 8008752:	b510      	push	{r4, lr}
 8008754:	460c      	mov	r4, r1
 8008756:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800875a:	f000 f885 	bl	8008868 <_lseek_r>
 800875e:	1c43      	adds	r3, r0, #1
 8008760:	89a3      	ldrh	r3, [r4, #12]
 8008762:	bf15      	itete	ne
 8008764:	6560      	strne	r0, [r4, #84]	; 0x54
 8008766:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800876a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800876e:	81a3      	strheq	r3, [r4, #12]
 8008770:	bf18      	it	ne
 8008772:	81a3      	strhne	r3, [r4, #12]
 8008774:	bd10      	pop	{r4, pc}

08008776 <__sclose>:
 8008776:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800877a:	f000 b831 	b.w	80087e0 <_close_r>
	...

08008780 <_write_r>:
 8008780:	b538      	push	{r3, r4, r5, lr}
 8008782:	4d07      	ldr	r5, [pc, #28]	; (80087a0 <_write_r+0x20>)
 8008784:	4604      	mov	r4, r0
 8008786:	4608      	mov	r0, r1
 8008788:	4611      	mov	r1, r2
 800878a:	2200      	movs	r2, #0
 800878c:	602a      	str	r2, [r5, #0]
 800878e:	461a      	mov	r2, r3
 8008790:	f7f8 fd04 	bl	800119c <_write>
 8008794:	1c43      	adds	r3, r0, #1
 8008796:	d102      	bne.n	800879e <_write_r+0x1e>
 8008798:	682b      	ldr	r3, [r5, #0]
 800879a:	b103      	cbz	r3, 800879e <_write_r+0x1e>
 800879c:	6023      	str	r3, [r4, #0]
 800879e:	bd38      	pop	{r3, r4, r5, pc}
 80087a0:	20000354 	.word	0x20000354

080087a4 <__assert_func>:
 80087a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80087a6:	4614      	mov	r4, r2
 80087a8:	461a      	mov	r2, r3
 80087aa:	4b09      	ldr	r3, [pc, #36]	; (80087d0 <__assert_func+0x2c>)
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	4605      	mov	r5, r0
 80087b0:	68d8      	ldr	r0, [r3, #12]
 80087b2:	b14c      	cbz	r4, 80087c8 <__assert_func+0x24>
 80087b4:	4b07      	ldr	r3, [pc, #28]	; (80087d4 <__assert_func+0x30>)
 80087b6:	9100      	str	r1, [sp, #0]
 80087b8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80087bc:	4906      	ldr	r1, [pc, #24]	; (80087d8 <__assert_func+0x34>)
 80087be:	462b      	mov	r3, r5
 80087c0:	f000 f81e 	bl	8008800 <fiprintf>
 80087c4:	f000 f89f 	bl	8008906 <abort>
 80087c8:	4b04      	ldr	r3, [pc, #16]	; (80087dc <__assert_func+0x38>)
 80087ca:	461c      	mov	r4, r3
 80087cc:	e7f3      	b.n	80087b6 <__assert_func+0x12>
 80087ce:	bf00      	nop
 80087d0:	2000000c 	.word	0x2000000c
 80087d4:	08008c75 	.word	0x08008c75
 80087d8:	08008c82 	.word	0x08008c82
 80087dc:	08008cb0 	.word	0x08008cb0

080087e0 <_close_r>:
 80087e0:	b538      	push	{r3, r4, r5, lr}
 80087e2:	4d06      	ldr	r5, [pc, #24]	; (80087fc <_close_r+0x1c>)
 80087e4:	2300      	movs	r3, #0
 80087e6:	4604      	mov	r4, r0
 80087e8:	4608      	mov	r0, r1
 80087ea:	602b      	str	r3, [r5, #0]
 80087ec:	f7f9 f92d 	bl	8001a4a <_close>
 80087f0:	1c43      	adds	r3, r0, #1
 80087f2:	d102      	bne.n	80087fa <_close_r+0x1a>
 80087f4:	682b      	ldr	r3, [r5, #0]
 80087f6:	b103      	cbz	r3, 80087fa <_close_r+0x1a>
 80087f8:	6023      	str	r3, [r4, #0]
 80087fa:	bd38      	pop	{r3, r4, r5, pc}
 80087fc:	20000354 	.word	0x20000354

08008800 <fiprintf>:
 8008800:	b40e      	push	{r1, r2, r3}
 8008802:	b503      	push	{r0, r1, lr}
 8008804:	4601      	mov	r1, r0
 8008806:	ab03      	add	r3, sp, #12
 8008808:	4805      	ldr	r0, [pc, #20]	; (8008820 <fiprintf+0x20>)
 800880a:	f853 2b04 	ldr.w	r2, [r3], #4
 800880e:	6800      	ldr	r0, [r0, #0]
 8008810:	9301      	str	r3, [sp, #4]
 8008812:	f7ff fe31 	bl	8008478 <_vfiprintf_r>
 8008816:	b002      	add	sp, #8
 8008818:	f85d eb04 	ldr.w	lr, [sp], #4
 800881c:	b003      	add	sp, #12
 800881e:	4770      	bx	lr
 8008820:	2000000c 	.word	0x2000000c

08008824 <_fstat_r>:
 8008824:	b538      	push	{r3, r4, r5, lr}
 8008826:	4d07      	ldr	r5, [pc, #28]	; (8008844 <_fstat_r+0x20>)
 8008828:	2300      	movs	r3, #0
 800882a:	4604      	mov	r4, r0
 800882c:	4608      	mov	r0, r1
 800882e:	4611      	mov	r1, r2
 8008830:	602b      	str	r3, [r5, #0]
 8008832:	f7f9 f916 	bl	8001a62 <_fstat>
 8008836:	1c43      	adds	r3, r0, #1
 8008838:	d102      	bne.n	8008840 <_fstat_r+0x1c>
 800883a:	682b      	ldr	r3, [r5, #0]
 800883c:	b103      	cbz	r3, 8008840 <_fstat_r+0x1c>
 800883e:	6023      	str	r3, [r4, #0]
 8008840:	bd38      	pop	{r3, r4, r5, pc}
 8008842:	bf00      	nop
 8008844:	20000354 	.word	0x20000354

08008848 <_isatty_r>:
 8008848:	b538      	push	{r3, r4, r5, lr}
 800884a:	4d06      	ldr	r5, [pc, #24]	; (8008864 <_isatty_r+0x1c>)
 800884c:	2300      	movs	r3, #0
 800884e:	4604      	mov	r4, r0
 8008850:	4608      	mov	r0, r1
 8008852:	602b      	str	r3, [r5, #0]
 8008854:	f7f9 f915 	bl	8001a82 <_isatty>
 8008858:	1c43      	adds	r3, r0, #1
 800885a:	d102      	bne.n	8008862 <_isatty_r+0x1a>
 800885c:	682b      	ldr	r3, [r5, #0]
 800885e:	b103      	cbz	r3, 8008862 <_isatty_r+0x1a>
 8008860:	6023      	str	r3, [r4, #0]
 8008862:	bd38      	pop	{r3, r4, r5, pc}
 8008864:	20000354 	.word	0x20000354

08008868 <_lseek_r>:
 8008868:	b538      	push	{r3, r4, r5, lr}
 800886a:	4d07      	ldr	r5, [pc, #28]	; (8008888 <_lseek_r+0x20>)
 800886c:	4604      	mov	r4, r0
 800886e:	4608      	mov	r0, r1
 8008870:	4611      	mov	r1, r2
 8008872:	2200      	movs	r2, #0
 8008874:	602a      	str	r2, [r5, #0]
 8008876:	461a      	mov	r2, r3
 8008878:	f7f9 f90e 	bl	8001a98 <_lseek>
 800887c:	1c43      	adds	r3, r0, #1
 800887e:	d102      	bne.n	8008886 <_lseek_r+0x1e>
 8008880:	682b      	ldr	r3, [r5, #0]
 8008882:	b103      	cbz	r3, 8008886 <_lseek_r+0x1e>
 8008884:	6023      	str	r3, [r4, #0]
 8008886:	bd38      	pop	{r3, r4, r5, pc}
 8008888:	20000354 	.word	0x20000354

0800888c <__ascii_mbtowc>:
 800888c:	b082      	sub	sp, #8
 800888e:	b901      	cbnz	r1, 8008892 <__ascii_mbtowc+0x6>
 8008890:	a901      	add	r1, sp, #4
 8008892:	b142      	cbz	r2, 80088a6 <__ascii_mbtowc+0x1a>
 8008894:	b14b      	cbz	r3, 80088aa <__ascii_mbtowc+0x1e>
 8008896:	7813      	ldrb	r3, [r2, #0]
 8008898:	600b      	str	r3, [r1, #0]
 800889a:	7812      	ldrb	r2, [r2, #0]
 800889c:	1e10      	subs	r0, r2, #0
 800889e:	bf18      	it	ne
 80088a0:	2001      	movne	r0, #1
 80088a2:	b002      	add	sp, #8
 80088a4:	4770      	bx	lr
 80088a6:	4610      	mov	r0, r2
 80088a8:	e7fb      	b.n	80088a2 <__ascii_mbtowc+0x16>
 80088aa:	f06f 0001 	mvn.w	r0, #1
 80088ae:	e7f8      	b.n	80088a2 <__ascii_mbtowc+0x16>

080088b0 <__malloc_lock>:
 80088b0:	4801      	ldr	r0, [pc, #4]	; (80088b8 <__malloc_lock+0x8>)
 80088b2:	f7ff b8c0 	b.w	8007a36 <__retarget_lock_acquire_recursive>
 80088b6:	bf00      	nop
 80088b8:	20000348 	.word	0x20000348

080088bc <__malloc_unlock>:
 80088bc:	4801      	ldr	r0, [pc, #4]	; (80088c4 <__malloc_unlock+0x8>)
 80088be:	f7ff b8bb 	b.w	8007a38 <__retarget_lock_release_recursive>
 80088c2:	bf00      	nop
 80088c4:	20000348 	.word	0x20000348

080088c8 <_read_r>:
 80088c8:	b538      	push	{r3, r4, r5, lr}
 80088ca:	4d07      	ldr	r5, [pc, #28]	; (80088e8 <_read_r+0x20>)
 80088cc:	4604      	mov	r4, r0
 80088ce:	4608      	mov	r0, r1
 80088d0:	4611      	mov	r1, r2
 80088d2:	2200      	movs	r2, #0
 80088d4:	602a      	str	r2, [r5, #0]
 80088d6:	461a      	mov	r2, r3
 80088d8:	f7f9 f89a 	bl	8001a10 <_read>
 80088dc:	1c43      	adds	r3, r0, #1
 80088de:	d102      	bne.n	80088e6 <_read_r+0x1e>
 80088e0:	682b      	ldr	r3, [r5, #0]
 80088e2:	b103      	cbz	r3, 80088e6 <_read_r+0x1e>
 80088e4:	6023      	str	r3, [r4, #0]
 80088e6:	bd38      	pop	{r3, r4, r5, pc}
 80088e8:	20000354 	.word	0x20000354

080088ec <__ascii_wctomb>:
 80088ec:	b149      	cbz	r1, 8008902 <__ascii_wctomb+0x16>
 80088ee:	2aff      	cmp	r2, #255	; 0xff
 80088f0:	bf85      	ittet	hi
 80088f2:	238a      	movhi	r3, #138	; 0x8a
 80088f4:	6003      	strhi	r3, [r0, #0]
 80088f6:	700a      	strbls	r2, [r1, #0]
 80088f8:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80088fc:	bf98      	it	ls
 80088fe:	2001      	movls	r0, #1
 8008900:	4770      	bx	lr
 8008902:	4608      	mov	r0, r1
 8008904:	4770      	bx	lr

08008906 <abort>:
 8008906:	b508      	push	{r3, lr}
 8008908:	2006      	movs	r0, #6
 800890a:	f000 f82b 	bl	8008964 <raise>
 800890e:	2001      	movs	r0, #1
 8008910:	f7f9 f874 	bl	80019fc <_exit>

08008914 <_raise_r>:
 8008914:	291f      	cmp	r1, #31
 8008916:	b538      	push	{r3, r4, r5, lr}
 8008918:	4604      	mov	r4, r0
 800891a:	460d      	mov	r5, r1
 800891c:	d904      	bls.n	8008928 <_raise_r+0x14>
 800891e:	2316      	movs	r3, #22
 8008920:	6003      	str	r3, [r0, #0]
 8008922:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008926:	bd38      	pop	{r3, r4, r5, pc}
 8008928:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800892a:	b112      	cbz	r2, 8008932 <_raise_r+0x1e>
 800892c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008930:	b94b      	cbnz	r3, 8008946 <_raise_r+0x32>
 8008932:	4620      	mov	r0, r4
 8008934:	f000 f830 	bl	8008998 <_getpid_r>
 8008938:	462a      	mov	r2, r5
 800893a:	4601      	mov	r1, r0
 800893c:	4620      	mov	r0, r4
 800893e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008942:	f000 b817 	b.w	8008974 <_kill_r>
 8008946:	2b01      	cmp	r3, #1
 8008948:	d00a      	beq.n	8008960 <_raise_r+0x4c>
 800894a:	1c59      	adds	r1, r3, #1
 800894c:	d103      	bne.n	8008956 <_raise_r+0x42>
 800894e:	2316      	movs	r3, #22
 8008950:	6003      	str	r3, [r0, #0]
 8008952:	2001      	movs	r0, #1
 8008954:	e7e7      	b.n	8008926 <_raise_r+0x12>
 8008956:	2400      	movs	r4, #0
 8008958:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800895c:	4628      	mov	r0, r5
 800895e:	4798      	blx	r3
 8008960:	2000      	movs	r0, #0
 8008962:	e7e0      	b.n	8008926 <_raise_r+0x12>

08008964 <raise>:
 8008964:	4b02      	ldr	r3, [pc, #8]	; (8008970 <raise+0xc>)
 8008966:	4601      	mov	r1, r0
 8008968:	6818      	ldr	r0, [r3, #0]
 800896a:	f7ff bfd3 	b.w	8008914 <_raise_r>
 800896e:	bf00      	nop
 8008970:	2000000c 	.word	0x2000000c

08008974 <_kill_r>:
 8008974:	b538      	push	{r3, r4, r5, lr}
 8008976:	4d07      	ldr	r5, [pc, #28]	; (8008994 <_kill_r+0x20>)
 8008978:	2300      	movs	r3, #0
 800897a:	4604      	mov	r4, r0
 800897c:	4608      	mov	r0, r1
 800897e:	4611      	mov	r1, r2
 8008980:	602b      	str	r3, [r5, #0]
 8008982:	f7f9 f82b 	bl	80019dc <_kill>
 8008986:	1c43      	adds	r3, r0, #1
 8008988:	d102      	bne.n	8008990 <_kill_r+0x1c>
 800898a:	682b      	ldr	r3, [r5, #0]
 800898c:	b103      	cbz	r3, 8008990 <_kill_r+0x1c>
 800898e:	6023      	str	r3, [r4, #0]
 8008990:	bd38      	pop	{r3, r4, r5, pc}
 8008992:	bf00      	nop
 8008994:	20000354 	.word	0x20000354

08008998 <_getpid_r>:
 8008998:	f7f9 b818 	b.w	80019cc <_getpid>

0800899c <_init>:
 800899c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800899e:	bf00      	nop
 80089a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089a2:	bc08      	pop	{r3}
 80089a4:	469e      	mov	lr, r3
 80089a6:	4770      	bx	lr

080089a8 <_fini>:
 80089a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089aa:	bf00      	nop
 80089ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089ae:	bc08      	pop	{r3}
 80089b0:	469e      	mov	lr, r3
 80089b2:	4770      	bx	lr
